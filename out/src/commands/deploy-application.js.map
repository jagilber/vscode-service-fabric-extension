{"version":3,"file":"deploy-application.js","sourceRoot":"","sources":["../../../src/commands/deploy-application.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAiC;AACjC,qCAAqC;AACrC,MAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AAE3C,IAAI,mBAAmB,CAAC;AACxB,IAAI,sBAAsB,CAAC;AAE3B,IAAG,IAAI,CAAC,UAAU,EAAC;IACf,mBAAmB,GAAG,MAAM,CAAC;IAC7B,sBAAsB,GAAG,MAAM,CAAC;CACnC;KAEG;IACA,mBAAmB,GAAG,KAAK,CAAC;IAC5B,sBAAsB,GAAG,KAAK,CAAC;CAClC;AAED,SAAsB,iBAAiB;;QACnC,IAAI,QAAQ,GAAqB,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAC/E,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;YACpC,IAAI,CAAC,wDAAwD,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE,MAAM;gBACxF,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,CAAC;oBAChE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjB,OAAO;iBACV;YACL,CAAC,CAAC,CAAC;SACN;aACI,IAAI,IAAI,CAAC,UAAU,EAAE;YACtB,IAAI,UAAU,GAAiB,MAAM,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;YACnF,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAC;gBACtB,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,6EAA6E,CAAC,CAAC;gBAC9G,OAAO;aACV;YACD,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChB,QAAQ,CAAC,QAAQ,CAAC,kEAAkE,CAAC,CAAC;SACzF;QACD,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;CAAA;AArBD,8CAqBC;AAED,SAAe,kBAAkB,CAAC,QAAwB;;QACtD,IAAI,GAAG,GAAiB,IAAI,CAAC;QAC7B,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,GAAG,sBAAsB,CAAC,CAAC;QAC9E,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,gDAAgD,CAAC,CAAC;YACjF,OAAO;SACV;QACD,MAAM,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,QAAQ,CAAC,QAAQ,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC;QAC9C,QAAQ,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;CAAA","sourcesContent":["import * as vscode from \"vscode\";\r\nimport * as vars from './osdetector';\r\nconst exec = require('child_process').exec;\r\n\r\nvar builScriptExtension;\r\nvar installScriptExtension;\r\n\r\nif(vars._isWindows){\r\n    builScriptExtension = '.cmd';\r\n    installScriptExtension = '.ps1';\r\n}\r\n\r\nelse{\r\n    builScriptExtension = '.sh';\r\n    installScriptExtension = '.sh';\r\n}\r\n\r\nexport async function deployApplication() {\r\n    var terminal : vscode.Terminal = vscode.window.createTerminal('ServiceFabric');\r\n    if (vars._isLinux || vars._isMacintosh) {\r\n        exec('sfctl cluster select --endpoint http://localhost:19080', function (err, stdout, stderr) {\r\n            if (err) {\r\n                vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                console.log(err);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    else if (vars._isWindows) {\r\n        var buildFiles: vscode.Uri[] = await vscode.workspace.findFiles('**/build.gradle');\r\n        if (buildFiles.length > 1){\r\n            vscode.window.showErrorMessage(\"Sorry! You cannot deploy Service Fabric Java application to Windows Cluster\");\r\n            return;\r\n        }\r\n        terminal.show();\r\n        terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndpoint localhost:19000\");\r\n    }\r\n    installApplication(terminal);\r\n}\r\n\r\nasync function installApplication(terminal:vscode.Terminal) {\r\n    var uri: vscode.Uri[] = null;\r\n    uri = await vscode.workspace.findFiles('**/install' + installScriptExtension);\r\n    if (uri.length < 1) {\r\n        vscode.window.showErrorMessage(\"An install file was not found in the workspace\");\r\n        return;     \r\n    }\r\n    const relativeInstallPath = vscode.workspace.asRelativePath(uri[0]);\r\n    terminal.sendText('./' + relativeInstallPath);\r\n    terminal.show();\r\n}\r\n"]}