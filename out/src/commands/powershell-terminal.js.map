{"version":3,"file":"powershell-terminal.js","sourceRoot":"","sources":["../../../src/commands/powershell-terminal.ts"],"names":[],"mappings":"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","sourcesContent":["import { FSWatcher } from \"fs\";\r\nimport { runInThisContext } from \"vm\";\r\nimport * as vscode from \"vscode\";\r\nimport * as vars from './osdetector';\r\nconst exec = require('child_process').exec;\r\nconst fs = require(\"fs\");\r\nconst path = require('path');\r\nconst os = require('os');\r\nconst eventEmitter = require('events');\r\nconst emitter = new eventEmitter();\r\n\r\nexport class powershellTerminal {\r\n\r\n    terminal: vscode.Terminal = null;\r\n    fileWatcher: vscode.FileSystemWatcher = null;\r\n    static tempDir: string = null;\r\n    tempFile: string = null\r\n    writeEmitter = new vscode.EventEmitter<vscode.Uri>();\r\n    requestCounter: number = 0;\r\n\r\n    constructor() {\r\n        //   this.initialize();\r\n    }\r\n\r\n    createTerminal(terminalName: string): boolean {\r\n        if (vscode.window.terminals.find(x => x.name === terminalName)) {\r\n            console.log(`found existing terminal ${terminalName}`);\r\n            this.terminal = vscode.window.terminals.find(x => x.name === terminalName);\r\n        }\r\n        else {\r\n            this.terminal = vscode.window.createTerminal(terminalName);\r\n        }\r\n\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint', function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            this.terminal.show();\r\n        }\r\n\r\n        if (this.terminal === null) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    async disposeTerminal(): Promise<unknown> {\r\n        return await new Promise((resolve, reject) => {\r\n            if (this.terminal !== null) {\r\n                console.log('disposing terminal');\r\n                this.terminal.dispose();\r\n            }\r\n\r\n            if (powershellTerminal.tempDir !== null) {\r\n                console.log(`removing temp dir: ${powershellTerminal.tempDir}`);\r\n                fs.rmdir(powershellTerminal.tempDir, {\r\n                    maxRetries: 3,\r\n                    recursive: true,\r\n                    retryDelay: 1000\r\n                });\r\n                console.log(`removed temp dir: ${powershellTerminal.tempDir}`);\r\n            }\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    async initialize(terminalName: string): Promise<unknown> {\r\n        return await new Promise((resolve, reject) => {\r\n\r\n            if (powershellTerminal.tempDir === null) {\r\n                fs.mkdtemp(path.join(os.tmpdir(), 'pst-'), (err, directory) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n\r\n                    console.log(directory);\r\n                    powershellTerminal.tempDir = directory.replace(/\\\\/g, '/');\r\n\r\n                    this.createTerminal(terminalName);\r\n                    this.send(this.outFunctionGenerator(), false);\r\n                    this.send(`write-host \"using: ${powershellTerminal.tempDir}\"`, false);\r\n\r\n                    fs.watch(powershellTerminal.tempDir, (eventType, filename) => {\r\n                        console.log(`event type is: ${eventType}`);\r\n                        if (filename) {\r\n                            console.log(`filename provided: ${filename}`);\r\n                        } else {\r\n                            console.log('filename not provided');\r\n                        }\r\n                        emitter.emit('change', filename);\r\n                    });\r\n\r\n                    resolve(undefined);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    outFunctionGenerator(): string {\r\n        return '$global:requestCounter = 0;\\\r\n            function out-json{\\\r\n                [CmdletBinding()]\\\r\n                Param(\\\r\n                    [Parameter(ValueFromPipeline)]\\\r\n                    [string]$item,\\\r\n                    [string]$fileDir = \"' + powershellTerminal.tempDir + '\",\\\r\n                    [int]$depth = 2,\\\r\n                    [int]$counter = 0\\\r\n                )\\\r\n                if($counter -eq 0){\\\r\n                    $counter = ++$global:requestCounter;\\\r\n                }\\\r\n                else{\\\r\n                    $global:requestCounter = $counter;\\\r\n                }\\\r\n                $fileName = $fileDir + \"\\\\\" + $counter + \".json\";\\\r\n                $errorActionPreference = \"continue\";\\\r\n                write-host \"$item\";\\\r\n                try {\\\r\n                    $r = iex $item;\\\r\n                    write-host ($r | format-list * | out-string);\\\r\n                    $r | convertto-json -depth $depth -warningaction silentlycontinue | out-file \"$fileName\";\\\r\n                }\\\r\n                catch {\\\r\n                    write-error ($error | format-list * | out-string);\\\r\n                    $error | convertto-json -depth $depth -warningaction silentlycontinue | out-file \"$fileName\";\\\r\n                }\\\r\n            }\\\r\n            cls';\r\n    }\r\n\r\n    async readJson(jsonFile: string, nullOk:boolean = true): Promise<JSON> {\r\n        return await new Promise((resolve, reject) => {\r\n            fs.readFile(jsonFile, 'utf8', (err, jsonString:string) => {\r\n                if (err) {\r\n                    console.log(\"json read failed:\", err);\r\n                    reject();\r\n                }\r\n                console.log('json data:', jsonString);\r\n                if(jsonString.length < 2){\r\n                    console.log(\"json read failed: empty file\", jsonString);\r\n                    if(nullOk){\r\n                        resolve(JSON);\r\n                    }\r\n                    else{\r\n                        reject(jsonString);\r\n                    }\r\n                }\r\n                resolve(JSON.parse(jsonString));\r\n            });\r\n        });\r\n    }\r\n\r\n    async readText(textFile: string): Promise<string> {\r\n        return await new Promise((resolve, reject) => {\r\n            fs.readFile(textFile, 'utf8', (err, textString) => {\r\n                if (err) {\r\n                    console.log(\"text read failed:\", err);\r\n                    reject();\r\n                }\r\n                console.log('text data:', textString);\r\n                resolve(textString);\r\n            });\r\n        });\r\n    }\r\n\r\n    async receive(outputFile: string): Promise<string> {\r\n        return await new Promise(async (resolve, reject) => {\r\n            await this.waitForEvent(emitter, outputFile);\r\n            console.log('receive returning');\r\n            resolve(outputFile);\r\n        });\r\n    }\r\n\r\n    show(): void {\r\n        this.terminal.show();\r\n    }\r\n\r\n    async sendReceive(terminalCommand: string, checkForErrors: boolean = true): Promise<JSON> {\r\n        return await new Promise(async (resolve, reject) => {\r\n            var resultJson: JSON = await this.readJson(await this.send(terminalCommand, true));\r\n            if (checkForErrors) {\r\n                for (var key in resultJson) {\r\n                    console.log(`checking key: ${key}`);\r\n                    if (resultJson[key].hasOwnProperty('Exception')) {\r\n                        reject(resultJson);\r\n                    }\r\n                }\r\n            }\r\n            resolve(resultJson);\r\n        });\r\n    }\r\n\r\n    async sendReceiveText(terminalCommand: string, checkForErrors: boolean = true): Promise<string> {\r\n        return await new Promise(async (resolve, reject) => {\r\n            var resultText: string = await this.readText(await this.send(terminalCommand, true));\r\n            if (checkForErrors) {\r\n                if (resultText.startsWith('Exception') || resultText.startsWith('Error')) {\r\n                    reject(resultText);\r\n                }\r\n            }\r\n            resolve(resultText);\r\n        });\r\n    }\r\n\r\n    async send(terminalCommand: string, wait: boolean = true): Promise<string> {\r\n        return await new Promise(async (resolve, reject) => {\r\n            var fileName: string = powershellTerminal.tempDir + '/' + ++this.requestCounter + '.json';\r\n\r\n            if (wait) {\r\n                terminalCommand = '\"' + terminalCommand + '\" | out-json -counter ' + this.requestCounter + ';\\r\\n';\r\n            }\r\n            else {\r\n                terminalCommand += ';\\r\\n';\r\n            }\r\n\r\n            console.log(terminalCommand);\r\n            this.terminal.sendText(terminalCommand);\r\n\r\n            if (wait) {\r\n                await this.waitForEvent(emitter, fileName);\r\n            }\r\n\r\n            resolve(fileName);\r\n        });\r\n    }\r\n\r\n    sendText(terminalCommand: string): void {\r\n        var promise: Promise<string> = new Promise(async (resolve, reject) => {\r\n            await this.send(terminalCommand, true);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    // waitForObject(objectParam): boolean {\r\n    //     while (objectParam === null) {\r\n    //         console.log(objectParam === null);\r\n    //         setTimeout(this.waitForObject, 1000, objectParam);\r\n    //     }\r\n\r\n    //     return true;\r\n    // }\r\n\r\n    async waitForEvent<T>(emitter: NodeJS.EventEmitter, pendingFileName: string): Promise<unknown> {\r\n        return await new Promise((resolve, reject) => {\r\n            emitter.once('change', (fileName) => {\r\n                console.log(`waitforevent emitter: ${fileName}`);\r\n                if (pendingFileName.endsWith('/' + fileName)) {\r\n                    console.log(`emitter: ${pendingFileName}`);\r\n                    resolve(pendingFileName);\r\n                }\r\n            });\r\n            emitter.once('error', (event) => {\r\n                console.error(`waitforevent error emitter: ${event}`);\r\n                reject(event);\r\n            });\r\n        });\r\n    }\r\n}"]}