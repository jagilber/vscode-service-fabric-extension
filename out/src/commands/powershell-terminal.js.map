{"version":3,"file":"powershell-terminal.js","sourceRoot":"","sources":["../../../src/commands/powershell-terminal.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAiC;AACjC,qCAAqC;AACrC,MAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AAE3C,MAAa,kBAAkB;IAQ3B,YAAY,YAAoB;QAC9B,uBAAuB;QAPzB,aAAQ,GAAoB,IAAI,CAAC;QACjC,gBAAW,GAA6B,IAAI,CAAC;QAC7C,4DAA4D;QAC5D,aAAQ,GAAW,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAC,GAAG,CAAC,GAAG,qCAAqC,CAAC;QACzG,iBAAY,GAAG,IAAI,MAAM,CAAC,YAAY,EAAc,CAAC;QAK7C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAA,kBAAkB;QAC1F,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,UAAS,GAAG;YACpD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,yDAAyD;QACzD,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACxC,OAAO;QACL,aAAa;QACb,2BAA2B;QAC3B,2CAA2C;QAC3C,MAAM;IACV,CAAC;IAEK,IAAI,CAAC,eAAuB;;YAC/B,6BAA6B;YACzB,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,GAAG,MAAM,CAAC,CAAC;YAC5D,OAAO;QACT,CAAC;KAAA;IAEK,OAAO;;YACX,8BAA8B;YAC1B,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;YAChC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC5C,OAAO;QACT,CAAC;KAAA;IAED,cAAc,CAAC,YAAoB;QAC/B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAC3D,0BAA0B;QAE1B,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;YACpC,IAAI,CAAC,iCAAiC,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE,MAAM;gBACjE,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,+BAA+B,CAAC,CAAC;oBAChE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjB,OAAO;iBACV;YACL,CAAC,CAAC,CAAC;SACN;aACI,IAAI,IAAI,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB;IACL,CAAC;IAEK,eAAe;;YACjB,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;gBACxB,MAAM,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACtC;QACL,CAAC;KAAA;CAEJ;AAhED,gDAgEC","sourcesContent":["import * as vscode from \"vscode\";\r\nimport * as vars from './osdetector';\r\nconst exec = require('child_process').exec;\r\n\r\nexport class powershellTerminal {\r\n\r\n    terminal: vscode.Terminal = null;\r\n    fileWatcher: vscode.FileSystemWatcher = null;\r\n    //tempFile: string = './powershell-terminal-transcript.tmp';\r\n    tempFile: string = vscode.workspace.rootPath.replace('\\\\\\\\','/') + '/powershell-terminal-transcript.tmp';\r\n    writeEmitter = new vscode.EventEmitter<vscode.Uri>();\r\n\r\n    constructor(terminalName: string) {\r\n      //  new Promise(() => {\r\n\r\n            this.fileWatcher = vscode.workspace.createFileSystemWatcher('**/*.tmp');//(this.tempFile);\r\n            var listener = this.fileWatcher.onDidChange(function(uri) { \r\n                console.log(uri);\r\n                this.writeEmitter.fire(uri); \r\n            });\r\n            //this.fileWatcher.onDidChange = this.writeEmitter.event;\r\n            this.createTerminal(terminalName);\r\n      //  });\r\n        // ((uri) =>{\r\n        //     console.log('test');\r\n        //     console.log('file changed: ' + uri);\r\n        // });\r\n    }\r\n\r\n    async send(terminalCommand: string) {\r\n       // return new Promise(() => {\r\n           await this.terminal.sendText(terminalCommand + '\\r\\n');\r\n      //  });\r\n    }\r\n\r\n    async receive() {\r\n      //  return new Promise(() => {\r\n          this.fileWatcher.onDidChange;\r\n       await console.log(this.writeEmitter.event);\r\n      //  });\r\n    }\r\n\r\n    createTerminal(terminalName: string) {\r\n        this.terminal = vscode.window.createTerminal(terminalName);\r\n        //this.terminal.processId;\r\n\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint', function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            this.terminal.show();\r\n            this.send('start-transcript ' + this.tempFile);\r\n            this.receive();\r\n        }\r\n    }\r\n\r\n    async disposeTerminal() {\r\n        if (this.terminal !== null) {\r\n            await this.send(\"stop-transcript\");\r\n        }\r\n    }\r\n\r\n}"]}