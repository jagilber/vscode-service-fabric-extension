{"version":3,"file":"publish-application.js","sourceRoot":"","sources":["../../../src/commands/publish-application.ts"],"names":[],"mappings":"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","sourcesContent":["import * as pwsh from './powershell-terminal';\r\nimport * as vscode from \"vscode\";\r\nimport * as vars from './osdetector';\r\nconst exec = require('child_process').exec;\r\nvar buildScriptExtension;\r\nvar installScriptExtension;\r\nconst terminal = new pwsh.powershellTerminal();\r\n\r\nif (vars._isWindows) {\r\n    buildScriptExtension = '.cmd';\r\n    installScriptExtension = '.ps1';\r\n}\r\n\r\nelse {\r\n    buildScriptExtension = '.sh';\r\n    installScriptExtension = '.sh';\r\n}\r\n\r\nexport async function publishApplication() {\r\n    if (vars._isWindows) {\r\n        await terminal.initialize('Service Fabric');\r\n    }\r\n    await readCloudProfile();\r\n}\r\n\r\nasync function deployToUnsecureCluster(clusterInfo) {\r\n    if (clusterInfo.ConnectionIPOrURL.length > 0) {\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint ' + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort, function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndPoint \" + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort);\r\n            terminal.show();\r\n        }\r\n    }\r\n    else {\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint http://localhost:19080', function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndpoint localhost:19000\");\r\n            terminal.show();\r\n        }\r\n    }\r\n    installApplication(terminal);\r\n}\r\n\r\nasync function deployToSecureClusterCert(clusterInfo) {\r\n\r\n    if (vars._isLinux || vars._isMacintosh) {\r\n        exec('sfctl cluster select --endpoint ' + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort + ' --cert ' + clusterInfo.ClientCert + ' --key ' + clusterInfo.ClientKey + ' --no-verify', function (err, stdout, stderr) {\r\n            if (err) {\r\n                vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                console.log(err);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    else if (vars._isWindows) {\r\n        var connectResults: JSON = await terminal.sendReceive(\"Connect-ServiceFabricCluster -ConnectionEndPoint \"\r\n            + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort\r\n            + \" -X509Credential -ServerCertThumbprint \" + clusterInfo.ServerCertThumbprint\r\n            + \" -FindType FindByThumbprint -FindValue \" + clusterInfo.ClientCertThumbprint\r\n            + \" -StoreLocation CurrentUser -StoreName My\");\r\n        console.log(`results: ${connectResults}`);\r\n    }\r\n    installApplication(terminal);\r\n}\r\n\r\nasync function installApplication(terminal: pwsh.powershellTerminal) {\r\n    console.log(\"Install Application\");\r\n    var uri: vscode.Uri[] = null;\r\n    uri = await vscode.workspace.findFiles('**/install' + installScriptExtension);\r\n    if (uri.length < 1) {\r\n        vscode.window.showErrorMessage(\"An install file was not found in the workspace\");\r\n        return;\r\n    }\r\n    const relativeInstallPath = vscode.workspace.asRelativePath(uri[0]);\r\n    terminal.sendReceiveText('./' + relativeInstallPath);\r\n}\r\n\r\n\r\nasync function readCloudProfile() {\r\n    var fs = require('fs');\r\n    const cloudProfile: vscode.Uri[] = await vscode.workspace.findFiles('**/Cloud.json');\r\n    if (cloudProfile.length < 1) {\r\n        vscode.window.showErrorMessage(\"Could not find configuration file Cloud.json. Please ensure that the application package is built using the build command before executing publish.\");\r\n        return;\r\n    }\r\n\r\n    const pathToCloudProfile = cloudProfile[0].fsPath.replace('/c:', '');\r\n    await fs.readFile(pathToCloudProfile, 'utf8', function (err, data) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n        var clusterData = JSON.parse(data);\r\n        var clusterInfo = clusterData.ClusterConnectionParameters;\r\n        if (clusterInfo.ClientCert.length > 0 || clusterInfo.ClientCertThumbprint.length > 0) {\r\n            deployToSecureClusterCert(clusterInfo);\r\n        } else {\r\n            deployToUnsecureCluster(clusterInfo);\r\n        }\r\n    });\r\n}\r\n"]}