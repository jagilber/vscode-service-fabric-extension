{"version":3,"file":"publish-application.js","sourceRoot":"","sources":["../../../src/commands/publish-application.ts"],"names":[],"mappings":"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","sourcesContent":["import { env } from \"process\";\r\n\r\nimport * as vscode from \"vscode\";\r\nimport * as vars from './osdetector';\r\nconst exec = require('child_process').exec;\r\nconst fsWatcher = require('fs'); \r\nconst outputFile = \"/temp/test.txt\";\r\nvar builScriptExtension;\r\nvar installScriptExtension;\r\n\r\nif (vars._isWindows) {\r\n    builScriptExtension = '.cmd';\r\n    installScriptExtension = '.ps1';\r\n}\r\n\r\nelse {\r\n    builScriptExtension = '.sh';\r\n    installScriptExtension = '.sh';\r\n}\r\n\r\nexport async function publishApplication() {\r\n    await readCloudProfile();\r\n}\r\n\r\nasync function deployToUnsecureCluster(clusterInfo) {\r\n    var terminal: vscode.Terminal = vscode.window.createTerminal('ServiceFabric');\r\n    terminal.sendText('import-module servicefabric;');\r\n    if (clusterInfo.ConnectionIPOrURL.length > 0) {\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint ' + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort, function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndPoint \" + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort);\r\n            terminal.show();\r\n        }\r\n    }\r\n    else {\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint http://localhost:19080', function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndpoint localhost:19000\");\r\n            terminal.show();\r\n        }\r\n    }\r\n    installApplication(terminal);\r\n}\r\n\r\nasync function deployToSecureClusterCert(clusterInfo) {\r\n\r\n    const writeEmitter = new vscode.EventEmitter<string>();\r\n    var subterminal: vscode.Terminal = vscode.window.createTerminal('ServiceFabric');\r\n    \r\n    fsWatcher.watchFile(outputFile,{\r\n        bigint: false,\r\n        persistent: true,\r\n        interval: 500\r\n    },(curr,prev) =>{\r\n        console.log('previous',prev.mtime);\r\n        console.log('current',curr.mtime);\r\n    });\r\n    \r\n    fsWatcher.watch(outputFile, (eventType, filename) => { \r\n        if (fsWatcher.readFileSync(outputFile, { encoding: 'utf8', flag: 'r' }).length < 1) {\r\n            return;\r\n        }\r\n\r\n        console.log(\"\\nThe file\", filename, \"was modified!\"); \r\n        console.log(\"The type of change was:\", eventType); \r\n        console.log(fsWatcher.readFileSync(outputFile,{encoding:'utf8', flag:'r'}));\r\n        terminal.sendText(fsWatcher.readFileSync(outputFile, { encoding: 'utf8', flag: 'r' }),true);\r\n        //terminal.sendText('\\n\\n',true);\r\n        fsWatcher.writeFileSync(outputFile,\"\");\r\n      }); \r\n\r\n\r\n    const pty: vscode.Pseudoterminal = {\r\n        onDidWrite: writeEmitter.event,\r\n        open: () => { \r\n            writeEmitter.fire('Opening Terminal'); \r\n            writeEmitter.fire('\\r\\n'); \r\n        },\r\n        close: () => { },\r\n        handleInput: data => {\r\n            writeEmitter.fire(data.replace(/\\r/g,'\\r\\n',));\r\n            //subterminal.sendText(data);\r\n        },\r\n    };\r\n\r\n    var terminal = vscode.window.createTerminal({ name: 'Local echo', pty: pty });\r\n    //var terminal = vscode.window.createTerminal({ name: 'Local echo', pty: pty });\r\n  //  await pty.onDidWrite(() => console.log);\r\n    //vscode.env.shell = 'pwsh';\r\n//vscode.window.registerTerminalLinkProvider\r\n    \r\n    if (vars._isLinux || vars._isMacintosh) {\r\n        exec('sfctl cluster select --endpoint ' + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort + ' --cert ' + clusterInfo.ClientCert + ' --key ' + clusterInfo.ClientKey + ' --no-verify', function (err, stdout, stderr) {\r\n            if (err) {\r\n                vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                console.log(err);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    else if (vars._isWindows) {\r\n        terminal.show();\r\n        subterminal.sendText('import-module servicefabric >>' + outputFile);\r\n        //terminal.sendText('\\r');\r\n        subterminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndPoint \" + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort + \" -X509Credential -ServerCertThumbprint \" + clusterInfo.ServerCertThumbprint + \" -FindType FindByThumbprint -FindValue \" + clusterInfo.ClientCertThumbprint + \" -StoreLocation CurrentUser -StoreName My >>\" + outputFile);\r\n        //terminal.sendText('\\r');\r\n    }\r\n    installApplication(subterminal);\r\n}\r\n\r\nasync function installApplication(terminal: vscode.Terminal) {\r\n    console.log(\"Install Application\");\r\n    var uri: vscode.Uri[] = null;\r\n    uri = await vscode.workspace.findFiles('**/install' + installScriptExtension);\r\n    if (uri.length < 1) {\r\n        vscode.window.showErrorMessage(\"An install file was not found in the workspace\");\r\n        return;\r\n    }\r\n    const relativeInstallPath = vscode.workspace.asRelativePath(uri[0]);\r\n    terminal.sendText('./' + relativeInstallPath + ' >>' + outputFile);\r\n//    terminal.show();\r\n}\r\n\r\n\r\nasync function readCloudProfile() {\r\n    var fs = require('fs');\r\n    const cloudProfile: vscode.Uri[] = await vscode.workspace.findFiles('**/Cloud.json');\r\n    if (cloudProfile.length < 1) {\r\n        vscode.window.showErrorMessage(\"Could not find configuration file Cloud.json. Please ensure that the application package is built using the build command before executing publish.\");\r\n        return;\r\n    }\r\n\r\n    const pathToCloudProfile = cloudProfile[0].fsPath.replace('/c:', '');\r\n    await fs.readFile(pathToCloudProfile, 'utf8', function (err, data) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n        var clusterData = JSON.parse(data);\r\n        var clusterInfo = clusterData.ClusterConnectionParameters;\r\n        if (clusterInfo.ClientCert.length > 0 || clusterInfo.ClientCertThumbprint.length > 0) {\r\n            deployToSecureClusterCert(clusterInfo);\r\n        } else {\r\n            deployToUnsecureCluster(clusterInfo);\r\n        }\r\n    });\r\n}\r\n"]}