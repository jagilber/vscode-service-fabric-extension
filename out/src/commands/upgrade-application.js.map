{"version":3,"file":"upgrade-application.js","sourceRoot":"","sources":["../../../src/commands/upgrade-application.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from \"vscode\";\r\nimport * as vars from './osdetector';\r\nconst exec = require('child_process').exec;\r\n\r\nvar builScriptExtension;\r\nvar installScriptExtension;\r\n\r\nif(vars._isWindows){\r\n    builScriptExtension = '.cmd';\r\n    installScriptExtension = '.ps1';\r\n}\r\n\r\nelse{\r\n    builScriptExtension = '.sh';\r\n    installScriptExtension = '.sh';\r\n}\r\n\r\nexport async function upgradeApplication() {\r\n    var version = await readVersionFromManifest();\r\n    var clusterInfo = await readCloudProfile();\r\n    if (clusterInfo.ClientCert.length > 0 || clusterInfo.ClientCertThumbprint.length > 0) {\r\n        deployToSecureClusterCert(clusterInfo, version);\r\n    } else {\r\n        deployToUnsecureCluster(clusterInfo, version);\r\n    }\r\n}\r\n\r\nasync function deployToUnsecureCluster(clusterInfo, version) {\r\n    var terminal: vscode.Terminal = vscode.window.createTerminal('ServiceFabric');\r\n    if (clusterInfo.ConnectionIPOrURL.length > 0) {\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint ' + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort, function (err, stdout, stderr) {\r\n                if (err) {\r\n                    vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndPoint \"+ clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort);\r\n            terminal.show();\r\n        }\r\n    }\r\n    else {\r\n        if (vars._isLinux || vars._isMacintosh) {\r\n            exec('sfctl cluster select --endpoint http://localhost:19080', function (err, stdout, stderr) {\r\n            if (err) {\r\n                vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                console.log(err);\r\n                return;\r\n            }\r\n            });\r\n        }\r\n        else if (vars._isWindows) {\r\n            terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndpoint localhost:19000\");\r\n            terminal.show();\r\n        }\r\n    }\r\n    installApplication(terminal, version);\r\n}\r\n\r\nasync function deployToSecureClusterCert(clusterInfo, version) {\r\n    var terminal: vscode.Terminal = vscode.window.createTerminal('ServiceFabric');\r\n    if (vars._isLinux || vars._isMacintosh) {\r\n        exec('sfctl cluster select --endpoint ' + clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort + ' --cert ' + clusterInfo.ClientCert + ' --key ' + clusterInfo.ClientKey + ' --no-verify', function (err, stdout, stderr) {\r\n            if (err) {\r\n                vscode.window.showErrorMessage(\"Could not connect to cluster.\");\r\n                console.log(err);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    else if (vars._isWindows) {\r\n        terminal.show();\r\n        terminal.sendText(\"Connect-ServiceFabricCluster -ConnectionEndPoint \"+ clusterInfo.ConnectionIPOrURL + ':' + clusterInfo.ConnectionPort + \" -X509Credential -ServerCertThumbprint \" + clusterInfo.ServerCertThumbprint + \" -FindType FindByThumbprint -FindValue \" + clusterInfo.ClientCertThumbprint +\" -StoreLocation CurrentUser -StoreName My\");\r\n    }\r\n    installApplication(terminal, version);\r\n}\r\n\r\nasync function installApplication(terminal:vscode.Terminal, version:string) {\r\n    console.log(\"Upgrade Application\");\r\n    var uri: vscode.Uri[] = null;\r\n    uri = await vscode.workspace.findFiles('**/upgrade' + installScriptExtension);\r\n    if (uri.length < 1) {\r\n        vscode.window.showErrorMessage(\"An upgrade file was not found in the workspace\");\r\n        return;\r\n    }\r\n    const relativeInstallPath = vscode.workspace.asRelativePath(uri[0]);\r\n    terminal.sendText('./' + relativeInstallPath + ' -version ' + version);\r\n    terminal.show();\r\n}\r\n\r\nasync function readVersionFromManifest(): Promise<string> {\r\n    var fs = require('fs');\r\n    const cloudProfile: vscode.Uri[] = await vscode.workspace.findFiles('**/ApplicationManifest.xml');\r\n    const pathToCloudProfile = cloudProfile[0].fsPath.replace('/c:', '');\r\n    const manifest = fs.readFileSync(pathToCloudProfile).toString('utf8');\r\n    var manifestJs;\r\n    var parseString = require('xml2js').parseString;\r\n\r\n    parseString(manifest, function(err, result) {\r\n        manifestJs = result;\r\n    });\r\n\r\n    var version = manifestJs['ApplicationManifest']['$']['ApplicationTypeVersion'];\r\n    return version;\r\n}\r\n\r\nasync function readCloudProfile() {\r\n    var fs = require('fs');\r\n    const cloudProfile: vscode.Uri[] = await vscode.workspace.findFiles('**/Cloud.json');\r\n    const pathToCloudProfile = cloudProfile[0].fsPath.replace('/c:', '');\r\n    const profile = fs.readFileSync(pathToCloudProfile).toString('utf8');\r\n\r\n    var clusterData = JSON.parse(profile);\r\n    var clusterInfo = clusterData.ClusterConnectionParameters;\r\n    return clusterInfo;\r\n}"]}