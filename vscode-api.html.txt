   #[1]RSS Feed for code.visualstudio.com

      [1] https://code.visualstudio.com/feed.xml

   [2]Skip to content

   [3]Visual Studio Code (BUTTON)
  https://code.visualstudio.com/

     * [4]Docs
      https://code.visualstudio.com/docs

     * [5]Updates
      https://code.visualstudio.com/updates

     * [6]Blog
      https://code.visualstudio.com/blogs

     * [7]API
      https://code.visualstudio.com/api

     * [8]Extensions
      https://marketplace.visualstudio.com/VSCode

     * [9]FAQ
      https://code.visualstudio.com/docs/supporting/faq

     * [10]Learn
      https://code.visualstudio.com/learn

     * [11]Search
      https://code.visualstudio.com/Search

     * [12]Download

      https://code.visualstudio.com/Download

     * [13]Search Search
      https://code.visualstudio.com/Search

     * ____________________ (BUTTON) Search Search
     * [14]Download VS Code Download VS Code Download

     [14] https://code.visualstudio.com/Download

   [15]Version 1.51 is now available! Read about the new features
   and fixes from October.
   Dismiss this update

  https://code.visualstudio.com/updates

     * [16]Overview
      https://code.visualstudio.com/api

     * [17]Get Started
          + [18]Your First Extension
           https://code.visualstudio.com/api/get-started/your-first-extension

          + [19]Extension Anatomy
           https://code.visualstudio.com/api/get-started/extension-anatomy

          + [20]Wrapping Up
           https://code.visualstudio.com/api/get-started/wrapping-up

     * [21]Extension Capabilities
          + [22]Overview
           https://code.visualstudio.com/api/extension-capabilities/overview

          + [23]Common Capabilities
           https://code.visualstudio.com/api/extension-capabilities/common-capabilities

          + [24]Theming
           https://code.visualstudio.com/api/extension-capabilities/theming

          + [25]Extending Workbench
           https://code.visualstudio.com/api/extension-capabilities/extending-workbench

     * [26]Extension Guides
          + [27]Overview
           https://code.visualstudio.com/api/extension-guides/overview

          + [28]Command
           https://code.visualstudio.com/api/extension-guides/command

          + [29]Color Theme
           https://code.visualstudio.com/api/extension-guides/color-theme

          + [30]File Icon Theme
           https://code.visualstudio.com/api/extension-guides/file-icon-theme

          + [31]Product Icon Theme
           https://code.visualstudio.com/api/extension-guides/product-icon-theme

          + [32]Tree View
           https://code.visualstudio.com/api/extension-guides/tree-view

          + [33]Webview
           https://code.visualstudio.com/api/extension-guides/webview

          + [34]Notebook
           https://code.visualstudio.com/api/extension-guides/notebook

          + [35]Custom Editors
           https://code.visualstudio.com/api/extension-guides/custom-editors

          + [36]Virtual Documents
           https://code.visualstudio.com/api/extension-guides/virtual-documents

          + [37]Task Provider
           https://code.visualstudio.com/api/extension-guides/task-provider

          + [38]Source Control
           https://code.visualstudio.com/api/extension-guides/scm-provider

          + [39]Debugger Extension
           https://code.visualstudio.com/api/extension-guides/debugger-extension

          + [40]Markdown Extension
           https://code.visualstudio.com/api/extension-guides/markdown-extension

          + [41]Custom Data Extension
           https://code.visualstudio.com/api/extension-guides/custom-data-extension

     * [42]Language Extensions
          + [43]Overview
           https://code.visualstudio.com/api/language-extensions/overview

          + [44]Syntax Highlight Guide
           https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide

          + [45]Semantic Highlight Guide
           https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide

          + [46]Snippet Guide
           https://code.visualstudio.com/api/language-extensions/snippet-guide

          + [47]Language Configuration Guide
           https://code.visualstudio.com/api/language-extensions/language-configuration-guide

          + [48]Programmatic Language Features
           https://code.visualstudio.com/api/language-extensions/programmatic-language-features

          + [49]Language Server Extension Guide
           https://code.visualstudio.com/api/language-extensions/language-server-extension-guide

          + [50]Embedded Languages
           https://code.visualstudio.com/api/language-extensions/embedded-languages

     * [51]Testing and Publishing
          + [52]Testing Extensions
           https://code.visualstudio.com/api/working-with-extensions/testing-extension

          + [53]Publishing Extensions
           https://code.visualstudio.com/api/working-with-extensions/publishing-extension

          + [54]Bundling Extensions
           https://code.visualstudio.com/api/working-with-extensions/bundling-extension

          + [55]Continuous Integration
           https://code.visualstudio.com/api/working-with-extensions/continuous-integration

     * [56]Advanced Topics
          + [57]Extension Host
           https://code.visualstudio.com/api/advanced-topics/extension-host

          + [58]Remote Development and Codespaces
           https://code.visualstudio.com/api/advanced-topics/remote-extensions

          + [59]Using Proposed API
           https://code.visualstudio.com/api/advanced-topics/using-proposed-api

          + [60]Migrate from TSLint to ESLint
           https://code.visualstudio.com/api/advanced-topics/tslint-eslint-migration

     * [61]References
          + [62]VS Code API
           https://code.visualstudio.com/api/references/vscode-api

          + [63]Contribution Points
           https://code.visualstudio.com/api/references/contribution-points

          + [64]Activation Events
           https://code.visualstudio.com/api/references/activation-events

          + [65]Extension Manifest
           https://code.visualstudio.com/api/references/extension-manifest

          + [66]Built-in Commands
           https://code.visualstudio.com/api/references/commands

          + [67]Theme Color
           https://code.visualstudio.com/api/references/theme-color

          + [68]Product Icon Reference
           https://code.visualstudio.com/api/references/icons-in-labels

          + [69]Document Selector

     [69] https://code.visualstudio.com/api/references/document-selector

Topics

   [VS Code API______________________]
   [70](BUTTON)  Edit

     [70] https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts

VS Code API

   VS Code API is a set of JavaScript APIs that you can invoke in
   your Visual Studio Code extension. This page lists all VS Code
   APIs available to extension authors.

API namespaces and classes

   This listing is compiled from the [71]vscode.d.ts file from the
   VS Code repository.

     [71] https://github.com/microsoft/vscode/blob/master/src/vs/vscode.d.ts

authentication

   Namespace for authentication.

Events

   onDidChangeSessions:
   [72]Event<[73]AuthenticationSessionsChangeEvent>

   An [74]event which fires when the authentication sessions of an
   authentication provider have been added, removed, or changed.

Functions

   getSession(providerId: string, scopes: string[], options:
   [75]AuthenticationGetSessionOptions & {createIfNone: true}):
   [76]Thenable<[77]AuthenticationSession>

   Get an authentication session matching the desired scopes.
   Rejects if a provider with providerId is not registered, or if
   the user does not consent to sharing authentication information
   with the extension. If there are multiple sessions with the
   same scopes, the user will be shown a quickpick to select which
   account they would like to use.

   Currently, there are only two authentication providers that are
   contributed from built in extensions to VS Code that implement
   GitHub and Microsoft authentication: their providerId's are
   'github' and 'microsoft'.
   Parameter Description
   providerId: string

   The id of the provider to use
   scopes: string[]

   A list of scopes representing the permissions requested. These
   are dependent on the authentication provider
   options: [78]AuthenticationGetSessionOptions & {createIfNone:
   true}

   The [79]getSessionOptions to use
   Returns Description
   [80]Thenable<[81]AuthenticationSession>

   A thenable that resolves to an authentication session

   getSession(providerId: string, scopes: string[], options?:
   [82]AuthenticationGetSessionOptions):
   [83]Thenable<[84]AuthenticationSession | undefined>

   Get an authentication session matching the desired scopes.
   Rejects if a provider with providerId is not registered, or if
   the user does not consent to sharing authentication information
   with the extension. If there are multiple sessions with the
   same scopes, the user will be shown a quickpick to select which
   account they would like to use.

   Currently, there are only two authentication providers that are
   contributed from built in extensions to VS Code that implement
   GitHub and Microsoft authentication: their providerId's are
   'github' and 'microsoft'.
   Parameter Description
   providerId: string

   The id of the provider to use
   scopes: string[]

   A list of scopes representing the permissions requested. These
   are dependent on the authentication provider
   options?: [85]AuthenticationGetSessionOptions

   The [86]getSessionOptions to use
   Returns Description
   [87]Thenable<[88]AuthenticationSession | undefined>

   A thenable that resolves to an authentication session if
   available, or undefined if there are no sessions

commands

   Namespace for dealing with commands. In short, a command is a
   function with a unique identifier. The function is sometimes
   also called command handler.

   Commands can be added to the editor using the
   [89]registerCommand and [90]registerTextEditorCommand
   functions. Commands can be executed [91]manually or from a UI
   gesture. Those are:
     * palette - Use the commands-section in package.json to make
       a command show in the [92]command palette.
      https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette

     * keybinding - Use the keybindings-section in package.json to
       enable [93]keybindings for your extension.

     [93] https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts

   Commands from other extensions and from the editor itself are
   accessible to an extension. However, when invoking an editor
   command not all argument types are supported.

   This is a sample that registers a command handler and adds an
   entry for that command to the palette. First register a command
   handler with the identifier extension.sayHello.
commands.registerCommand('extension.sayHello', () => {
    window.showInformationMessage('Hello World!');
});

   Second, bind the command identifier to a title under which it
   will show in the palette (package.json).
{
    "contributes": {
        "commands": [{
            "command": "extension.sayHello",
            "title": "Hello World"
        }]
    }
}

Functions

   executeCommand<T>(command: string, ...rest: any[]):
   [94]Thenable<T | undefined>

   Executes the command denoted by the given command identifier.
     * Note 1: When executing an editor command not all types are
       allowed to be passed as arguments. Allowed are the
       primitive types string, boolean, number, undefined, and
       null, as well as [95]Position, [96]Range, [97]Uri and
       [98]Location.
     * Note 2: There are no restrictions when executing commands
       that have been contributed by extensions.

   Parameter Description
   command: string

   Identifier of the command to execute.
   ...rest: any[]

   Parameters passed to the command function.
   Returns Description
   [99]Thenable<T | undefined>

   A thenable that resolves to the returned value of the given
   command. undefined when the command handler function doesn't
   return anything.

   getCommands(filterInternal?: boolean): [100]Thenable<string[]>

   Retrieve the list of all available commands. Commands starting
   with an underscore are treated as internal commands.
   Parameter Description
   filterInternal?: boolean

   Set true to not see internal commands (starting with an
   underscore)
   Returns Description
   [101]Thenable<string[]>

   Thenable that resolves to a list of command ids.

   registerCommand(command: string, callback: (args: any[]) =>
   any, thisArg?: any): [102]Disposable

   Registers a command that can be invoked via a keyboard
   shortcut, a menu item, an action, or directly.

   Registering a command with an existing command identifier twice
   will cause an error.
   Parameter Description
   command: string

   A unique identifier for the command.
   callback: (args: any[]) => any

   A command handler function.
   thisArg?: any

   The this context used when invoking the handler function.
   Returns Description
   [103]Disposable

   Disposable which unregisters this command on disposal.

   registerTextEditorCommand(command: string, callback:
   (textEditor: [104]TextEditor, edit: [105]TextEditorEdit, args:
   any[]) => void, thisArg?: any): [106]Disposable

   Registers a text editor command that can be invoked via a
   keyboard shortcut, a menu item, an action, or directly.

   Text editor commands are different from ordinary [107]commands
   as they only execute when there is an active editor when the
   command is called. Also, the command handler of an editor
   command has access to the active editor and to an
   [108]edit-builder. Note that the edit-builder is only valid
   while the callback executes.
   Parameter Description
   command: string

   A unique identifier for the command.
   callback: (textEditor: [109]TextEditor, edit:
   [110]TextEditorEdit, args: any[]) => void

   A command handler function with access to an [111]editor and an
   [112]edit.
   thisArg?: any

   The this context used when invoking the handler function.
   Returns Description
   [113]Disposable

   Disposable which unregisters this command on disposal.

comments

Functions

   createCommentController(id: string, label: string):
   [114]CommentController

   Creates a new [115]comment controller instance.
   Parameter Description
   id: string

   An id for the comment controller.
   label: string

   A human-readable string for the comment controller.
   Returns Description
   [116]CommentController

   An instance of [117]comment controller.

debug

   Namespace for debug functionality.

Variables

   activeDebugConsole: [118]DebugConsole

   The currently active [119]debug console. If no debug session is
   active, output sent to the debug console is not shown.

   activeDebugSession: [120]DebugSession | undefined

   The currently active [121]debug session or undefined. The
   active debug session is the one represented by the debug action
   floating window or the one currently shown in the drop down
   menu of the debug action floating window. If no debug session
   is active, the value is undefined.

   breakpoints: [122]Breakpoint[]

   List of breakpoints.

Events

   onDidChangeActiveDebugSession: [123]Event<[124]DebugSession |
   undefined>

   An [125]event which fires when the [126]active debug session
   has changed. Note that the event also fires when the active
   debug session changes to undefined.

   onDidChangeBreakpoints: [127]Event<[128]BreakpointsChangeEvent>

   An [129]event that is emitted when the set of breakpoints is
   added, removed, or changed.

   onDidReceiveDebugSessionCustomEvent:
   [130]Event<[131]DebugSessionCustomEvent>

   An [132]event which fires when a custom DAP event is received
   from the [133]debug session.

   onDidStartDebugSession: [134]Event<[135]DebugSession>

   An [136]event which fires when a new [137]debug session has
   been started.

   onDidTerminateDebugSession: [138]Event<[139]DebugSession>

   An [140]event which fires when a [141]debug session has
   terminated.

Functions

   addBreakpoints(breakpoints: [142]Breakpoint[]): void

   Add breakpoints.
             Parameter                  Description
   breakpoints: [143]Breakpoint[]

                                  The breakpoints to add.
              Returns                   Description
   void

   asDebugSourceUri(source: [144]DebugProtocolSource, session?:
   [145]DebugSession): [146]Uri

   Converts a "Source" descriptor object received via the Debug
   Adapter Protocol into a Uri that can be used to load its
   contents. If the source descriptor is based on a path, a file
   Uri is returned. If the source descriptor uses a reference
   number, a specific debug Uri (scheme 'debug') is constructed
   that requires a corresponding VS Code ContentProvider and a
   running debug session

   If the "Source" descriptor has insufficient information for
   creating the Uri, an error is thrown.
   Parameter Description
   source: [147]DebugProtocolSource

   An object conforming to the [148]Source type defined in the
   Debug Adapter Protocol.
   session?: [149]DebugSession

    [148] https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source

   An optional debug session that will be used when the source
   descriptor uses a reference number to load the contents from an
   active debug session.
   Returns Description
   [150]Uri

   A uri that can be used to load the contents of the source.

   registerDebugAdapterDescriptorFactory(debugType: string,
   factory: [151]DebugAdapterDescriptorFactory): [152]Disposable

   Register a [153]debug adapter descriptor factory for a specific
   debug type. An extension is only allowed to register a
   DebugAdapterDescriptorFactory for the debug type(s) defined by
   the extension. Otherwise an error is thrown. Registering more
   than one DebugAdapterDescriptorFactory for a debug type results
   in an error.
   Parameter Description
   debugType: string

   The debug type for which the factory is registered.
   factory: [154]DebugAdapterDescriptorFactory

   The [155]debug adapter descriptor factory to register.
   Returns Description
   [156]Disposable

   A [157]disposable that unregisters this factory when being
   disposed.

   registerDebugAdapterTrackerFactory(debugType: string, factory:
   [158]DebugAdapterTrackerFactory): [159]Disposable

   Register a debug adapter tracker factory for the given debug
   type.
   Parameter Description
   debugType: string

   The debug type for which the factory is registered or '*' for
   matching all debug types.
   factory: [160]DebugAdapterTrackerFactory

   The [161]debug adapter tracker factory to register.
   Returns Description
   [162]Disposable

   A [163]disposable that unregisters this factory when being
   disposed.

   registerDebugConfigurationProvider(debugType: string, provider:
   [164]DebugConfigurationProvider, triggerKind?:
   [165]DebugConfigurationProviderTriggerKind): [166]Disposable

   Register a [167]debug configuration provider for a specific
   debug type. The optional [168]triggerKind can be used to
   specify when the provideDebugConfigurations method of the
   provider is triggered. Currently two trigger kinds are
   possible: with the value Initial (or if no trigger kind
   argument is given) the provideDebugConfigurations method is
   used to provide the initial debug configurations to be copied
   into a newly created launch.json. With the trigger kind Dynamic
   the provideDebugConfigurations method is used to dynamically
   determine debug configurations to be presented to the user (in
   addition to the static configurations from the launch.json).
   Please note that the triggerKind argument only applies to the
   provideDebugConfigurations method: so the
   resolveDebugConfiguration methods are not affected at all.
   Registering a single provider with resolve methods for
   different trigger kinds, results in the same resolve methods
   called multiple times. More than one provider can be registered
   for the same type.
   Parameter Description
   debugType: string
   provider: [169]DebugConfigurationProvider

   The [170]debug configuration provider to register.
   triggerKind?: [171]DebugConfigurationProviderTriggerKind

   The [172]trigger for which the 'provideDebugConfiguration'
   method of the provider is registered. If triggerKind is
   missing, the value
   DebugConfigurationProviderTriggerKind.Initial is assumed.
   Returns Description
   [173]Disposable

   A [174]disposable that unregisters this provider when being
   disposed.

   removeBreakpoints(breakpoints: [175]Breakpoint[]): void

   Remove breakpoints.
             Parameter                   Description
   breakpoints: [176]Breakpoint[]

                                  The breakpoints to remove.
              Returns                    Description
   void

   startDebugging(folder: [177]WorkspaceFolder | undefined,
   nameOrConfiguration: string | [178]DebugConfiguration,
   parentSessionOrOptions?: [179]DebugSession |
   [180]DebugSessionOptions): [181]Thenable<boolean>

   Start debugging by using either a named launch or named
   compound configuration, or by directly passing a
   [182]DebugConfiguration. The named configurations are looked up
   in '.vscode/launch.json' found in the given folder. Before
   debugging starts, all unsaved files are saved and the launch
   configurations are brought up-to-date. Folder specific
   variables used in the configuration (e.g. '${workspaceFolder}')
   are resolved against the given folder.
   Parameter Description
   folder: [183]WorkspaceFolder | undefined

   The [184]workspace folder for looking up named configurations
   and resolving variables or undefined for a non-folder setup.
   nameOrConfiguration: string | [185]DebugConfiguration

   Either the name of a debug or compound configuration or a
   [186]DebugConfiguration object.
   parentSessionOrOptions?: [187]DebugSession |
   [188]DebugSessionOptions

   Debug session options. When passed a parent [189]debug session,
   assumes options with just this parent session.
   Returns Description
   [190]Thenable<boolean>

   A thenable that resolves when debugging could be successfully
   started.

   stopDebugging(session?: [191]DebugSession): [192]Thenable<void>

   Stop the given debug session or stop all debug sessions if
   session is omitted.
   Parameter Description
   session?: [193]DebugSession

   The [194]debug session to stop; if omitted all sessions are
   stopped.
   Returns Description
   [195]Thenable<void>

env

   Namespace describing the environment the editor runs in.

Variables

   appName: string

   The application name of the editor, like 'VS Code'.

   appRoot: string

   The application root folder from which the editor is running.

   Note that the value is the empty string when running in an
   environment that has no representation of an application root
   folder.

   clipboard: [196]Clipboard

   The system clipboard.

   language: string

   Represents the preferred user-language, like de-CH, fr, or
   en-US.

   machineId: string

   A unique identifier for the computer.

   remoteName: string | undefined

   The name of a remote. Defined by extensions, popular samples
   are wsl for the Windows Subsystem for Linux or ssh-remote for
   remotes using a secure shell.

   Note that the value is undefined when there is no remote
   extension host but that the value is defined in all extension
   hosts (local and remote) in case a remote extension host
   exists. Use [197]Extension#extensionKind to know if a specific
   extension runs remote or not.

   sessionId: string

   A unique identifier for the current session. Changes each time
   the editor is started.

   shell: string

   The detected default shell for the extension host, this is
   overridden by the terminal.integrated.shell setting for the
   extension host's platform. Note that in environments that do
   not support a shell the value is the empty string.

   uiKind: [198]UIKind

   The UI kind property indicates from which UI extensions are
   accessed from. For example, extensions could be accessed from a
   desktop application or a web browser.

   uriScheme: string

   The custom uri scheme the editor registers to in the operating
   system.

Functions

   asExternalUri(target: [199]Uri): [200]Thenable<[201]Uri>

   Resolves a uri to form that is accessible externally. Currently
   only supports https:, http: and vscode.env.uriScheme uris.

http: or https: scheme

   Resolves an external uri, such as a http: or https: link, from
   where the extension is running to a uri to the same resource on
   the client machine.

   This is a no-op if the extension is running on the client
   machine.

   If the extension is running remotely, this function
   automatically establishes a port forwarding tunnel from the
   local machine to target on the remote and returns a local uri
   to the tunnel. The lifetime of the port forwarding tunnel is
   managed by VS Code and the tunnel can be closed by the user.

   Note that uris passed through openExternal are automatically
   resolved and you should not call asExternalUri on them.

vscode.env.uriScheme

   Creates a uri that - if opened in a browser (e.g. via
   openExternal) - will result in a registered [202]UriHandler to
   trigger.

   Extensions should not make any assumptions about the resulting
   uri and should not alter it in anyway. Rather, extensions can
   e.g. use this uri in an authentication flow, by adding the uri
   as callback query argument to the server to authenticate to.

   Note that if the server decides to add additional query
   parameters to the uri (e.g. a token or secret), it will appear
   in the uri that is passed to the [203]UriHandler.

   Example of an authentication flow:
vscode.window.registerUriHandler({
  handleUri(uri: vscode.Uri): vscode.ProviderResult<void> {
    if (uri.path === '/did-authenticate') {
      console.log(uri.toString());
    }
  }
});

const callableUri = await vscode.env.asExternalUri(vscode.Uri.parse(`${v
scode.env.uriScheme}://my.extension/did-authenticate`));
await vscode.env.openExternal(callableUri);

   Note that extensions should not cache the result of
   asExternalUri as the resolved uri may become invalid due to a
   system or user action — for example, in remote cases, a user
   may close a port forwarding tunnel that was opened by
   asExternalUri.
          Parameter                         Description
   target: [204]Uri
           Returns                          Description
   [205]Thenable<[206]Uri>

                           A uri that can be used on the client machine.

   openExternal(target: [207]Uri): [208]Thenable<boolean>

   Opens a link externally using the default application.
   Depending on the used scheme this can be:
     * a browser (http:, https:)
     * a mail client (mailto:)
     * VSCode itself (vscode: from vscode.env.uriScheme)

   Note that [209]showTextDocument is the right way to open a text
   document inside the editor, not this function.
         Parameter                        Description
   target: [210]Uri

                          The uri that should be opened.
          Returns                         Description
   [211]Thenable<boolean>

                          A promise indicating if open was successful.

extensions

   Namespace for dealing with installed extensions. Extensions are
   represented by an [212]extension-interface which enables
   reflection on them.

   Extension writers can provide APIs to other extensions by
   returning their API public surface from the activate-call.
export function activate(context: vscode.ExtensionContext) {
    let api = {
        sum(a, b) {
            return a + b;
        },
        mul(a, b) {
            return a * b;
        }
    };
    // 'export' public api-surface
    return api;
}

   When depending on the API of another extension add an
   extensionDependencies-entry to package.json, and use the
   [213]getExtension-function and the [214]exports-property, like
   below:
let mathExt = extensions.getExtension('genius.math');
let importedApi = mathExt.exports;

console.log(importedApi.mul(42, 1));

Variables

   all: [215]ReadonlyArray<[216]Extension<any>>

   All extensions currently known to the system.

Events

   onDidChange: [217]Event<void>

   An event which fires when extensions.all changes. This can
   happen when extensions are installed, uninstalled, enabled or
   disabled.

Functions

   getExtension(extensionId: string): [218]Extension<any> |
   undefined

   Get an extension by its full identifier in the form of:
   publisher.name.
              Parameter                   Description
   extensionId: string

                                   An extension identifier.
               Returns                    Description
   [219]Extension<any> | undefined

                                   An extension or undefined.

   getExtension<T>(extensionId: string): [220]Extension<T> |
   undefined

   Get an extension by its full identifier in the form of:
   publisher.name.
             Parameter                  Description
   extensionId: string

                                 An extension identifier.
              Returns                   Description
   [221]Extension<T> | undefined

                                 An extension or undefined.

languages

   Namespace for participating in language-specific editor
   [222]features, like IntelliSense, code actions, diagnostics
   etc.

    [222] https://code.visualstudio.com/docs/editor/editingevolved

   Many programming languages exist and there is huge variety in
   syntaxes, semantics, and paradigms. Despite that, features like
   automatic word-completion, code navigation, or code checking
   have become popular across different tools for different
   programming languages.

   The editor provides an API that makes it simple to provide such
   common features by having all UI and actions already in place
   and by allowing you to participate by providing data only. For
   instance, to contribute a hover all you have to do is provide a
   function that can be called with a [223]TextDocument and a
   [224]Position returning hover info. The rest, like tracking the
   mouse, positioning the hover, keeping the hover stable etc. is
   taken care of by the editor.
languages.registerHoverProvider('javascript', {
    provideHover(document, position, token) {
        return new Hover('I am a hover!');
    }
});

   Registration is done using a [225]document selector which is
   either a language id, like javascript or a more complex
   [226]filter like { language: 'typescript', scheme: 'file' }.
   Matching a document against such a selector will result in a
   [227]score that is used to determine if and how a provider
   shall be used. When scores are equal the provider that came
   last wins. For features that allow full arity, like [228]hover,
   the score is only checked to be >0, for other features, like
   [229]IntelliSense the score is used for determining the order
   in which providers are asked to participate.

Events

   onDidChangeDiagnostics: [230]Event<[231]DiagnosticChangeEvent>

   An [232]event which fires when the global set of diagnostics
   changes. This is newly added and removed diagnostics.

Functions

   createDiagnosticCollection(name?: string):
   [233]DiagnosticCollection

   Create a diagnostics collection.
           Parameter                   Description
   name?: string

                             The [234]name of the collection.
            Returns                    Description
   [235]DiagnosticCollection

                             A new diagnostic collection.

   getDiagnostics(resource: [236]Uri): [237]Diagnostic[]

   Get all diagnostics for a given resource.
   Parameter Description
   resource: [238]Uri

   A resource
   Returns Description
   [239]Diagnostic[]

   An array of [240]diagnostics objects or an empty array.

   getDiagnostics(): [[241]Uri, [242]Diagnostic[]][]

   Get all diagnostics.
   Returns Description
   [[243]Uri, [244]Diagnostic[]][]

   An array of uri-diagnostics tuples or an empty array.

   getLanguages(): [245]Thenable<string[]>

   Return the identifiers of all known languages.
   Returns Description
   [246]Thenable<string[]>

   Promise resolving to an array of identifier strings.

   match(selector: [247]DocumentSelector, document:
   [248]TextDocument): number

   Compute the match between a document [249]selector and a
   document. Values greater than zero mean the selector matches
   the document.

   A match is computed according to these rules:
    1. When [250]DocumentSelector is an array, compute the match
       for each contained DocumentFilter or language identifier
       and take the maximum value.
    2. A string will be desugared to become the language-part of a
       [251]DocumentFilter, so "fooLang" is like { language:
       "fooLang" }.
    3. A [252]DocumentFilter will be matched against the document
       by comparing its parts with the document. The following
       rules apply:
         1. When the DocumentFilter is empty ({}) the result is 0
         2. When scheme, language, or pattern are defined but one
            doesn’t match, the result is 0
         3. Matching against * gives a score of 5, matching via
            equality or via a glob-pattern gives a score of 10
         4. The result is the maximum value of each match

   Samples:
// default document from disk (file-scheme)
doc.uri; //'file:///my/file.js'
doc.languageId; // 'javascript'
match('javascript', doc); // 10;
match({language: 'javascript'}, doc); // 10;
match({language: 'javascript', scheme: 'file'}, doc); // 10;
match('*', doc); // 5
match('fooLang', doc); // 0
match(['fooLang', '*'], doc); // 5

// virtual document, e.g. from git-index
doc.uri; // 'git:/my/file.js'
doc.languageId; // 'javascript'
match('javascript', doc); // 10;
match({language: 'javascript', scheme: 'git'}, doc); // 10;
match('*', doc); // 5

   Parameter Description
   selector: [253]DocumentSelector

   A document selector.
   document: [254]TextDocument

   A text document.
   Returns Description
   number

   A number >0 when the selector matches and 0 when the selector
   does not match.

   registerCallHierarchyProvider(selector: [255]DocumentSelector,
   provider: [256]CallHierarchyProvider): [257]Disposable

   Register a call hierarchy provider.
   Parameter Description
   selector: [258]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [259]CallHierarchyProvider

   A call hierarchy provider.
   Returns Description
   [260]Disposable

   A [261]disposable that unregisters this provider when being
   disposed.

   registerCodeActionsProvider(selector: [262]DocumentSelector,
   provider: [263]CodeActionProvider, metadata?:
   [264]CodeActionProviderMetadata): [265]Disposable

   Register a code action provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [266]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [267]CodeActionProvider

   A code action provider.
   metadata?: [268]CodeActionProviderMetadata

   Metadata about the kind of code actions the provider provides.
   Returns Description
   [269]Disposable

   A [270]disposable that unregisters this provider when being
   disposed.

   registerCodeLensProvider(selector: [271]DocumentSelector,
   provider: [272]CodeLensProvider): [273]Disposable

   Register a code lens provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [274]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [275]CodeLensProvider

   A code lens provider.
   Returns Description
   [276]Disposable

   A [277]disposable that unregisters this provider when being
   disposed.

   registerColorProvider(selector: [278]DocumentSelector,
   provider: [279]DocumentColorProvider): [280]Disposable

   Register a color provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [281]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [282]DocumentColorProvider

   A color provider.
   Returns Description
   [283]Disposable

   A [284]disposable that unregisters this provider when being
   disposed.

   registerCompletionItemProvider(selector: [285]DocumentSelector,
   provider: [286]CompletionItemProvider, ...triggerCharacters:
   string[]): [287]Disposable

   Register a completion provider.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [288]score and groups of
   equal score are sequentially asked for completion items. The
   process stops when one or many providers of a group return a
   result. A failing provider (rejected promise or exception) will
   not fail the whole operation.

   A completion item provider can be associated with a set of
   triggerCharacters. When trigger characters are being typed,
   completions are requested but only from providers that
   registered the typed character. Because of that trigger
   characters should be different than [289]word characters, a
   common trigger character is . to trigger member completions.
   Parameter Description
   selector: [290]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [291]CompletionItemProvider

   A completion provider.
   ...triggerCharacters: string[]

   Trigger completion when the user types one of the characters.
   Returns Description
   [292]Disposable

   A [293]disposable that unregisters this provider when being
   disposed.

   registerDeclarationProvider(selector: [294]DocumentSelector,
   provider: [295]DeclarationProvider): [296]Disposable

   Register a declaration provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [297]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [298]DeclarationProvider

   A declaration provider.
   Returns Description
   [299]Disposable

   A [300]disposable that unregisters this provider when being
   disposed.

   registerDefinitionProvider(selector: [301]DocumentSelector,
   provider: [302]DefinitionProvider): [303]Disposable

   Register a definition provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [304]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [305]DefinitionProvider

   A definition provider.
   Returns Description
   [306]Disposable

   A [307]disposable that unregisters this provider when being
   disposed.

   registerDocumentFormattingEditProvider(selector:
   [308]DocumentSelector, provider:
   [309]DocumentFormattingEditProvider): [310]Disposable

   Register a formatting provider for a document.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [311]score and the
   best-matching provider is used. Failure of the selected
   provider will cause a failure of the whole operation.
   Parameter Description
   selector: [312]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [313]DocumentFormattingEditProvider

   A document formatting edit provider.
   Returns Description
   [314]Disposable

   A [315]disposable that unregisters this provider when being
   disposed.

   registerDocumentHighlightProvider(selector:
   [316]DocumentSelector, provider:
   [317]DocumentHighlightProvider): [318]Disposable

   Register a document highlight provider.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [319]score and groups
   sequentially asked for document highlights. The process stops
   when a provider returns a non-falsy or non-failure result.
   Parameter Description
   selector: [320]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [321]DocumentHighlightProvider

   A document highlight provider.
   Returns Description
   [322]Disposable

   A [323]disposable that unregisters this provider when being
   disposed.

   registerDocumentLinkProvider(selector: [324]DocumentSelector,
   provider: [325]DocumentLinkProvider): [326]Disposable

   Register a document link provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [327]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [328]DocumentLinkProvider

   A document link provider.
   Returns Description
   [329]Disposable

   A [330]disposable that unregisters this provider when being
   disposed.

   registerDocumentRangeFormattingEditProvider(selector:
   [331]DocumentSelector, provider:
   [332]DocumentRangeFormattingEditProvider): [333]Disposable

   Register a formatting provider for a document range.

   Note: A document range provider is also a [334]document
   formatter which means there is no need to [335]register a
   document formatter when also registering a range provider.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [336]score and the
   best-matching provider is used. Failure of the selected
   provider will cause a failure of the whole operation.
   Parameter Description
   selector: [337]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [338]DocumentRangeFormattingEditProvider

   A document range formatting edit provider.
   Returns Description
   [339]Disposable

   A [340]disposable that unregisters this provider when being
   disposed.

   registerDocumentRangeSemanticTokensProvider(selector:
   [341]DocumentSelector, provider:
   [342]DocumentRangeSemanticTokensProvider, legend:
   [343]SemanticTokensLegend): [344]Disposable

   Register a semantic tokens provider for a document range.

   Note: If a document has both a DocumentSemanticTokensProvider
   and a DocumentRangeSemanticTokensProvider, the range provider
   will be invoked only initially, for the time in which the full
   document provider takes to resolve the first request. Once the
   full document provider resolves the first request, the semantic
   tokens provided via the range provider will be discarded and
   from that point forward, only the document provider will be
   used.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [345]score and the
   best-matching provider is used. Failure of the selected
   provider will cause a failure of the whole operation.
   Parameter Description
   selector: [346]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [347]DocumentRangeSemanticTokensProvider

   A document range semantic tokens provider.
   legend: [348]SemanticTokensLegend
   Returns Description
   [349]Disposable

   A [350]disposable that unregisters this provider when being
   disposed.

   registerDocumentSemanticTokensProvider(selector:
   [351]DocumentSelector, provider:
   [352]DocumentSemanticTokensProvider, legend:
   [353]SemanticTokensLegend): [354]Disposable

   Register a semantic tokens provider for a whole document.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [355]score and the
   best-matching provider is used. Failure of the selected
   provider will cause a failure of the whole operation.
   Parameter Description
   selector: [356]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [357]DocumentSemanticTokensProvider

   A document semantic tokens provider.
   legend: [358]SemanticTokensLegend
   Returns Description
   [359]Disposable

   A [360]disposable that unregisters this provider when being
   disposed.

   registerDocumentSymbolProvider(selector: [361]DocumentSelector,
   provider: [362]DocumentSymbolProvider, metaData?:
   [363]DocumentSymbolProviderMetadata): [364]Disposable

   Register a document symbol provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [365]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [366]DocumentSymbolProvider

   A document symbol provider.
   metaData?: [367]DocumentSymbolProviderMetadata

   metadata about the provider
   Returns Description
   [368]Disposable

   A [369]disposable that unregisters this provider when being
   disposed.

   registerEvaluatableExpressionProvider(selector:
   [370]DocumentSelector, provider:
   [371]EvaluatableExpressionProvider): [372]Disposable

   Register a provider that locates evaluatable expressions in
   text documents. VS Code will evaluate the expression in the
   active debug session and will show the result in the debug
   hover.

   If multiple providers are registered for a language an
   arbitrary provider will be used.
   Parameter Description
   selector: [373]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [374]EvaluatableExpressionProvider

   An evaluatable expression provider.
   Returns Description
   [375]Disposable

   A [376]disposable that unregisters this provider when being
   disposed.

   registerFoldingRangeProvider(selector: [377]DocumentSelector,
   provider: [378]FoldingRangeProvider): [379]Disposable

   Register a folding range provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. If multiple folding ranges start at the same position,
   only the range of the first registered provider is used. If a
   folding range overlaps with an other range that has a smaller
   position, it is also ignored.

   A failing provider (rejected promise or exception) will not
   cause a failure of the whole operation.
   Parameter Description
   selector: [380]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [381]FoldingRangeProvider

   A folding range provider.
   Returns Description
   [382]Disposable

   A [383]disposable that unregisters this provider when being
   disposed.

   registerHoverProvider(selector: [384]DocumentSelector,
   provider: [385]HoverProvider): [386]Disposable

   Register a hover provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [387]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [388]HoverProvider

   A hover provider.
   Returns Description
   [389]Disposable

   A [390]disposable that unregisters this provider when being
   disposed.

   registerImplementationProvider(selector: [391]DocumentSelector,
   provider: [392]ImplementationProvider): [393]Disposable

   Register an implementation provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [394]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [395]ImplementationProvider

   An implementation provider.
   Returns Description
   [396]Disposable

   A [397]disposable that unregisters this provider when being
   disposed.

   registerOnTypeFormattingEditProvider(selector:
   [398]DocumentSelector, provider:
   [399]OnTypeFormattingEditProvider, firstTriggerCharacter:
   string, ...moreTriggerCharacter: string[]): [400]Disposable

   Register a formatting provider that works on type. The provider
   is active when the user enables the setting
   editor.formatOnType.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [401]score and the
   best-matching provider is used. Failure of the selected
   provider will cause a failure of the whole operation.
   Parameter Description
   selector: [402]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [403]OnTypeFormattingEditProvider

   An on type formatting edit provider.
   firstTriggerCharacter: string

   A character on which formatting should be triggered, like }.
   ...moreTriggerCharacter: string[]

   More trigger characters.
   Returns Description
   [404]Disposable

   A [405]disposable that unregisters this provider when being
   disposed.

   registerReferenceProvider(selector: [406]DocumentSelector,
   provider: [407]ReferenceProvider): [408]Disposable

   Register a reference provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [409]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [410]ReferenceProvider

   A reference provider.
   Returns Description
   [411]Disposable

   A [412]disposable that unregisters this provider when being
   disposed.

   registerRenameProvider(selector: [413]DocumentSelector,
   provider: [414]RenameProvider): [415]Disposable

   Register a rename provider.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [416]score and asked in
   sequence. The first provider producing a result defines the
   result of the whole operation.
   Parameter Description
   selector: [417]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [418]RenameProvider

   A rename provider.
   Returns Description
   [419]Disposable

   A [420]disposable that unregisters this provider when being
   disposed.

   registerSelectionRangeProvider(selector: [421]DocumentSelector,
   provider: [422]SelectionRangeProvider): [423]Disposable

   Register a selection range provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [424]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [425]SelectionRangeProvider

   A selection range provider.
   Returns Description
   [426]Disposable

   A [427]disposable that unregisters this provider when being
   disposed.

   registerSignatureHelpProvider(selector: [428]DocumentSelector,
   provider: [429]SignatureHelpProvider, ...triggerCharacters:
   string[]): [430]Disposable

   Register a signature help provider.

   Multiple providers can be registered for a language. In that
   case providers are sorted by their [431]score and called
   sequentially until a provider returns a valid result.
   Parameter Description
   selector: [432]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [433]SignatureHelpProvider

   A signature help provider.
   ...triggerCharacters: string[]

   Trigger signature help when the user types one of the
   characters, like , or (.
   Returns Description
   [434]Disposable

   A [435]disposable that unregisters this provider when being
   disposed.

   registerSignatureHelpProvider(selector: [436]DocumentSelector,
   provider: [437]SignatureHelpProvider, metadata:
   [438]SignatureHelpProviderMetadata): [439]Disposable
                    Parameter                   Description
   selector: [440]DocumentSelector
   provider: [441]SignatureHelpProvider
   metadata: [442]SignatureHelpProviderMetadata
                     Returns                    Description
   [443]Disposable

   registerTypeDefinitionProvider(selector: [444]DocumentSelector,
   provider: [445]TypeDefinitionProvider): [446]Disposable

   Register a type definition provider.

   Multiple providers can be registered for a language. In that
   case providers are asked in parallel and the results are
   merged. A failing provider (rejected promise or exception) will
   not cause a failure of the whole operation.
   Parameter Description
   selector: [447]DocumentSelector

   A selector that defines the documents this provider is
   applicable to.
   provider: [448]TypeDefinitionProvider

   A type definition provider.
   Returns Description
   [449]Disposable

   A [450]disposable that unregisters this provider when being
   disposed.

   registerWorkspaceSymbolProvider(provider:
   [451]WorkspaceSymbolProvider): [452]Disposable

   Register a workspace symbol provider.

   Multiple providers can be registered. In that case providers
   are asked in parallel and the results are merged. A failing
   provider (rejected promise or exception) will not cause a
   failure of the whole operation.
   Parameter Description
   provider: [453]WorkspaceSymbolProvider

   A workspace symbol provider.
   Returns Description
   [454]Disposable

   A [455]disposable that unregisters this provider when being
   disposed.

   setLanguageConfiguration(language: string, configuration:
   [456]LanguageConfiguration): [457]Disposable

   Set a [458]language configuration for a language.
   Parameter Description
   language: string

   A language identifier like typescript.
   configuration: [459]LanguageConfiguration

   Language configuration.
   Returns Description
   [460]Disposable

   A [461]disposable that unsets this configuration.

   setTextDocumentLanguage(document: [462]TextDocument,
   languageId: string): [463]Thenable<[464]TextDocument>

   Set (and change) the [465]language that is associated with the
   given document.

   Note that calling this function will trigger the
   [466]onDidCloseTextDocument event followed by the
   [467]onDidOpenTextDocument event.
   Parameter Description
   document: [468]TextDocument

   The document which language is to be changed
   languageId: string

   The new language identifier.
   Returns Description
   [469]Thenable<[470]TextDocument>

   A thenable that resolves with the updated document.

scm

Variables

   inputBox: [471]SourceControlInputBox

   The [472]input box for the last source control created by the
   extension.
     * deprecated - Use SourceControl.inputBox instead

Functions

   createSourceControl(id: string, label: string, rootUri?:
   [473]Uri): [474]SourceControl

   Creates a new [475]source control instance.
   Parameter Description
   id: string

   An id for the source control. Something short, e.g.: git.
   label: string

   A human-readable string for the source control. E.g.: Git.
   rootUri?: [476]Uri

   An optional Uri of the root of the source control. E.g.:
   Uri.parse(workspaceRoot).
   Returns Description
   [477]SourceControl

   An instance of [478]source control.

tasks

   Namespace for tasks functionality.

Variables

   taskExecutions: [479]ReadonlyArray<[480]TaskExecution>

   The currently active task executions or an empty array.

Events

   onDidEndTask: [481]Event<[482]TaskEndEvent>

   Fires when a task ends.

   onDidEndTaskProcess: [483]Event<[484]TaskProcessEndEvent>

   Fires when the underlying process has ended. This event will
   not fire for tasks that don't execute an underlying process.

   onDidStartTask: [485]Event<[486]TaskStartEvent>

   Fires when a task starts.

   onDidStartTaskProcess: [487]Event<[488]TaskProcessStartEvent>

   Fires when the underlying process has been started. This event
   will not fire for tasks that don't execute an underlying
   process.

Functions

   executeTask(task: [489]Task): [490]Thenable<[491]TaskExecution>

   Executes a task that is managed by VS Code. The returned task
   execution can be used to terminate the task.
     * throws - When running a ShellExecution or a
       ProcessExecution task in an environment where a new process
       cannot be started. In such an environment, only
       CustomExecution tasks can be run.

               Parameter                 Description
   task: [492]Task

                                     the task to execute
                Returns                  Description
   [493]Thenable<[494]TaskExecution>

   fetchTasks(filter?: [495]TaskFilter):
   [496]Thenable<[497]Task[]>

   Fetches all tasks available in the systems. This includes tasks
   from tasks.json files as well as tasks from task providers
   contributed through extensions.
   Parameter Description
   filter?: [498]TaskFilter

   Optional filter to select tasks of a certain type or version.
   Returns Description
   [499]Thenable<[500]Task[]>

   registerTaskProvider(type: string, provider:
   [501]TaskProvider): [502]Disposable

   Register a task provider.
   Parameter Description
   type: string

   The task kind type this provider is registered for.
   provider: [503]TaskProvider

   A task provider.
   Returns Description
   [504]Disposable

   A [505]disposable that unregisters this provider when being
   disposed.

window

   Namespace for dealing with the current window of the editor.
   That is visible and active editors, as well as, UI elements to
   show messages, selections, and asking for user input.

Variables

   activeColorTheme: [506]ColorTheme

   The currently active color theme as configured in the settings.
   The active theme can be changed via the workbench.colorTheme
   setting.

   activeTerminal: [507]Terminal | undefined

   The currently active terminal or undefined. The active terminal
   is the one that currently has focus or most recently had focus.

   activeTextEditor: [508]TextEditor | undefined

   The currently active editor or undefined. The active editor is
   the one that currently has focus or, when none has focus, the
   one that has changed input most recently.

   state: [509]WindowState

   Represents the current window's state.

   terminals: [510]ReadonlyArray<[511]Terminal>

   The currently opened terminals or an empty array.

   visibleTextEditors: [512]TextEditor[]

   The currently visible editors or an empty array.

Events

   onDidChangeActiveColorTheme: [513]Event<[514]ColorTheme>

   An [515]event which fires when the active color theme is
   changed or has changes.

   onDidChangeActiveTerminal: [516]Event<[517]Terminal |
   undefined>

   An [518]event which fires when the [519]active terminal has
   changed. Note that the event also fires when the active
   terminal changes to undefined.

   onDidChangeActiveTextEditor: [520]Event<[521]TextEditor |
   undefined>

   An [522]event which fires when the [523]active editor has
   changed. Note that the event also fires when the active editor
   changes to undefined.

   onDidChangeTextEditorOptions:
   [524]Event<[525]TextEditorOptionsChangeEvent>

   An [526]event which fires when the options of an editor have
   changed.

   onDidChangeTextEditorSelection:
   [527]Event<[528]TextEditorSelectionChangeEvent>

   An [529]event which fires when the selection in an editor has
   changed.

   onDidChangeTextEditorViewColumn:
   [530]Event<[531]TextEditorViewColumnChangeEvent>

   An [532]event which fires when the view column of an editor has
   changed.

   onDidChangeTextEditorVisibleRanges:
   [533]Event<[534]TextEditorVisibleRangesChangeEvent>

   An [535]event which fires when the visible ranges of an editor
   has changed.

   onDidChangeVisibleTextEditors: [536]Event<[537]TextEditor[]>

   An [538]event which fires when the array of [539]visible
   editors has changed.

   onDidChangeWindowState: [540]Event<[541]WindowState>

   An [542]event which fires when the focus state of the current
   window changes. The value of the event represents whether the
   window is focused.

   onDidCloseTerminal: [543]Event<[544]Terminal>

   An [545]event which fires when a terminal is disposed.

   onDidOpenTerminal: [546]Event<[547]Terminal>

   An [548]event which fires when a terminal has been created,
   either through the [549]createTerminal API or commands.

Functions

   createInputBox(): [550]InputBox

   Creates a [551]InputBox to let the user enter some text input.

   Note that in many cases the more convenient
   [552]window.showInputBox is easier to use.
   [553]window.createInputBox should be used when
   [554]window.showInputBox does not offer the required
   flexibility.
      Returns        Description
   [555]InputBox

                 A new [556]InputBox.

   createOutputChannel(name: string): [557]OutputChannel

   Creates a new [558]output channel with the given name.
   Parameter Description
   name: string

   Human-readable string which will be used to represent the
   channel in the UI.
   Returns Description
   [559]OutputChannel

   createQuickPick<T extends [560]QuickPickItem>():
   [561]QuickPick<T>

   Creates a [562]QuickPick to let the user pick an item from a
   list of items of type T.

   Note that in many cases the more convenient
   [563]window.showQuickPick is easier to use.
   [564]window.createQuickPick should be used when
   [565]window.showQuickPick does not offer the required
   flexibility.
        Returns           Description
   [566]QuickPick<T>

                     A new [567]QuickPick.

   createStatusBarItem(alignment?: [568]StatusBarAlignment,
   priority?: number): [569]StatusBarItem

   Creates a status bar [570]item.
   Parameter Description
   alignment?: [571]StatusBarAlignment

   The alignment of the item.
   priority?: number

   The priority of the item. Higher values mean the item should be
   shown more to the left.
   Returns Description
   [572]StatusBarItem

   A new status bar item.

   createTerminal(name?: string, shellPath?: string, shellArgs?:
   string[] | string): [573]Terminal

   Creates a [574]Terminal with a backing shell process. The cwd
   of the terminal will be the workspace directory if it exists.
     * throws - When running in an environment where a new process
       cannot be started.

   Parameter Description
   name?: string

   Optional human-readable string which will be used to represent
   the terminal in the UI.
   shellPath?: string

   Optional path to a custom shell executable to be used in the
   terminal.
   shellArgs?: string[] | string

   Optional args for the custom shell executable. A string can be
   used on Windows only which allows specifying shell args in
   [575]command-line format.
   Returns Description
   [576]Terminal

    [575] https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6

   A new Terminal.

   createTerminal(options: [577]TerminalOptions): [578]Terminal

   Creates a [579]Terminal with a backing shell process.
     * throws - When running in an environment where a new process
       cannot be started.

   Parameter Description
   options: [580]TerminalOptions

   A TerminalOptions object describing the characteristics of the
   new terminal.
   Returns Description
   [581]Terminal

   A new Terminal.

   createTerminal(options: [582]ExtensionTerminalOptions):
   [583]Terminal

   Creates a [584]Terminal where an extension controls its input
   and output.
   Parameter Description
   options: [585]ExtensionTerminalOptions

   An [586]ExtensionTerminalOptions object describing the
   characteristics of the new terminal.
   Returns Description
   [587]Terminal

   A new Terminal.

   createTextEditorDecorationType(options:
   [588]DecorationRenderOptions): [589]TextEditorDecorationType

   Create a TextEditorDecorationType that can be used to add
   decorations to text editors.
   Parameter Description
   options: [590]DecorationRenderOptions

   Rendering options for the decoration type.
   Returns Description
   [591]TextEditorDecorationType

   A new decoration type instance.

   createTreeView<T>(viewId: string, options:
   [592]TreeViewOptions<T>): [593]TreeView<T>

   Create a [594]TreeView for the view contributed using the
   extension point views.
   Parameter Description
   viewId: string

   Id of the view contributed using the extension point views.
   options: [595]TreeViewOptions<T>

   Options for creating the [596]TreeView
   Returns Description
   [597]TreeView<T>

   a [598]TreeView.

   createWebviewPanel(viewType: string, title: string,
   showOptions: [599]ViewColumn | {preserveFocus: boolean,
   viewColumn: [600]ViewColumn}, options?:
   [601]WebviewPanelOptions & [602]WebviewOptions):
   [603]WebviewPanel

   Create and show a new webview panel.
   Parameter Description
   viewType: string

   Identifies the type of the webview panel.
   title: string

   Title of the panel.
   showOptions: [604]ViewColumn | {preserveFocus: boolean,
   viewColumn: [605]ViewColumn}

   Where to show the webview in the editor. If preserveFocus is
   set, the new webview will not take focus.
   options?: [606]WebviewPanelOptions & [607]WebviewOptions

   Settings for the new panel.
   Returns Description
   [608]WebviewPanel

   New webview panel.

   registerCustomEditorProvider(viewType: string, provider:
   [609]CustomTextEditorProvider |
   [610]CustomReadonlyEditorProvider | [611]CustomEditorProvider,
   options?: {supportsMultipleEditorsPerDocument: boolean,
   webviewOptions: [612]WebviewPanelOptions}): [613]Disposable

   Register a provider for custom editors for the viewType
   contributed by the customEditors extension point.

   When a custom editor is opened, VS Code fires an
   onCustomEditor:viewType activation event. Your extension must
   register a [614]CustomTextEditorProvider,
   [615]CustomReadonlyEditorProvider, [616]CustomEditorProviderfor
   viewType as part of activation.
   Parameter Description
   viewType: string

   Unique identifier for the custom editor provider. This should
   match the viewType from the customEditors contribution point.
   provider: [617]CustomTextEditorProvider |
   [618]CustomReadonlyEditorProvider | [619]CustomEditorProvider

   Provider that resolves custom editors.
   options?: {supportsMultipleEditorsPerDocument: boolean,
   webviewOptions: [620]WebviewPanelOptions}

   Options for the provider.
   Returns Description
   [621]Disposable

   Disposable that unregisters the provider.

   registerTerminalLinkProvider(provider:
   [622]TerminalLinkProvider): [623]Disposable

   Register provider that enables the detection and handling of
   links within the terminal.
   Parameter Description
   provider: [624]TerminalLinkProvider

   The provider that provides the terminal links.
   Returns Description
   [625]Disposable

   Disposable that unregisters the provider.

   registerTreeDataProvider<T>(viewId: string, treeDataProvider:
   [626]TreeDataProvider<T>): [627]Disposable

   Register a [628]TreeDataProvider for the view contributed using
   the extension point views. This will allow you to contribute
   data to the [629]TreeView and update if the data changes.

   Note: To get access to the [630]TreeView and perform operations
   on it, use [631]createTreeView.
   Parameter Description
   viewId: string

   Id of the view contributed using the extension point views.
   treeDataProvider: [632]TreeDataProvider<T>

   A [633]TreeDataProvider that provides tree data for the view
   Returns Description
   [634]Disposable

   registerUriHandler(handler: [635]UriHandler): [636]Disposable

   Registers a [637]uri handler capable of handling system-wide
   [638]uris. In case there are multiple windows open, the topmost
   window will handle the uri. A uri handler is scoped to the
   extension it is contributed from; it will only be able to
   handle uris which are directed to the extension itself. A uri
   must respect the following rules:
     * The uri-scheme must be vscode.env.uriScheme;
     * The uri-authority must be the extension id (e.g.
       my.extension);
     * The uri-path, -query and -fragment parts are arbitrary.

   For example, if the my.extension extension registers a uri
   handler, it will only be allowed to handle uris with the prefix
   product-name://my.extension.

   An extension can only register a single uri handler in its
   entire activation lifetime.
     * Note: There is an activation event onUri that fires when a
       uri directed for the current extension is about to be
       handled.

       Parameter                           Description
handler: [639]UriHandler

                         The uri handler to register for this extension.
        Returns                            Description
[640]Disposable

   registerWebviewPanelSerializer(viewType: string, serializer:
   [641]WebviewPanelSerializer): [642]Disposable

   Registers a webview panel serializer.

   Extensions that support reviving should have an
   "onWebviewPanel:viewType" activation event and make sure that
   [643]registerWebviewPanelSerializer is called during
   activation.

   Only a single serializer may be registered at a time for a
   given viewType.
   Parameter Description
   viewType: string

   Type of the webview panel that can be serialized.
   serializer: [644]WebviewPanelSerializer

   Webview serializer.
   Returns Description
   [645]Disposable

   registerWebviewViewProvider(viewId: string, provider:
   [646]WebviewViewProvider, options?: {webviewOptions:
   {retainContextWhenHidden: boolean}}): [647]Disposable

   Register a new provider for webview views.
   Parameter Description
   viewId: string

   Unique id of the view. This should match the id from the views
   contribution in the package.json.
   provider: [648]WebviewViewProvider

   Provider for the webview views.
   options?: {webviewOptions: {retainContextWhenHidden: boolean}}
   Returns Description
   [649]Disposable

   Disposable that unregisters the provider.

   setStatusBarMessage(text: string, hideAfterTimeout: number):
   [650]Disposable

   Set a message to the status bar. This is a short hand for the
   more powerful status bar [651]items.
   Parameter Description
   text: string

   The message to show, supports icon substitution as in status
   bar [652]items.
   hideAfterTimeout: number

   Timeout in milliseconds after which the message will be
   disposed.
   Returns Description
   [653]Disposable

   A disposable which hides the status bar message.

   setStatusBarMessage(text: string, hideWhenDone:
   [654]Thenable<any>): [655]Disposable

   Set a message to the status bar. This is a short hand for the
   more powerful status bar [656]items.
   Parameter Description
   text: string

   The message to show, supports icon substitution as in status
   bar [657]items.
   hideWhenDone: [658]Thenable<any>

   Thenable on which completion (resolve or reject) the message
   will be disposed.
   Returns Description
   [659]Disposable

   A disposable which hides the status bar message.

   setStatusBarMessage(text: string): [660]Disposable

   Set a message to the status bar. This is a short hand for the
   more powerful status bar [661]items.

   Note that status bar messages stack and that they must be
   disposed when no longer used.
   Parameter Description
   text: string

   The message to show, supports icon substitution as in status
   bar [662]items.
   Returns Description
   [663]Disposable

   A disposable which hides the status bar message.

   showErrorMessage(message: string, ...items: string[]):
   [664]Thenable<string | undefined>

   Show an error message.
     * see - [665]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   ...items: string[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [666]Thenable<string | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showErrorMessage(message: string, options: [667]MessageOptions,
   ...items: string[]): [668]Thenable<string | undefined>

   Show an error message.
     * see - [669]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   options: [670]MessageOptions

   Configures the behaviour of the message.
   ...items: string[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [671]Thenable<string | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showErrorMessage<T extends [672]MessageItem>(message: string,
   ...items: T[]): [673]Thenable<T | undefined>

   Show an error message.
     * see - [674]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   ...items: T[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [675]Thenable<T | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showErrorMessage<T extends [676]MessageItem>(message: string,
   options: [677]MessageOptions, ...items: T[]): [678]Thenable<T |
   undefined>

   Show an error message.
     * see - [679]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   options: [680]MessageOptions

   Configures the behaviour of the message.
   ...items: T[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [681]Thenable<T | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showInformationMessage(message: string, ...items: string[]):
   [682]Thenable<string | undefined>

   Show an information message to users. Optionally provide an
   array of items which will be presented as clickable buttons.
   Parameter Description
   message: string

   The message to show.
   ...items: string[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [683]Thenable<string | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showInformationMessage(message: string, options:
   [684]MessageOptions, ...items: string[]): [685]Thenable<string
   | undefined>

   Show an information message to users. Optionally provide an
   array of items which will be presented as clickable buttons.
   Parameter Description
   message: string

   The message to show.
   options: [686]MessageOptions

   Configures the behaviour of the message.
   ...items: string[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [687]Thenable<string | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showInformationMessage<T extends [688]MessageItem>(message:
   string, ...items: T[]): [689]Thenable<T | undefined>

   Show an information message.
     * see - [690]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   ...items: T[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [691]Thenable<T | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showInformationMessage<T extends [692]MessageItem>(message:
   string, options: [693]MessageOptions, ...items: T[]):
   [694]Thenable<T | undefined>

   Show an information message.
     * see - [695]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   options: [696]MessageOptions

   Configures the behaviour of the message.
   ...items: T[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [697]Thenable<T | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showInputBox(options?: [698]InputBoxOptions, token?:
   [699]CancellationToken): [700]Thenable<string | undefined>

   Opens an input box to ask the user for input.

   The returned value will be undefined if the input box was
   canceled (e.g. pressing ESC). Otherwise the returned value will
   be the string typed by the user or an empty string if the user
   did not type anything but dismissed the input box with OK.
   Parameter Description
   options?: [701]InputBoxOptions

   Configures the behavior of the input box.
   token?: [702]CancellationToken

   A token that can be used to signal cancellation.
   Returns Description
   [703]Thenable<string | undefined>

   A promise that resolves to a string the user provided or to
   undefined in case of dismissal.

   showOpenDialog(options?: [704]OpenDialogOptions):
   [705]Thenable<[706]Uri[] | undefined>

   Shows a file open dialog to the user which allows to select a
   file for opening-purposes.
   Parameter Description
   options?: [707]OpenDialogOptions

   Options that control the dialog.
   Returns Description
   [708]Thenable<[709]Uri[] | undefined>

   A promise that resolves to the selected resources or undefined.

   showQuickPick(items: string[] | [710]Thenable<string[]>,
   options: [711]QuickPickOptions & {canPickMany: true}, token?:
   [712]CancellationToken): [713]Thenable<string[] | undefined>

   Shows a selection list allowing multiple selections.
   Parameter Description
   items: string[] | [714]Thenable<string[]>

   An array of strings, or a promise that resolves to an array of
   strings.
   options: [715]QuickPickOptions & {canPickMany: true}

   Configures the behavior of the selection list.
   token?: [716]CancellationToken

   A token that can be used to signal cancellation.
   Returns Description
   [717]Thenable<string[] | undefined>

   A promise that resolves to the selected items or undefined.

   showQuickPick(items: string[] | [718]Thenable<string[]>,
   options?: [719]QuickPickOptions, token?:
   [720]CancellationToken): [721]Thenable<string | undefined>

   Shows a selection list.
   Parameter Description
   items: string[] | [722]Thenable<string[]>

   An array of strings, or a promise that resolves to an array of
   strings.
   options?: [723]QuickPickOptions

   Configures the behavior of the selection list.
   token?: [724]CancellationToken

   A token that can be used to signal cancellation.
   Returns Description
   [725]Thenable<string | undefined>

   A promise that resolves to the selection or undefined.

   showQuickPick<T extends [726]QuickPickItem>(items: T[] |
   [727]Thenable<T[]>, options: [728]QuickPickOptions &
   {canPickMany: true}, token?: [729]CancellationToken):
   [730]Thenable<T[] | undefined>

   Shows a selection list allowing multiple selections.
   Parameter Description
   items: T[] | [731]Thenable<T[]>

   An array of items, or a promise that resolves to an array of
   items.
   options: [732]QuickPickOptions & {canPickMany: true}

   Configures the behavior of the selection list.
   token?: [733]CancellationToken

   A token that can be used to signal cancellation.
   Returns Description
   [734]Thenable<T[] | undefined>

   A promise that resolves to the selected items or undefined.

   showQuickPick<T extends [735]QuickPickItem>(items: T[] |
   [736]Thenable<T[]>, options?: [737]QuickPickOptions, token?:
   [738]CancellationToken): [739]Thenable<T | undefined>

   Shows a selection list.
   Parameter Description
   items: T[] | [740]Thenable<T[]>

   An array of items, or a promise that resolves to an array of
   items.
   options?: [741]QuickPickOptions

   Configures the behavior of the selection list.
   token?: [742]CancellationToken

   A token that can be used to signal cancellation.
   Returns Description
   [743]Thenable<T | undefined>

   A promise that resolves to the selected item or undefined.

   showSaveDialog(options?: [744]SaveDialogOptions):
   [745]Thenable<[746]Uri | undefined>

   Shows a file save dialog to the user which allows to select a
   file for saving-purposes.
   Parameter Description
   options?: [747]SaveDialogOptions

   Options that control the dialog.
   Returns Description
   [748]Thenable<[749]Uri | undefined>

   A promise that resolves to the selected resource or undefined.

   showTextDocument(document: [750]TextDocument, column?:
   [751]ViewColumn, preserveFocus?: boolean):
   [752]Thenable<[753]TextEditor>

   Show the given document in a text editor. A [754]column can be
   provided to control where the editor is being shown. Might
   change the [755]active editor.
   Parameter Description
   document: [756]TextDocument

   A text document to be shown.
   column?: [757]ViewColumn

   A view column in which the [758]editor should be shown. The
   default is the [759]active, other values are adjusted to be
   Min(column, columnCount + 1), the [760]active-column is not
   adjusted. Use [761]ViewColumn.Beside to open the editor to the
   side of the currently active one.
   preserveFocus?: boolean

   When true the editor will not take focus.
   Returns Description
   [762]Thenable<[763]TextEditor>

   A promise that resolves to an [764]editor.

   showTextDocument(document: [765]TextDocument, options?:
   [766]TextDocumentShowOptions): [767]Thenable<[768]TextEditor>

   Show the given document in a text editor. [769]Options can be
   provided to control options of the editor is being shown. Might
   change the [770]active editor.
   Parameter Description
   document: [771]TextDocument

   A text document to be shown.
   options?: [772]TextDocumentShowOptions

   (#TextDocumentShowOptions) to configure the behavior of showing
   the [773]editor.
   Returns Description
   [774]Thenable<[775]TextEditor>

   A promise that resolves to an [776]editor.

   showTextDocument(uri: [777]Uri, options?:
   [778]TextDocumentShowOptions): [779]Thenable<[780]TextEditor>

   A short-hand for openTextDocument(uri).then(document =>
   showTextDocument(document, options)).
     * see - [781]openTextDocument

   Parameter Description
   uri: [782]Uri

   A resource identifier.
   options?: [783]TextDocumentShowOptions

   (#TextDocumentShowOptions) to configure the behavior of showing
   the [784]editor.
   Returns Description
   [785]Thenable<[786]TextEditor>

   A promise that resolves to an [787]editor.

   showWarningMessage(message: string, ...items: string[]):
   [788]Thenable<string | undefined>

   Show a warning message.
     * see - [789]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   ...items: string[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [790]Thenable<string | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showWarningMessage(message: string, options:
   [791]MessageOptions, ...items: string[]): [792]Thenable<string
   | undefined>

   Show a warning message.
     * see - [793]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   options: [794]MessageOptions

   Configures the behaviour of the message.
   ...items: string[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [795]Thenable<string | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showWarningMessage<T extends [796]MessageItem>(message: string,
   ...items: T[]): [797]Thenable<T | undefined>

   Show a warning message.
     * see - [798]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   ...items: T[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [799]Thenable<T | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showWarningMessage<T extends [800]MessageItem>(message: string,
   options: [801]MessageOptions, ...items: T[]): [802]Thenable<T |
   undefined>

   Show a warning message.
     * see - [803]showInformationMessage

   Parameter Description
   message: string

   The message to show.
   options: [804]MessageOptions

   Configures the behaviour of the message.
   ...items: T[]

   A set of items that will be rendered as actions in the message.
   Returns Description
   [805]Thenable<T | undefined>

   A thenable that resolves to the selected item or undefined when
   being dismissed.

   showWorkspaceFolderPick(options?:
   [806]WorkspaceFolderPickOptions):
   [807]Thenable<[808]WorkspaceFolder | undefined>

   Shows a selection list of [809]workspace folders to pick from.
   Returns undefined if no folder is open.
   Parameter Description
   options?: [810]WorkspaceFolderPickOptions

   Configures the behavior of the workspace folder list.
   Returns Description
   [811]Thenable<[812]WorkspaceFolder | undefined>

   A promise that resolves to the workspace folder or undefined.

   withProgress<R>(options: [813]ProgressOptions, task: (progress:
   [814]Progress<{increment: number, message: string}>, token:
   [815]CancellationToken) => [816]Thenable<R>): [817]Thenable<R>

   Show progress in the editor. Progress is shown while running
   the given callback and while the promise it returned isn't
   resolved nor rejected. The location at which progress should
   show (and other details) is defined via the passed
   [818]ProgressOptions.
   Parameter Description
   options: [819]ProgressOptions
   task: (progress: [820]Progress<{increment: number, message:
   string}>, token: [821]CancellationToken) => [822]Thenable<R>

   A callback returning a promise. Progress state can be reported
   with the provided [823]progress-object.

   To report discrete progress, use increment to indicate how much
   work has been completed. Each call with a increment value will
   be summed up and reflected as overall progress until 100% is
   reached (a value of e.g. 10 accounts for 10% of work done).
   Note that currently only ProgressLocation.Notification is
   capable of showing discrete progress.

   To monitor if the operation has been cancelled by the user, use
   the provided [824]CancellationToken. Note that currently only
   ProgressLocation.Notification is supporting to show a cancel
   button to cancel the long running operation.
   Returns Description
   [825]Thenable<R>

   The thenable the task-callback returned.

   withScmProgress<R>(task: (progress: [826]Progress<number>) =>
   [827]Thenable<R>): [828]Thenable<R>

   Show progress in the Source Control viewlet while running the
   given callback and while its returned promise isn't resolve or
   rejected.
     * deprecated - Use withProgress instead.

   Parameter Description
   task: (progress: [829]Progress<number>) => [830]Thenable<R>

   A callback returning a promise. Progress increments can be
   reported with the provided [831]progress-object.
   Returns Description
   [832]Thenable<R>

   The thenable the task did return.

workspace

   Namespace for dealing with the current workspace. A workspace
   is the representation of the folder that has been opened. There
   is no workspace when just a file but not a folder has been
   opened.

   The workspace offers support for [833]listening to fs events
   and for [834]finding files. Both perform well and run outside
   the editor-process so that they should be always used instead
   of nodejs-equivalents.

Variables

   fs: [835]FileSystem

   A [836]file system instance that allows to interact with local
   and remote files, e.g.
   vscode.workspace.fs.readDirectory(someUri) allows to retrieve
   all entries of a directory or
   vscode.workspace.fs.stat(anotherUri) returns the meta data for
   a file.

   name: string | undefined

   The name of the workspace. undefined when no folder has been
   opened.

   rootPath: string | undefined

   The folder that is open in the editor. undefined when no folder
   has been opened.
     * deprecated - Use [837]workspaceFolders instead.

   textDocuments: [838]ReadonlyArray<[839]TextDocument>

   All text documents currently known to the system.

   workspaceFile: [840]Uri | undefined

   The location of the workspace file, for example:

   file:///Users/name/Development/myProject.code-workspace

   or

   untitled:1555503116870

   for a workspace that is untitled and not yet saved.

   Depending on the workspace that is opened, the value will be:
     * undefined when no workspace or a single folder is opened
     * the path of the workspace file as Uri otherwise. if the
       workspace is untitled, the returned URI will use the
       untitled: scheme

   The location can e.g. be used with the vscode.openFolder
   command to open the workspace again after it has been closed.

   Example:
vscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);

   Note: it is not advised to use workspace.workspaceFile to write
   configuration data into the file. You can use
   workspace.getConfiguration().update() for that purpose which
   will work both when a single folder is opened as well as an
   untitled or saved workspace.

   workspaceFolders: [841]ReadonlyArray<[842]WorkspaceFolder> |
   undefined

   List of workspace folders or undefined when no folder is open.
   Note that the first entry corresponds to the value of rootPath.

Events

   onDidChangeConfiguration:
   [843]Event<[844]ConfigurationChangeEvent>

   An event that is emitted when the [845]configuration changed.

   onDidChangeTextDocument:
   [846]Event<[847]TextDocumentChangeEvent>

   An event that is emitted when a [848]text document is changed.
   This usually happens when the [849]contents changes but also
   when other things like the [850]dirty-state changes.

   onDidChangeWorkspaceFolders:
   [851]Event<[852]WorkspaceFoldersChangeEvent>

   An event that is emitted when a workspace folder is added or
   removed.

   onDidCloseTextDocument: [853]Event<[854]TextDocument>

   An event that is emitted when a [855]text document is disposed
   or when the language id of a text document [856]has been
   changed.

   Note 1: There is no guarantee that this event fires when an
   editor tab is closed, use the
   [857]onDidChangeVisibleTextEditors-event to know when editors
   change.

   Note 2: A document can be open but not shown in an editor which
   means this event can fire for a document that has not been
   shown in an editor.

   onDidCreateFiles: [858]Event<[859]FileCreateEvent>

   An event that is emitted when files have been created.

   Note: This event is triggered by user gestures, like creating a
   file from the explorer, or from the
   [860]workspace.applyEdit-api, but this event is not fired when
   files change on disk, e.g triggered by another application, or
   when using the [861]workspace.fs-api.

   onDidDeleteFiles: [862]Event<[863]FileDeleteEvent>

   An event that is emitted when files have been deleted.

   Note 1: This event is triggered by user gestures, like deleting
   a file from the explorer, or from the
   [864]workspace.applyEdit-api, but this event is not fired when
   files change on disk, e.g triggered by another application, or
   when using the [865]workspace.fs-api.

   Note 2: When deleting a folder with children only one event is
   fired.

   onDidOpenTextDocument: [866]Event<[867]TextDocument>

   An event that is emitted when a [868]text document is opened or
   when the language id of a text document [869]has been changed.

   To add an event listener when a visible text document is
   opened, use the [870]TextEditor events in the [871]window
   namespace. Note that:
     * The event is emitted before the [872]document is updated in
       the [873]active text editor
     * When a [874]text document is already open (e.g.: open in
       another [875]visible text editor) this event is not emitted

   onDidRenameFiles: [876]Event<[877]FileRenameEvent>

   An event that is emitted when files have been renamed.

   Note 1: This event is triggered by user gestures, like renaming
   a file from the explorer, and from the
   [878]workspace.applyEdit-api, but this event is not fired when
   files change on disk, e.g triggered by another application, or
   when using the [879]workspace.fs-api.

   Note 2: When renaming a folder with children only one event is
   fired.

   onDidSaveTextDocument: [880]Event<[881]TextDocument>

   An event that is emitted when a [882]text document is saved to
   disk.

   onWillCreateFiles: [883]Event<[884]FileWillCreateEvent>

   An event that is emitted when files are being created.

   Note 1: This event is triggered by user gestures, like creating
   a file from the explorer, or from the
   [885]workspace.applyEdit-api. This event is not fired when
   files change on disk, e.g triggered by another application, or
   when using the [886]workspace.fs-api.

   Note 2: When this event is fired, edits to files that are are
   being created cannot be applied.

   onWillDeleteFiles: [887]Event<[888]FileWillDeleteEvent>

   An event that is emitted when files are being deleted.

   Note 1: This event is triggered by user gestures, like deleting
   a file from the explorer, or from the
   [889]workspace.applyEdit-api, but this event is not fired when
   files change on disk, e.g triggered by another application, or
   when using the [890]workspace.fs-api.

   Note 2: When deleting a folder with children only one event is
   fired.

   onWillRenameFiles: [891]Event<[892]FileWillRenameEvent>

   An event that is emitted when files are being renamed.

   Note 1: This event is triggered by user gestures, like renaming
   a file from the explorer, and from the
   [893]workspace.applyEdit-api, but this event is not fired when
   files change on disk, e.g triggered by another application, or
   when using the [894]workspace.fs-api.

   Note 2: When renaming a folder with children only one event is
   fired.

   onWillSaveTextDocument:
   [895]Event<[896]TextDocumentWillSaveEvent>

   An event that is emitted when a [897]text document will be
   saved to disk.

   Note 1: Subscribers can delay saving by registering
   asynchronous work. For the sake of data integrity the editor
   might save without firing this event. For instance when
   shutting down with dirty files.

   Note 2: Subscribers are called sequentially and they can
   [898]delay saving by registering asynchronous work. Protection
   against misbehaving listeners is implemented as such:
     * there is an overall time budget that all listeners share
       and if that is exhausted no further listener is called
     * listeners that take a long time or produce errors
       frequently will not be called anymore

   The current thresholds are 1.5 seconds as overall time budget
   and a listener can misbehave 3 times before being ignored.

Functions

   applyEdit(edit: [899]WorkspaceEdit): [900]Thenable<boolean>

   Make changes to one or many resources or create, delete, and
   rename resources as defined by the given [901]workspace edit.

   All changes of a workspace edit are applied in the same order
   in which they have been added. If multiple textual inserts are
   made at the same position, these strings appear in the
   resulting text in the order the 'inserts' were made, unless
   that are interleaved with resource edits. Invalid sequences
   like 'delete file a' -> 'insert text in file a' cause failure
   of the operation.

   When applying a workspace edit that consists only of text edits
   an 'all-or-nothing'-strategy is used. A workspace edit with
   resource creations or deletions aborts the operation, e.g.
   consecutive edits will not be attempted, when a single edit
   fails.
   Parameter Description
   edit: [902]WorkspaceEdit

   A workspace edit.
   Returns Description
   [903]Thenable<boolean>

   A thenable that resolves when the edit could be applied.

   asRelativePath(pathOrUri: string | [904]Uri,
   includeWorkspaceFolder?: boolean): string

   Returns a path that is relative to the workspace folder or
   folders.

   When there are no [905]workspace folders or when the path is
   not contained in them, the input is returned.
   Parameter Description
   pathOrUri: string | [906]Uri

   A path or uri. When a uri is given its [907]fsPath is used.
   includeWorkspaceFolder?: boolean

   When true and when the given path is contained inside a
   workspace folder the name of the workspace is prepended.
   Defaults to true when there are multiple workspace folders and
   false otherwise.
   Returns Description
   string

   A path relative to the root or the input.

   createFileSystemWatcher(globPattern: [908]GlobPattern,
   ignoreCreateEvents?: boolean, ignoreChangeEvents?: boolean,
   ignoreDeleteEvents?: boolean): [909]FileSystemWatcher

   Creates a file system watcher.

   A glob pattern that filters the file events on their absolute
   path must be provided. Optionally, flags to ignore certain
   kinds of events can be provided. To stop listening to events
   the watcher must be disposed.

   Note that only files within the current [910]workspace folders
   can be watched.
   Parameter Description
   globPattern: [911]GlobPattern

   A [912]glob pattern that is applied to the absolute paths of
   created, changed, and deleted files. Use a [913]relative
   pattern to limit events to a certain [914]workspace folder.
   ignoreCreateEvents?: boolean

   Ignore when files have been created.
   ignoreChangeEvents?: boolean

   Ignore when files have been changed.
   ignoreDeleteEvents?: boolean

   Ignore when files have been deleted.
   Returns Description
   [915]FileSystemWatcher

   A new file system watcher instance.

   findFiles(include: [916]GlobPattern, exclude?: [917]GlobPattern
   | null, maxResults?: number, token?: [918]CancellationToken):
   [919]Thenable<[920]Uri[]>

   Find files across all [921]workspace folders in the workspace.
     * example - findFiles('/*.js', '/node_modules/**', 10)

   Parameter Description
   include: [922]GlobPattern

   A [923]glob pattern that defines the files to search for. The
   glob pattern will be matched against the file paths of
   resulting matches relative to their workspace. Use a
   [924]relative pattern to restrict the search results to a
   [925]workspace folder.
   exclude?: [926]GlobPattern | null

   A [927]glob pattern that defines files and folders to exclude.
   The glob pattern will be matched against the file paths of
   resulting matches relative to their workspace. When undefined
   only default excludes will apply, when null no excludes will
   apply.
   maxResults?: number

   An upper-bound for the result.
   token?: [928]CancellationToken

   A token that can be used to signal cancellation to the
   underlying search engine.
   Returns Description
   [929]Thenable<[930]Uri[]>

   A thenable that resolves to an array of resource identifiers.
   Will return no results if no [931]workspace folders are opened.

   getConfiguration(section?: string | undefined, scope?:
   [932]ConfigurationScope | null): [933]WorkspaceConfiguration

   Get a workspace configuration object.

   When a section-identifier is provided only that part of the
   configuration is returned. Dots in the section-identifier are
   interpreted as child-access, like { myExt: { setting: { doIt:
   true }}} and getConfiguration('myExt.setting').get('doIt') ===
   true.

   When a scope is provided configuration confined to that scope
   is returned. Scope can be a resource or a language identifier
   or both.
   Parameter Description
   section?: string | undefined

   A dot-separated identifier.
   scope?: [934]ConfigurationScope | null

   A scope for which the configuration is asked for.
   Returns Description
   [935]WorkspaceConfiguration

   The full configuration or a subset.

   getWorkspaceFolder(uri: [936]Uri): [937]WorkspaceFolder |
   undefined

   Returns the [938]workspace folder that contains a given uri.
     * returns undefined when the given uri doesn't match any
       workspace folder
     * returns the input when the given uri is a workspace folder
       itself

              Parameter                       Description
   uri: [939]Uri

                                    An uri.
               Returns                        Description
   [940]WorkspaceFolder | undefined

                                    A workspace folder or undefined

   openTextDocument(uri: [941]Uri):
   [942]Thenable<[943]TextDocument>

   Opens a document. Will return early if this document is already
   open. Otherwise the document is loaded and the
   [944]didOpen-event fires.

   The document is denoted by an [945]uri. Depending on the
   [946]scheme the following rules apply:
     * file-scheme: Open a file on disk, will be rejected if the
       file does not exist or cannot be loaded.
     * untitled-scheme: A new file that should be saved on disk,
       e.g. untitled:c:\frodo\new.js. The language will be derived
       from the file name.
     * For all other schemes contributed [947]text document
       content providers and [948]file system providers are
       consulted.

   Note that the lifecycle of the returned document is owned by
   the editor and not by the extension. That means an
   [949]onDidClose-event can occur at any time after opening it.
   Parameter Description
   uri: [950]Uri

   Identifies the resource to open.
   Returns Description
   [951]Thenable<[952]TextDocument>

   A promise that resolves to a [953]document.

   openTextDocument(fileName: string):
   [954]Thenable<[955]TextDocument>

   A short-hand for openTextDocument(Uri.file(fileName)).
     * see - [956]openTextDocument

   Parameter Description
   fileName: string

   A name of a file on disk.
   Returns Description
   [957]Thenable<[958]TextDocument>

   A promise that resolves to a [959]document.

   openTextDocument(options?: {content: string, language:
   string}): [960]Thenable<[961]TextDocument>

   Opens an untitled text document. The editor will prompt the
   user for a file path when the document is to be saved. The
   options parameter allows to specify the language and/or the
   content of the document.
   Parameter Description
   options?: {content: string, language: string}

   Options to control how the document will be created.
   Returns Description
   [962]Thenable<[963]TextDocument>

   A promise that resolves to a [964]document.

   registerFileSystemProvider(scheme: string, provider:
   [965]FileSystemProvider, options?: {isCaseSensitive: boolean,
   isReadonly: boolean}): [966]Disposable

   Register a filesystem provider for a given scheme, e.g. ftp.

   There can only be one provider per scheme and an error is being
   thrown when a scheme has been claimed by another provider or
   when it is reserved.
   Parameter Description
   scheme: string

   The uri-[967]scheme the provider registers for.
   provider: [968]FileSystemProvider

   The filesystem provider.
   options?: {isCaseSensitive: boolean, isReadonly: boolean}

   Immutable metadata about the provider.
   Returns Description
   [969]Disposable

   A [970]disposable that unregisters this provider when being
   disposed.

   registerTaskProvider(type: string, provider:
   [971]TaskProvider): [972]Disposable

   Register a task provider.
     * deprecated - Use the corresponding function on the tasks
       namespace instead

   Parameter Description
   type: string

   The task kind type this provider is registered for.
   provider: [973]TaskProvider

   A task provider.
   Returns Description
   [974]Disposable

   A [975]disposable that unregisters this provider when being
   disposed.

   registerTextDocumentContentProvider(scheme: string, provider:
   [976]TextDocumentContentProvider): [977]Disposable

   Register a text document content provider.

   Only one provider can be registered per scheme.
   Parameter Description
   scheme: string

   The uri-scheme to register for.
   provider: [978]TextDocumentContentProvider

   A content provider.
   Returns Description
   [979]Disposable

   A [980]disposable that unregisters this provider when being
   disposed.

   saveAll(includeUntitled?: boolean): [981]Thenable<boolean>

   Save all dirty files.
   Parameter Description
   includeUntitled?: boolean

   Also save files that have been created during this session.
   Returns Description
   [982]Thenable<boolean>

   A thenable that resolves when the files have been saved.

   updateWorkspaceFolders(start: number, deleteCount: number |
   undefined | null, ...workspaceFoldersToAdd: {name: string, uri:
   [983]Uri}[]): boolean

   This method replaces deleteCount [984]workspace folders
   starting at index start by an optional set of
   workspaceFoldersToAdd on the vscode.workspace.workspaceFolders
   array. This "splice" behavior can be used to add, remove and
   change workspace folders in a single operation.

   If the first workspace folder is added, removed or changed, the
   currently executing extensions (including the one that called
   this method) will be terminated and restarted so that the
   (deprecated) rootPath property is updated to point to the first
   workspace folder.

   Use the [985]onDidChangeWorkspaceFolders() event to get
   notified when the workspace folders have been updated.

   Example: adding a new workspace folder at the end of workspace
   folders
workspace.updateWorkspaceFolders(workspace.workspaceFolders ? workspace.
workspaceFolders.length : 0, null, { uri: ...});

   Example: removing the first workspace folder
workspace.updateWorkspaceFolders(0, 1);

   Example: replacing an existing workspace folder with a new one
workspace.updateWorkspaceFolders(0, 1, { uri: ...});

   It is valid to remove an existing workspace folder and add it
   again with a different name to rename that folder.

   Note: it is not valid to call [986]updateWorkspaceFolders()
   multiple times without waiting for the
   [987]onDidChangeWorkspaceFolders() to fire.
   Parameter Description
   start: number

   the zero-based location in the list of currently opened
   [988]workspace folders from which to start deleting workspace
   folders.
   deleteCount: number | undefined | null

   the optional number of workspace folders to remove.
   ...workspaceFoldersToAdd: {name: string, uri: [989]Uri}[]

   the optional variable set of workspace folders to add in place
   of the deleted ones. Each workspace is identified with a
   mandatory URI and an optional name.
   Returns Description
   boolean

   true if the operation was successfully started and false
   otherwise if arguments were used that would result in invalid
   workspace folder state (e.g. 2 folders with the same URI).

AccessibilityInformation

   Accessibility information which controls screen reader
   behavior.

Properties

   label: string

   Label to be read out by a screen reader once the item has
   focus.

   role?: string

   Role of the widget which defines how a screen reader interacts
   with it. The role should be set in special cases when for
   example a tree-like element behaves like a checkbox. If role is
   not specified VS Code will pick the appropriate role
   automatically. More about aria roles can be found here
   [990]https://w3c.github.io/aria/#widget_roles

    [990] https://w3c.github.io/aria/#widget_roles

AuthenticationGetSessionOptions

   Options to be used when getting an [991]AuthenticationSession
   from an [992]AuthenticationProvider.

Properties

   clearSessionPreference?: boolean

   Whether the existing user session preference should be cleared.

   For authentication providers that support being signed into
   multiple accounts at once, the user will be prompted to select
   an account to use when [993]getSession is called. This
   preference is remembered until [994]getSession is called with
   this flag.

   Defaults to false.

   createIfNone?: boolean

   Whether login should be performed if there is no matching
   session.

   If true, a modal dialog will be shown asking the user to sign
   in. If false, a numbered badge will be shown on the accounts
   activity bar icon. An entry for the extension will be added
   under the menu to sign in. This allows quietly prompting the
   user to sign in.

   Defaults to false.

AuthenticationProviderInformation

   Basic information about an [995]authenticationProvider

Properties

   id: string

   The unique identifier of the authentication provider.

   label: string

   The human-readable name of the authentication provider.

AuthenticationSession

   Represents a session of a currently logged in user.

Properties

   accessToken: string

   The access token.

   account: [996]AuthenticationSessionAccountInformation

   The account associated with the session.

   id: string

   The identifier of the authentication session.

   scopes: [997]ReadonlyArray<string>

   The permissions granted by the session's access token.
   Available scopes are defined by the
   [998]AuthenticationProvider.

AuthenticationSessionAccountInformation

   The information of an account associated with an
   [999]AuthenticationSession.

Properties

   id: string

   The unique identifier of the account.

   label: string

   The human-readable name of the account.

AuthenticationSessionsChangeEvent

   An [1000]event which fires when an [1001]AuthenticationSession
   is added, removed, or changed.

Properties

   provider: [1002]AuthenticationProviderInformation

   The [1003]authenticationProvider that has had its sessions
   change.

Breakpoint

   The base class of all breakpoint types.

Constructors

   new Breakpoint(enabled?: boolean, condition?: string,
   hitCondition?: string, logMessage?: string): [1004]Breakpoint
         Parameter       Description
   enabled?: boolean
   condition?: string
   hitCondition?: string
   logMessage?: string
          Returns        Description
   [1005]Breakpoint

Properties

   condition?: string

   An optional expression for conditional breakpoints.

   enabled: boolean

   Is breakpoint enabled.

   hitCondition?: string

   An optional expression that controls how many hits of the
   breakpoint are ignored.

   id: string

   The unique ID of the breakpoint.

   logMessage?: string

   An optional message that gets logged when this breakpoint is
   hit. Embedded expressions within {} are interpolated by the
   debug adapter.

BreakpointsChangeEvent

   An event describing the changes to the set of
   [1006]breakpoints.

Properties

   added: [1007]ReadonlyArray<[1008]Breakpoint>

   Added breakpoints.

   changed: [1009]ReadonlyArray<[1010]Breakpoint>

   Changed breakpoints.

   removed: [1011]ReadonlyArray<[1012]Breakpoint>

   Removed breakpoints.

CallHierarchyIncomingCall

   Represents an incoming call, e.g. a caller of a method or
   constructor.

Constructors

   new CallHierarchyIncomingCall(item: [1013]CallHierarchyItem,
   fromRanges: [1014]Range[]): [1015]CallHierarchyIncomingCall

   Create a new call object.
              Parameter                         Description
   item: [1016]CallHierarchyItem

                                   The item making the call.
   fromRanges: [1017]Range[]

                                   The ranges at which the calls appear.
               Returns                          Description
   [1018]CallHierarchyIncomingCall

Properties

   from: [1019]CallHierarchyItem

   The item that makes the call.

   fromRanges: [1020]Range[]

   The range at which at which the calls appears. This is relative
   to the caller denoted by [1021]this.from.

CallHierarchyItem

   Represents programming constructs like functions or
   constructors in the context of call hierarchy.

Constructors

   new CallHierarchyItem(kind: [1022]SymbolKind, name: string,
   detail: string, uri: [1023]Uri, range: [1024]Range,
   selectionRange: [1025]Range): [1026]CallHierarchyItem

   Creates a new call hierarchy item.
            Parameter          Description
   kind: [1027]SymbolKind
   name: string
   detail: string
   uri: [1028]Uri
   range: [1029]Range
   selectionRange: [1030]Range
             Returns           Description
   [1031]CallHierarchyItem

Properties

   detail?: string

   More detail for this item, e.g. the signature of a function.

   kind: [1032]SymbolKind

   The kind of this item.

   name: string

   The name of this item.

   range: [1033]Range

   The range enclosing this symbol not including leading/trailing
   whitespace but everything else, e.g. comments and code.

   selectionRange: [1034]Range

   The range that should be selected and revealed when this symbol
   is being picked, e.g. the name of a function. Must be contained
   by the [1035]range.

   tags?: [1036]ReadonlyArray<[1037]SymbolTag>

   Tags for this item.

   uri: [1038]Uri

   The resource identifier of this item.

CallHierarchyOutgoingCall

   Represents an outgoing call, e.g. calling a getter from a
   method or a method from a constructor etc.

Constructors

   new CallHierarchyOutgoingCall(item: [1039]CallHierarchyItem,
   fromRanges: [1040]Range[]): [1041]CallHierarchyOutgoingCall

   Create a new call object.
              Parameter                         Description
   item: [1042]CallHierarchyItem

                                   The item being called
   fromRanges: [1043]Range[]

                                   The ranges at which the calls appear.
               Returns                          Description
   [1044]CallHierarchyOutgoingCall

Properties

   fromRanges: [1045]Range[]

   The range at which this item is called. This is the range
   relative to the caller, e.g the item passed to
   [1046]provideCallHierarchyOutgoingCalls and not [1047]this.to.

   to: [1048]CallHierarchyItem

   The item that is called.

CallHierarchyProvider

   The call hierarchy provider interface describes the contract
   between extensions and the call hierarchy feature which allows
   to browse calls and caller of function, methods, constructor
   etc.

Methods

   prepareCallHierarchy(document: [1049]TextDocument, position:
   [1050]Position, token: [1051]CancellationToken):
   [1052]ProviderResult<[1053]CallHierarchyItem |
   [1054]CallHierarchyItem[]>

   Bootstraps call hierarchy by returning the item that is denoted
   by the given document and position. This item will be used as
   entry into the call graph. Providers should return undefined or
   null when there is no item at the given location.
   Parameter Description
   document: [1055]TextDocument

   The document in which the command was invoked.
   position: [1056]Position

   The position at which the command was invoked.
   token: [1057]CancellationToken

   A cancellation token.
   Returns Description
   [1058]ProviderResult<[1059]CallHierarchyItem |
   [1060]CallHierarchyItem[]>

   A call hierarchy item or a thenable that resolves to such. The
   lack of a result can be signaled by returning undefined or
   null.

   provideCallHierarchyIncomingCalls(item:
   [1061]CallHierarchyItem, token: [1062]CancellationToken):
   [1063]ProviderResult<[1064]CallHierarchyIncomingCall[]>

   Provide all incoming calls for an item, e.g all callers for a
   method. In graph terms this describes directed and annotated
   edges inside the call graph, e.g the given item is the starting
   node and the result is the nodes that can be reached.
   Parameter Description
   item: [1065]CallHierarchyItem

   The hierarchy item for which incoming calls should be computed.
   token: [1066]CancellationToken

   A cancellation token.
   Returns Description
   [1067]ProviderResult<[1068]CallHierarchyIncomingCall[]>

   A set of incoming calls or a thenable that resolves to such.
   The lack of a result can be signaled by returning undefined or
   null.

   provideCallHierarchyOutgoingCalls(item:
   [1069]CallHierarchyItem, token: [1070]CancellationToken):
   [1071]ProviderResult<[1072]CallHierarchyOutgoingCall[]>

   Provide all outgoing calls for an item, e.g call calls to
   functions, methods, or constructors from the given item. In
   graph terms this describes directed and annotated edges inside
   the call graph, e.g the given item is the starting node and the
   result is the nodes that can be reached.
   Parameter Description
   item: [1073]CallHierarchyItem

   The hierarchy item for which outgoing calls should be computed.
   token: [1074]CancellationToken

   A cancellation token.
   Returns Description
   [1075]ProviderResult<[1076]CallHierarchyOutgoingCall[]>

   A set of outgoing calls or a thenable that resolves to such.
   The lack of a result can be signaled by returning undefined or
   null.

CancellationToken

   A cancellation token is passed to an asynchronous or long
   running operation to request cancellation, like cancelling a
   request for completion items because the user continued to
   type.

   To get an instance of a CancellationToken use a
   [1077]CancellationTokenSource.

Properties

   isCancellationRequested: boolean

   Is true when the token has been cancelled, false otherwise.

   onCancellationRequested: [1078]Event<any>

   An [1079]event which fires upon cancellation.

CancellationTokenSource

   A cancellation source creates and controls a [1080]cancellation
   token.

Properties

   token: [1081]CancellationToken

   The cancellation token of this source.

Methods

   cancel(): void

   Signal cancellation on the token.
   Returns Description
   void

   dispose(): void

   Dispose object and free resources.
   Returns Description
   void

CharacterPair

   A tuple of two characters, like a pair of opening and closing
   brackets.

   CharacterPair: [string, string]

Clipboard

   The clipboard provides read and write access to the system's
   clipboard.

Methods

   readText(): [1082]Thenable<string>

   Read the current clipboard contents as text.
          Returns                      Description
   [1083]Thenable<string>

                          A thenable that resolves to a string.

   writeText(value: string): [1084]Thenable<void>

   Writes text into the clipboard.
        Parameter                         Description
   value: string
         Returns                          Description
   [1085]Thenable<void>

                        A thenable that resolves when writing happened.

CodeAction

   A code action represents a change that can be performed in
   code, e.g. to fix a problem or to refactor code.

   A CodeAction must set either [1086]edit and/or a [1087]command.
   If both are supplied, the edit is applied first, then the
   command is executed.

Constructors

   new CodeAction(title: string, kind?: [1088]CodeActionKind):
   [1089]CodeAction

   Creates a new code action.

   A code action must have at least a [1090]title and [1091]edits
   and/or a [1092]command.
            Parameter                   Description
   title: string

                               The title of the code action.
   kind?: [1093]CodeActionKind

                               The kind of the code action.
             Returns                    Description
   [1094]CodeAction

Properties

   command?: [1095]Command

   A [1096]command this code action executes.

   If this command throws an exception, VS Code displays the
   exception message to users in the editor at the current cursor
   position.

   diagnostics?: [1097]Diagnostic[]

   [1098]Diagnostics that this code action resolves.

   disabled?: {reason: string}

   Marks that the code action cannot currently be applied.
     * Disabled code actions are not shown in automatic
       [1099]lightbulb code action menu.
      https://code.visualstudio.com/docs/editor/editingevolved#_code-action

     * Disabled actions are shown as faded out in the code action
       menu when the user request a more specific type of code
       action, such as refactorings.
     * If the user has a [1100]keybinding that auto applies a code
       action and only a disabled code actions are returned, VS
       Code will show the user an error message with reason in the
       editor.

   [1100] https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions

   edit?: [1101]WorkspaceEdit

   A [1102]workspace edit this code action performs.

   isPreferred?: boolean

   Marks this as a preferred action. Preferred actions are used by
   the auto fix command and can be targeted by keybindings.

   A quick fix should be marked preferred if it properly addresses
   the underlying error. A refactoring should be marked preferred
   if it is the most reasonable choice of actions to take.

   kind?: [1103]CodeActionKind

   [1104]Kind of the code action.

   Used to filter code actions.

   title: string

   A short, human-readable, title for this code action.

CodeActionContext

   Contains additional diagnostic information about the context in
   which a [1105]code action is run.

Properties

   diagnostics: [1106]ReadonlyArray<[1107]Diagnostic>

   An array of diagnostics.

   only?: [1108]CodeActionKind

   Requested kind of actions to return.

   Actions not of this kind are filtered out before being shown by
   the [1109]lightbulb.

   [1109] https://code.visualstudio.com/docs/editor/editingevolved#_code-action

CodeActionKind

   Kind of a code action.

   Kinds are a hierarchical list of identifiers separated by .,
   e.g. "refactor.extract.function".

   Code action kinds are used by VS Code for UI elements such as
   the refactoring context menu. Users can also trigger code
   actions with a specific kind with the editor.action.codeAction
   command.

Static

   Empty: [1110]CodeActionKind

   Empty kind.

   QuickFix: [1111]CodeActionKind

   Base kind for quickfix actions: quickfix.

   Quick fix actions address a problem in the code and are shown
   in the normal code action context menu.

   Refactor: [1112]CodeActionKind

   Base kind for refactoring actions: refactor

   Refactoring actions are shown in the refactoring context menu.

   RefactorExtract: [1113]CodeActionKind

   Base kind for refactoring extraction actions: refactor.extract

   Example extract actions:
     * Extract method
     * Extract function
     * Extract variable
     * Extract interface from class
     * ...

   RefactorInline: [1114]CodeActionKind

   Base kind for refactoring inline actions: refactor.inline

   Example inline actions:
     * Inline function
     * Inline variable
     * Inline constant
     * ...

   RefactorRewrite: [1115]CodeActionKind

   Base kind for refactoring rewrite actions: refactor.rewrite

   Example rewrite actions:
     * Convert JavaScript function to class
     * Add or remove parameter
     * Encapsulate field
     * Make method static
     * Move method to base class
     * ...

   Source: [1116]CodeActionKind

   Base kind for source actions: source

   Source code actions apply to the entire file. They must be
   explicitly requested and will not show in the normal
   [1117]lightbulb menu. Source actions can be run on save using
   editor.codeActionsOnSave and are also shown in the source
   context menu.

   [1117] https://code.visualstudio.com/docs/editor/editingevolved#_code-action

   SourceFixAll: [1118]CodeActionKind

   Base kind for auto-fix source actions: source.fixAll.

   Fix all actions automatically fix errors that have a clear fix
   that do not require user input. They should not suppress errors
   or perform unsafe fixes such as generating new types or
   classes.

   SourceOrganizeImports: [1119]CodeActionKind

   Base kind for an organize imports source action:
   source.organizeImports.

Constructors

   new CodeActionKind(value: string): [1120]CodeActionKind
        Parameter       Description
   value: string
         Returns        Description
   [1121]CodeActionKind

Properties

   value: string

   String value of the kind, e.g. "refactor.extract.function".

Methods

   append(parts: string): [1122]CodeActionKind

   Create a new kind by appending a more specific selector to the
   current kind.

   Does not modify the current kind.
        Parameter       Description
   parts: string
         Returns        Description
   [1123]CodeActionKind

   contains(other: [1124]CodeActionKind): boolean

   Checks if other is a sub-kind of this CodeActionKind.

   The kind "refactor.extract" for example contains
   "refactor.extract" and `"refactor.extract.function", but not
   "unicorn.refactor.extract", or "refactor.extractAll" or
   refactor.
            Parameter           Description
   other: [1125]CodeActionKind

                               Kind to check.
             Returns            Description
   boolean

   intersects(other: [1126]CodeActionKind): boolean

   Checks if this code action kind intersects other.

   The kind "refactor.extract" for example intersects refactor,
   "refactor.extract" and `"refactor.extract.function", but not
   "unicorn.refactor.extract", or "refactor.extractAll".
            Parameter           Description
   other: [1127]CodeActionKind

                               Kind to check.
             Returns            Description
   boolean

CodeActionProvider<T>

   The code action interface defines the contract between
   extensions and the [1128]lightbulb feature.

   [1128] https://code.visualstudio.com/docs/editor/editingevolved#_code-action

   A code action can be any command that is [1129]known to the
   system.

Methods

   provideCodeActions(document: [1130]TextDocument, range:
   [1131]Range | [1132]Selection, context:
   [1133]CodeActionContext, token: [1134]CancellationToken):
   [1135]ProviderResult<[1136]Command | [1137]CodeAction[]>

   Provide commands for the given document and range.
   Parameter Description
   document: [1138]TextDocument

   The document in which the command was invoked.
   range: [1139]Range | [1140]Selection

   The selector or range for which the command was invoked. This
   will always be a selection if there is a currently active
   editor.
   context: [1141]CodeActionContext

   Context carrying additional information.
   token: [1142]CancellationToken

   A cancellation token.
   Returns Description
   [1143]ProviderResult<[1144]Command | [1145]CodeAction[]>

   An array of commands, quick fixes, or refactorings or a
   thenable of such. The lack of a result can be signaled by
   returning undefined, null, or an empty array.

   resolveCodeAction(codeAction: T, token:
   [1146]CancellationToken): [1147]ProviderResult<T>

   Given a code action fill in its [1148]edit-property. Changes to
   all other properties, like title, are ignored. A code action
   that has an edit will not be resolved.

   Note that a code action provider that returns commands, not
   code actions, cannot successfully implement this function.
   Returning commands is deprecated and instead code actions
   should be returned.
   Parameter Description
   codeAction: T

   A code action.
   token: [1149]CancellationToken

   A cancellation token.
   Returns Description
   [1150]ProviderResult<T>

   The resolved code action or a thenable that resolves to such.
   It is OK to return the given item. When no result is returned,
   the given item will be used.

CodeActionProviderMetadata

   Metadata about the type of code actions that a
   [1151]CodeActionProvider provides.

Properties

   documentation?: [1152]ReadonlyArray<{command: [1153]Command,
   kind: [1154]CodeActionKind}>

   Static documentation for a class of code actions.

   Documentation from the provider is shown in the code actions
   menu if either:
     * Code actions of kind are requested by VS Code. In this
       case, VS Code will show the documentation that most closely
       matches the requested code action kind. For example, if a
       provider has documentation for both Refactor and
       RefactorExtract, when the user requests code actions for
       RefactorExtract, VS Code will use the documentation for
       RefactorExtract instead of the documentation for Refactor.
     * Any code actions of kind are returned by the provider.

   At most one documentation entry will be shown per provider.

   providedCodeActionKinds?:
   [1155]ReadonlyArray<[1156]CodeActionKind>

   List of [1157]CodeActionKinds that a [1158]CodeActionProvider
   may return.

   This list is used to determine if a given CodeActionProvider
   should be invoked or not. To avoid unnecessary computation,
   every CodeActionProvider should list use
   providedCodeActionKinds. The list of kinds may either be
   generic, such as [CodeActionKind.Refactor], or list out every
   kind provided, such as
   [CodeActionKind.Refactor.Extract.append('function'),
   CodeActionKind.Refactor.Extract.append('constant'), ...].

CodeLens

   A code lens represents a [1159]command that should be shown
   along with source text, like the number of references, a way to
   run tests, etc.

   A code lens is unresolved when no command is associated to it.
   For performance reasons the creation of a code lens and
   resolving should be done to two stages.
     * see - [1160]CodeLensProvider.provideCodeLenses

     * see - [1161]CodeLensProvider.resolveCodeLens

Constructors

   new CodeLens(range: [1162]Range, command?: [1163]Command):
   [1164]CodeLens

   Creates a new code lens object.
          Parameter                       Description
   range: [1165]Range

                           The range to which this code lens applies.
   command?: [1166]Command

                           The command associated to this code lens.
           Returns                        Description
   [1167]CodeLens

Properties

   command?: [1168]Command

   The command this code lens represents.

   isResolved: boolean

   true when there is a command associated.

   range: [1169]Range

   The range in which this code lens is valid. Should only span a
   single line.

CodeLensProvider<T>

   A code lens provider adds [1170]commands to source text. The
   commands will be shown as dedicated horizontal lines in between
   the source text.

Events

   onDidChangeCodeLenses?: [1171]Event<void>

   An optional event to signal that the code lenses from this
   provider have changed.

Methods

   provideCodeLenses(document: [1172]TextDocument, token:
   [1173]CancellationToken): [1174]ProviderResult<T[]>

   Compute a list of [1175]lenses. This call should return as fast
   as possible and if computing the commands is expensive
   implementors should only return code lens objects with the
   range set and implement [1176]resolve.
   Parameter Description
   document: [1177]TextDocument

   The document in which the command was invoked.
   token: [1178]CancellationToken

   A cancellation token.
   Returns Description
   [1179]ProviderResult<T[]>

   An array of code lenses or a thenable that resolves to such.
   The lack of a result can be signaled by returning undefined,
   null, or an empty array.

   resolveCodeLens(codeLens: T, token: [1180]CancellationToken):
   [1181]ProviderResult<T>

   This function will be called for each visible code lens,
   usually when scrolling and after calls to [1182]compute-lenses.
   Parameter Description
   codeLens: T

   Code lens that must be resolved.
   token: [1183]CancellationToken

   A cancellation token.
   Returns Description
   [1184]ProviderResult<T>

   The given, resolved code lens or thenable that resolves to
   such.

Color

   Represents a color in RGBA space.

Constructors

   new Color(red: number, green: number, blue: number, alpha:
   number): [1185]Color

   Creates a new color instance.
     Parameter       Description
   red: number

                 The red component.
   green: number

                 The green component.
   blue: number

                 The blue component.
   alpha: number

                 The alpha component.
      Returns        Description
   [1186]Color

Properties

   alpha: number

   The alpha component of this color in the range [0-1].

   blue: number

   The blue component of this color in the range [0-1].

   green: number

   The green component of this color in the range [0-1].

   red: number

   The red component of this color in the range [0-1].

ColorInformation

   Represents a color range from a document.

Constructors

   new ColorInformation(range: [1187]Range, color: [1188]Color):
   [1189]ColorInformation

   Creates a new color range.
   Parameter Description
   range: [1190]Range

   The range the color appears in. Must not be empty.
   color: [1191]Color

   The value of the color.
   Returns Description
   [1192]ColorInformation

Properties

   color: [1193]Color

   The actual color value for this color range.

   range: [1194]Range

   The range in the document where this color appears.

ColorPresentation

   A color presentation object describes how a [1195]color should
   be represented as text and what edits are required to refer to
   it from source code.

   For some languages one color can have multiple presentations,
   e.g. css can represent the color red with the constant Red, the
   hex-value #ff0000, or in rgba and hsla forms. In csharp other
   representations apply, e.g. System.Drawing.Color.Red.

Constructors

   new ColorPresentation(label: string): [1196]ColorPresentation

   Creates a new color presentation.
          Parameter                     Description
   label: string

                           The label of this color presentation.
           Returns                      Description
   [1197]ColorPresentation

Properties

   additionalTextEdits?: [1198]TextEdit[]

   An optional array of additional [1199]text edits that are
   applied when selecting this color presentation. Edits must not
   overlap with the main [1200]edit nor with themselves.

   label: string

   The label of this color presentation. It will be shown on the
   color picker header. By default this is also the text that is
   inserted when selecting this color presentation.

   textEdit?: [1201]TextEdit

   An [1202]edit which is applied to a document when selecting
   this presentation for the color. When falsy the [1203]label is
   used.

ColorTheme

   Represents a color theme.

Properties

   kind: [1204]ColorThemeKind

   The kind of this color theme: light, dark or high contrast.

ColorThemeKind

   Represents a color theme kind.

Enumeration members

   Dark
   2

   HighContrast
   3

   Light
   1

Command

   Represents a reference to a command. Provides a title which
   will be used to represent a command in the UI and, optionally,
   an array of arguments which will be passed to the command
   handler function when invoked.

Properties

   arguments?: any[]

   Arguments that the command handler should be invoked with.

   command: string

   The identifier of the actual command handler.
     * see - [1205]commands.registerCommand.

   title: string

   Title of the command, like save.

   tooltip?: string

   A tooltip for the command, when represented in the UI.

Comment

   A comment is displayed within the editor or the Comments Panel,
   depending on how it is provided.

Properties

   author: [1206]CommentAuthorInformation

   The [1207]author information of the comment

   body: string | [1208]MarkdownString

   The human-readable comment body

   contextValue?: string

   Context value of the comment. This can be used to contribute
   comment specific actions. For example, a comment is given a
   context value as editable. When contributing actions to
   comments/comment/title using menus extension point, you can
   specify context value for key comment in when expression like
   comment == editable.
    "contributes": {
        "menus": {
            "comments/comment/title": 
                {
                    "command": "extension.deleteComment",
                    "when": "comment == editable"
                }
            ]
        }
    }

   This will show action extension.deleteComment only for comments
   with contextValue is editable.

   label?: string

   Optional label describing the [1209]Comment Label will be
   rendered next to authorName if exists.

   mode: [1210]CommentMode

   [1211]Comment mode of the comment

   reactions?: [1212]CommentReaction[]

   Optional reactions of the [1213]comment

CommentAuthorInformation

   Author information of a [1214]comment

Properties

   iconPath?: [1215]Uri

   The optional icon path for the author

   name: string

   The display name of the author of the comment

CommentController

   A comment controller is able to provide [1216]comments support
   to the editor and provide users various ways to interact with
   comments.

Properties

   commentingRangeProvider?: [1217]CommentingRangeProvider

   Optional commenting range provider. Provide a list [1218]ranges
   which support commenting to any given resource uri.

   If not provided, users can leave comments in any document
   opened in the editor.

   id: string

   The id of this comment controller.

   label: string

   The human-readable label of this comment controller.

   options?: [1219]CommentOptions

   Comment controller options

   reactionHandler?: (comment: [1220]Comment, reaction:
   [1221]CommentReaction) => [1222]Promise<void>

   Optional reaction handler for creating and deleting reactions
   on a [1223]comment.

Methods

   createCommentThread(uri: [1224]Uri, range: [1225]Range,
   comments: [1226]Comment[]): [1227]CommentThread

   Create a [1228]comment thread. The comment thread will be
   displayed in visible text editors (if the resource matches) and
   Comments Panel once created.
   Parameter Description
   uri: [1229]Uri

   The uri of the document the thread has been created on.
   range: [1230]Range

   The range the comment thread is located within the document.
   comments: [1231]Comment[]

   The ordered comments of the thread.
   Returns Description
   [1232]CommentThread

   dispose(): void

   Dispose this comment controller.

   Once disposed, all [1233]comment threads created by this
   comment controller will also be removed from the editor and
   Comments Panel.
   Returns Description
   void

CommentingRangeProvider

   Commenting range provider for a [1234]comment controller.

Methods

   provideCommentingRanges(document: [1235]TextDocument, token:
   [1236]CancellationToken): [1237]ProviderResult<[1238]Range[]>

   Provide a list of ranges which allow new comment threads
   creation or null for a given document
                Parameter              Description
   document: [1239]TextDocument
   token: [1240]CancellationToken
                 Returns               Description
   [1241]ProviderResult<[1242]Range[]>

CommentMode

   Comment mode of a [1243]comment

Enumeration members

   Editing
   0

   Preview
   1

CommentOptions

   Represents a [1244]comment controller's [1245]options.

Properties

   placeHolder?: string

   An optional string to show as placeholder in the comment input
   box when it's focused.

   prompt?: string

   An optional string to show on the comment input box when it's
   collapsed.

CommentReaction

   Reactions of a [1246]comment

Properties

   authorHasReacted: boolean

   Whether the [1247]author of the comment has reacted to this
   reaction

   [1247] https://code.visualstudio.com/CommentAuthorInformation

   count: number

   The number of users who have reacted to this reaction

   iconPath: string | [1248]Uri

   Icon for the reaction shown in UI.

   label: string

   The human-readable label for the reaction

CommentReply

   Command argument for actions registered in
   comments/commentThread/context.

Properties

   text: string

   The value in the comment editor

   thread: [1249]CommentThread

   The active [1250]comment thread

CommentRule

   Describes how comments for a language work.

Properties

   blockComment?: [1251]CharacterPair

   The block comment character pair, like /* block comment *&#47;

   lineComment?: string

   The line comment token, like // this is a comment

CommentThread

   A collection of [1252]comments representing a conversation at a
   particular range in a document.

Properties

   canReply: boolean

   Whether the thread supports reply. Defaults to true.

   collapsibleState: [1253]CommentThreadCollapsibleState

   Whether the thread should be collapsed or expanded when opening
   the document. Defaults to Collapsed.

   comments: [1254]ReadonlyArray<[1255]Comment>

   The ordered comments of the thread.

   contextValue?: string

   Context value of the comment thread. This can be used to
   contribute thread specific actions. For example, a comment
   thread is given a context value as editable. When contributing
   actions to comments/commentThread/title using menus extension
   point, you can specify context value for key commentThread in
   when expression like commentThread == editable.
    "contributes": {
        "menus": {
            "comments/commentThread/title": 
                {
                    "command": "extension.deleteCommentThread",
                    "when": "commentThread == editable"
                }
            ]
        }
    }

   This will show action extension.deleteCommentThread only for
   comment threads with contextValue is editable.

   label?: string

   The optional human-readable label describing the [1256]Comment
   Thread

   range: [1257]Range

   The range the comment thread is located within the document.
   The thread icon will be shown at the first line of the range.

   uri: [1258]Uri

   The uri of the document the thread has been created on.

Methods

   dispose(): void

   Dispose this comment thread.

   Once disposed, this comment thread will be removed from visible
   editors and Comment Panel when appropriate.
   Returns Description
   void

CommentThreadCollapsibleState

   Collapsible state of a [1259]comment thread

Enumeration members

   Collapsed
   0

   Expanded
   1

CompletionContext

   Contains additional information about the context in which
   [1260]completion provider is triggered.

Properties

   triggerCharacter?: string

   Character that triggered the completion item provider.

   undefined if provider was not triggered by a character.

   The trigger character is already in the document when the
   completion provider is triggered.

   triggerKind: [1261]CompletionTriggerKind

   How the completion was triggered.

CompletionItem

   A completion item represents a text snippet that is proposed to
   complete text that is being typed.

   It is sufficient to create a completion item from just a
   [1262]label. In that case the completion item will replace the
   [1263]word until the cursor with the given label or
   [1264]insertText. Otherwise the given [1265]edit is used.

   When selecting a completion item in the editor its defined or
   synthesized text edit will be applied to all cursors/selections
   whereas [1266]additionalTextEdits will be applied as provided.
     * see - [1267]CompletionItemProvider.provideCompletionItems

     * see - [1268]CompletionItemProvider.resolveCompletionItem

Constructors

   new CompletionItem(label: string, kind?:
   [1269]CompletionItemKind): [1270]CompletionItem

   Creates a new completion item.

   Completion items must have at least a [1271]label which then
   will be used as insert text as well as for sorting and
   filtering.
              Parameter                       Description
   label: string

                                   The label of the completion.
   kind?: [1272]CompletionItemKind

                                   The [1273]kind of the completion.
               Returns                        Description
   [1274]CompletionItem

Properties

   additionalTextEdits?: [1275]TextEdit[]

   An optional array of additional [1276]text edits that are
   applied when selecting this completion. Edits must not overlap
   with the main [1277]edit nor with themselves.

   command?: [1278]Command

   An optional [1279]command that is executed after inserting this
   completion. Note that additional modifications to the current
   document should be described with the
   [1280]additionalTextEdits-property.

   commitCharacters?: string[]

   An optional set of characters that when pressed while this
   completion is active will accept it first and then type that
   character. Note that all commit characters should have length=1
   and that superfluous characters will be ignored.

   detail?: string

   A human-readable string with additional information about this
   item, like type or symbol information.

   documentation?: string | [1281]MarkdownString

   A human-readable string that represents a doc-comment.

   filterText?: string

   A string that should be used when filtering a set of completion
   items. When falsy the [1282]label is used.

   Note that the filter text is matched against the leading word
   (prefix) which is defined by the [1283]range-property. prefix.

   insertText?: string | [1284]SnippetString

   A string or snippet that should be inserted in a document when
   selecting this completion. When falsy the [1285]label is used.

   keepWhitespace?: boolean

   Keep whitespace of the [1286]insertText as is. By default, the
   editor adjusts leading whitespace of new lines so that they
   match the indentation of the line for which the item is
   accepted - setting this to true will prevent that.

   kind?: [1287]CompletionItemKind

   The kind of this completion item. Based on the kind an icon is
   chosen by the editor.

   label: string

   The label of this completion item. By default this is also the
   text that is inserted when selecting this completion.

   preselect?: boolean

   Select this item when showing. Note that only one completion
   item can be selected and that the editor decides which item
   that is. The rule is that the first item of those that match
   best is selected.

   range?: [1288]Range | {inserting: [1289]Range, replacing:
   [1290]Range}

   A range or a insert and replace range selecting the text that
   should be replaced by this completion item.

   When omitted, the range of the [1291]current word is used as
   replace-range and as insert-range the start of the
   [1292]current word to the current position is used.

   Note 1: A range must be a [1293]single line and it must
   [1294]contain the position at which completion has been
   [1295]requested. Note 2: A insert range must be a prefix of a
   replace range, that means it must be contained and starting at
   the same position.

   sortText?: string

   A string that should be used when comparing this item with
   other items. When falsy the [1296]label is used.

   Note that sortText is only used for the initial ordering of
   completion items. When having a leading word (prefix) ordering
   is based on how well completion match that prefix and the
   initial ordering is only used when completions match equal. The
   prefix is defined by the [1297]range-property and can therefore
   be different for each completion.

   tags?: [1298]ReadonlyArray<[1299]CompletionItemTag>

   Tags for this completion item.

   textEdit?: [1300]TextEdit
     * deprecated - Use CompletionItem.insertText and
       CompletionItem.range instead.

   An [1301]edit which is applied to a document when selecting
   this completion. When an edit is provided the value of
   [1302]insertText is ignored.

   The [1303]range of the edit must be single-line and on the same
   line completions were [1304]requested at.

CompletionItemKind

   Completion item kinds.

Enumeration members

   Class
   6

   Color
   15

   Constant
   20

   Constructor
   3

   Enum
   12

   EnumMember
   19

   Event
   22

   Field
   4

   File
   16

   Folder
   18

   Function
   2

   Interface
   7

   Issue
   26

   Keyword
   13

   Method
   1

   Module
   8

   Operator
   23

   Property
   9

   Reference
   17

   Snippet
   14

   Struct
   21

   Text
   0

   TypeParameter
   24

   Unit
   10

   User
   25

   Value
   11

   Variable
   5

CompletionItemProvider<T>

   The completion item provider interface defines the contract
   between extensions and [1305]IntelliSense.

   [1305] https://code.visualstudio.com/docs/editor/intellisense

   Providers can delay the computation of the [1306]detail and
   [1307]documentation properties by implementing the
   [1308]resolveCompletionItem-function. However, properties that
   are needed for the initial sorting and filtering, like
   sortText, filterText, insertText, and range, must not be
   changed during resolve.

   Providers are asked for completions either explicitly by a user
   gesture or -depending on the configuration- implicitly when
   typing words or trigger characters.

Methods

   provideCompletionItems(document: [1309]TextDocument, position:
   [1310]Position, token: [1311]CancellationToken, context:
   [1312]CompletionContext): [1313]ProviderResult<T[] |
   [1314]CompletionList<T>>

   Provide completion items for the given position and document.
   Parameter Description
   document: [1315]TextDocument

   The document in which the command was invoked.
   position: [1316]Position

   The position at which the command was invoked.
   token: [1317]CancellationToken

   A cancellation token.
   context: [1318]CompletionContext

   How the completion was triggered.
   Returns Description
   [1319]ProviderResult<T[] | [1320]CompletionList<T>>

   An array of completions, a [1321]completion list, or a thenable
   that resolves to either. The lack of a result can be signaled
   by returning undefined, null, or an empty array.

   resolveCompletionItem(item: T, token: [1322]CancellationToken):
   [1323]ProviderResult<T>

   Given a completion item fill in more data, like
   [1324]doc-comment or [1325]details.

   The editor will only resolve a completion item once.

   Note that this function is called when completion items are
   already showing in the UI or when an item has been selected for
   insertion. Because of that, no property that changes the
   presentation (label, sorting, filtering etc) or the (primary)
   insert behaviour ([1326]insertText) can be changed.

   This function may fill in [1327]additionalTextEdits. However,
   that means an item might be inserted before resolving is done
   and in that case the editor will do a best effort to still
   apply those additional text edits.
   Parameter Description
   item: T

   A completion item currently active in the UI.
   token: [1328]CancellationToken

   A cancellation token.
   Returns Description
   [1329]ProviderResult<T>

   The resolved completion item or a thenable that resolves to of
   such. It is OK to return the given item. When no result is
   returned, the given item will be used.

CompletionItemTag

   Completion item tags are extra annotations that tweak the
   rendering of a completion item.

Enumeration members

   Deprecated
   1

CompletionList<T>

   Represents a collection of [1330]completion items to be
   presented in the editor.

Constructors

   new CompletionList(items?: T[], isIncomplete?: boolean):
   [1331]CompletionList

   Creates a new completion list.
         Parameter               Description
   items?: T[]

                          The completion items.
   isIncomplete?: boolean

                          The list is not complete.
          Returns                Description
   [1332]CompletionList

Properties

   isIncomplete?: boolean

   This list is not complete. Further typing should result in
   recomputing this list.

   items: T[]

   The completion items.

CompletionTriggerKind

   How a [1333]completion provider was triggered

Enumeration members

   Invoke
   0

   TriggerCharacter
   1

   TriggerForIncompleteCompletions
   2

ConfigurationChangeEvent

   An event describing the change in Configuration

Methods

   affectsConfiguration(section: string, scope?:
   [1334]ConfigurationScope): boolean

   Checks if the given section has changed. If scope is provided,
   checks if the section has changed for resources under the given
   scope.
   Parameter Description
   section: string

   Configuration name, supports dotted names.
   scope?: [1335]ConfigurationScope

   A scope in which to check.
   Returns Description
   boolean

   true if the given section has changed.

ConfigurationScope

   The configuration scope which can be a a 'resource' or a
   languageId or both or a '[1336]TextDocument' or a
   '[1337]WorkspaceFolder'

   ConfigurationScope: [1338]Uri | [1339]TextDocument |
   [1340]WorkspaceFolder | {languageId: string, uri: [1341]Uri}

ConfigurationTarget

   The configuration target

Enumeration members

   Global
   1

   Workspace
   2

   WorkspaceFolder
   3

CustomDocument

   Represents a custom document used by a
   [1342]CustomEditorProvider.

   Custom documents are only used within a given
   CustomEditorProvider. The lifecycle of a CustomDocument is
   managed by VS Code. When no more references remain to a
   CustomDocument, it is disposed of.

Properties

   uri: [1343]Uri

   The associated uri for this document.

Methods

   dispose(): void

   Dispose of the custom document.

   This is invoked by VS Code when there are no more references to
   a given CustomDocument (for example when all editors associated
   with the document have been closed.)
   Returns Description
   void

CustomDocumentBackup

   A backup for an [1344]CustomDocument.

Properties

   id: string

   Unique identifier for the backup.

   This id is passed back to your extension in openCustomDocument
   when opening a custom editor from a backup.

Methods

   delete(): void

   Delete the current backup.

   This is called by VS Code when it is clear the current backup
   is no longer needed, such as when a new backup is made or when
   the file is saved.
   Returns Description
   void

CustomDocumentBackupContext

   Additional information used to implement
   [1345]CustomEditableDocument.backup.

Properties

   destination: [1346]Uri

   Suggested file location to write the new backup.

   Note that your extension is free to ignore this and use its own
   strategy for backup.

   If the editor is for a resource from the current workspace,
   destination will point to a file inside
   ExtensionContext.storagePath. The parent folder of destination
   may not exist, so make sure to created it before writing the
   backup to this location.

CustomDocumentContentChangeEvent<T>

   Event triggered by extensions to signal to VS Code that the
   content of a [1347]CustomDocument has changed.
     * see -
       [1348]CustomDocumentProvider.onDidChangeCustomDocument.

Properties

   document: T

   The document that the change is for.

CustomDocumentEditEvent<T>

   Event triggered by extensions to signal to VS Code that an edit
   has occurred on an [1349]CustomDocument.
     * see -
       [1350]CustomDocumentProvider.onDidChangeCustomDocument.

Properties

   document: T

   The document that the edit is for.

   label?: string

   Display name describing the edit.

   This will be shown to users in the UI for undo/redo operations.

Methods

   redo(): [1351]Thenable<void> | void

   Redo the edit operation.

   This is invoked by VS Code when the user redoes this edit. To
   implement redo, your extension should restore the document and
   editor to the state they were in just after this edit was added
   to VS Code's internal edit stack by onDidChangeCustomDocument.
             Returns           Description
   [1352]Thenable<void> | void

   undo(): [1353]Thenable<void> | void

   Undo the edit operation.

   This is invoked by VS Code when the user undoes this edit. To
   implement undo, your extension should restore the document and
   editor to the state they were in just before this edit was
   added to VS Code's internal edit stack by
   onDidChangeCustomDocument.
             Returns           Description
   [1354]Thenable<void> | void

CustomDocumentOpenContext

   Additional information about the opening custom document.

Properties

   backupId?: string

   The id of the backup to restore the document from or undefined
   if there is no backup.

   If this is provided, your extension should restore the editor
   from the backup instead of reading the file from the user's
   workspace.

CustomEditorProvider<T>

   Provider for editable custom editors that use a custom document
   model.

   Custom editors use [1355]CustomDocument as their document model
   instead of a [1356]TextDocument. This gives extensions full
   control over actions such as edit, save, and backup.

   You should use this type of custom editor when dealing with
   binary files or more complex scenarios. For simple text based
   documents, use [1357]CustomTextEditorProvider instead.

Events

   onDidChangeCustomDocument:
   [1358]Event<[1359]CustomDocumentEditEvent<T>> |
   [1360]Event<[1361]CustomDocumentContentChangeEvent<T>>

   Signal that an edit has occurred inside a custom editor.

   This event must be fired by your extension whenever an edit
   happens in a custom editor. An edit can be anything from
   changing some text, to cropping an image, to reordering a list.
   Your extension is free to define what an edit is and what data
   is stored on each edit.

   Firing onDidChange causes VS Code to mark the editors as being
   dirty. This is cleared when the user either saves or reverts
   the file.

   Editors that support undo/redo must fire a
   CustomDocumentEditEvent whenever an edit happens. This allows
   users to undo and redo the edit using VS Code's standard VS
   Code keyboard shortcuts. VS Code will also mark the editor as
   no longer being dirty if the user undoes all edits to the last
   saved state.

   Editors that support editing but cannot use VS Code's standard
   undo/redo mechanism must fire a
   CustomDocumentContentChangeEvent. The only way for a user to
   clear the dirty state of an editor that does not support
   undo/redo is to either save or revert the file.

   An editor should only ever fire CustomDocumentEditEvent events,
   or only ever fire CustomDocumentContentChangeEvent events.

Methods

   backupCustomDocument(document: T, context:
   [1362]CustomDocumentBackupContext, cancellation:
   [1363]CancellationToken):
   [1364]Thenable<[1365]CustomDocumentBackup>

   Back up a dirty custom document.

   Backups are used for hot exit and to prevent data loss. Your
   backup method should persist the resource in its current state,
   i.e. with the edits applied. Most commonly this means saving
   the resource to disk in the ExtensionContext.storagePath. When
   VS Code reloads and your custom editor is opened for a
   resource, your extension should first check to see if any
   backups exist for the resource. If there is a backup, your
   extension should load the file contents from there instead of
   from the resource in the workspace.

   backup is triggered approximately one second after the the user
   stops editing the document. If the user rapidly edits the
   document, backup will not be invoked until the editing stops.

   backup is not invoked when auto save is enabled (since auto
   save already persists the resource).
   Parameter Description
   document: T

   Document to backup.
   context: [1366]CustomDocumentBackupContext

   Information that can be used to backup the document.
   cancellation: [1367]CancellationToken

   Token that signals the current backup since a new backup is
   coming in. It is up to your extension to decided how to respond
   to cancellation. If for example your extension is backing up a
   large file in an operation that takes time to complete, your
   extension may decide to finish the ongoing backup rather than
   cancelling it to ensure that VS Code has some valid backup.
   Returns Description
   [1368]Thenable<[1369]CustomDocumentBackup>

   openCustomDocument(uri: [1370]Uri, openContext:
   [1371]CustomDocumentOpenContext, token:
   [1372]CancellationToken): [1373]Thenable<T> | T

   Create a new document for a given resource.

   openCustomDocument is called when the first time an editor for
   a given resource is opened. The opened document is then passed
   to resolveCustomEditor so that the editor can be shown to the
   user.

   Already opened CustomDocument are re-used if the user opened
   additional editors. When all editors for a given resource are
   closed, the CustomDocument is disposed of. Opening an editor at
   this point will trigger another call to openCustomDocument.
   Parameter Description
   uri: [1374]Uri

   Uri of the document to open.
   openContext: [1375]CustomDocumentOpenContext

   Additional information about the opening custom document.
   token: [1376]CancellationToken

   A cancellation token that indicates the result is no longer
   needed.
   Returns Description
   [1377]Thenable<T> | T

   The custom document.

   resolveCustomEditor(document: T, webviewPanel:
   [1378]WebviewPanel, token: [1379]CancellationToken):
   [1380]Thenable<void> | void

   Resolve a custom editor for a given resource.

   This is called whenever the user opens a new editor for this
   CustomEditorProvider.
   Parameter Description
   document: T

   Document for the resource being resolved.
   webviewPanel: [1381]WebviewPanel

   The webview panel used to display the editor UI for this
   resource.

   During resolve, the provider must fill in the initial html for
   the content webview panel and hook up all the event listeners
   on it that it is interested in. The provider can also hold onto
   the WebviewPanel to use later for example in a command. See
   [1382]WebviewPanel for additional details.
   token: [1383]CancellationToken

   A cancellation token that indicates the result is no longer
   needed.
   Returns Description
   [1384]Thenable<void> | void

   Optional thenable indicating that the custom editor has been
   resolved.

   revertCustomDocument(document: T, cancellation:
   [1385]CancellationToken): [1386]Thenable<void>

   Revert a custom document to its last saved state.

   This method is invoked by VS Code when the user triggers File:
   Revert File in a custom editor. (Note that this is only used
   using VS Code's File: Revert File command and not on a git
   revert of the file).

   To implement revert, the implementer must make sure all editor
   instances (webviews) for document are displaying the document
   in the same state is saved in. This usually means reloading the
   file from the workspace.
   Parameter Description
   document: T

   Document to revert.
   cancellation: [1387]CancellationToken

   Token that signals the revert is no longer required.
   Returns Description
   [1388]Thenable<void>

   Thenable signaling that the change has completed.

   saveCustomDocument(document: T, cancellation:
   [1389]CancellationToken): [1390]Thenable<void>

   Save a custom document.

   This method is invoked by VS Code when the user saves a custom
   editor. This can happen when the user triggers save while the
   custom editor is active, by commands such as save all, or by
   auto save if enabled.

   To implement save, the implementer must persist the custom
   editor. This usually means writing the file data for the custom
   document to disk. After save completes, any associated editor
   instances will no longer be marked as dirty.
   Parameter Description
   document: T

   Document to save.
   cancellation: [1391]CancellationToken

   Token that signals the save is no longer required (for example,
   if another save was triggered).
   Returns Description
   [1392]Thenable<void>

   Thenable signaling that saving has completed.

   saveCustomDocumentAs(document: T, destination: [1393]Uri,
   cancellation: [1394]CancellationToken): [1395]Thenable<void>

   Save a custom document to a different location.

   This method is invoked by VS Code when the user triggers 'save
   as' on a custom editor. The implementer must persist the custom
   editor to destination.

   When the user accepts save as, the current editor is be
   replaced by an non-dirty editor for the newly saved file.
   Parameter Description
   document: T

   Document to save.
   destination: [1396]Uri

   Location to save to.
   cancellation: [1397]CancellationToken

   Token that signals the save is no longer required.
   Returns Description
   [1398]Thenable<void>

   Thenable signaling that saving has completed.

CustomExecution

   Class used to execute an extension callback as a task.

Constructors

   new CustomExecution(callback: (resolvedDefinition:
   [1399]TaskDefinition) => [1400]Thenable<[1401]Pseudoterminal>):
   [1402]CustomExecution

   Constructs a CustomExecution task object. The callback will be
   executed the task is run, at which point the extension should
   return the Pseudoterminal it will "run in". The task should
   wait to do further execution until [1403]Pseudoterminal.open is
   called. Task cancellation should be handled using
   [1404]Pseudoterminal.close. When the task is complete fire
   [1405]Pseudoterminal.onDidClose.
   Parameter Description
   callback: (resolvedDefinition: [1406]TaskDefinition) =>
   [1407]Thenable<[1408]Pseudoterminal>

   The callback that will be called when the task is started by a
   user. Any ${} style variables that were in the task definition
   will be resolved and passed into the callback.
   Returns Description
   [1409]CustomExecution

CustomReadonlyEditorProvider<T>

   Provider for readonly custom editors that use a custom document
   model.

   Custom editors use [1410]CustomDocument as their document model
   instead of a [1411]TextDocument.

   You should use this type of custom editor when dealing with
   binary files or more complex scenarios. For simple text based
   documents, use [1412]CustomTextEditorProvider instead.

Methods

   openCustomDocument(uri: [1413]Uri, openContext:
   [1414]CustomDocumentOpenContext, token:
   [1415]CancellationToken): [1416]Thenable<T> | T

   Create a new document for a given resource.

   openCustomDocument is called when the first time an editor for
   a given resource is opened. The opened document is then passed
   to resolveCustomEditor so that the editor can be shown to the
   user.

   Already opened CustomDocument are re-used if the user opened
   additional editors. When all editors for a given resource are
   closed, the CustomDocument is disposed of. Opening an editor at
   this point will trigger another call to openCustomDocument.
   Parameter Description
   uri: [1417]Uri

   Uri of the document to open.
   openContext: [1418]CustomDocumentOpenContext

   Additional information about the opening custom document.
   token: [1419]CancellationToken

   A cancellation token that indicates the result is no longer
   needed.
   Returns Description
   [1420]Thenable<T> | T

   The custom document.

   resolveCustomEditor(document: T, webviewPanel:
   [1421]WebviewPanel, token: [1422]CancellationToken):
   [1423]Thenable<void> | void

   Resolve a custom editor for a given resource.

   This is called whenever the user opens a new editor for this
   CustomEditorProvider.
   Parameter Description
   document: T

   Document for the resource being resolved.
   webviewPanel: [1424]WebviewPanel

   The webview panel used to display the editor UI for this
   resource.

   During resolve, the provider must fill in the initial html for
   the content webview panel and hook up all the event listeners
   on it that it is interested in. The provider can also hold onto
   the WebviewPanel to use later for example in a command. See
   [1425]WebviewPanel for additional details.
   token: [1426]CancellationToken

   A cancellation token that indicates the result is no longer
   needed.
   Returns Description
   [1427]Thenable<void> | void

   Optional thenable indicating that the custom editor has been
   resolved.

CustomTextEditorProvider

   Provider for text based custom editors.

   Text based custom editors use a [1428]TextDocument as their
   data model. This considerably simplifies implementing a custom
   editor as it allows VS Code to handle many common operations
   such as undo and backup. The provider is responsible for
   synchronizing text changes between the webview and the
   TextDocument.

Methods

   resolveCustomTextEditor(document: [1429]TextDocument,
   webviewPanel: [1430]WebviewPanel, token:
   [1431]CancellationToken): [1432]Thenable<void> | void

   Resolve a custom editor for a given text resource.

   This is called when a user first opens a resource for a
   CustomTextEditorProvider, or if they reopen an existing editor
   using this CustomTextEditorProvider.
   Parameter Description
   document: [1433]TextDocument

   Document for the resource to resolve.
   webviewPanel: [1434]WebviewPanel

   The webview panel used to display the editor UI for this
   resource.

   During resolve, the provider must fill in the initial html for
   the content webview panel and hook up all the event listeners
   on it that it is interested in. The provider can also hold onto
   the WebviewPanel to use later for example in a command. See
   [1435]WebviewPanel for additional details.
   token: [1436]CancellationToken

   A cancellation token that indicates the result is no longer
   needed.
   Returns Description
   [1437]Thenable<void> | void

   Thenable indicating that the custom editor has been resolved.

DebugAdapter

   A debug adapter that implements the Debug Adapter Protocol can
   be registered with VS Code if it implements the DebugAdapter
   interface.

Events

   onDidSendMessage: [1438]Event<[1439]DebugProtocolMessage>

   An event which fires after the debug adapter has sent a Debug
   Adapter Protocol message to VS Code. Messages can be requests,
   responses, or events.

Static

   from(...disposableLikes: {dispose: () => any}[]):
   [1440]Disposable

   Combine many disposable-likes into one. Use this method when
   having objects with a dispose function which are not instances
   of Disposable.
   Parameter Description
   ...disposableLikes: {dispose: () => any}[]

   Objects that have at least a dispose-function member.
   Returns Description
   [1441]Disposable

   Returns a new disposable which, upon dispose, will dispose all
   provided disposables.

Constructors

   new DebugAdapter(callOnDispose: [1442]Function):
   [1443]DebugAdapter

   Creates a new Disposable calling the provided function on
   dispose.
             Parameter                      Description
   callOnDispose: [1444]Function

                                 Function that disposes something.
              Returns                       Description
   [1445]DebugAdapter

Methods

   dispose(): any

   Dispose this object.
   Returns Description
   any

   handleMessage(message: [1446]DebugProtocolMessage): void

   Handle a Debug Adapter Protocol message. Messages can be
   requests, responses, or events. Results or errors are returned
   via onSendMessage events.
                Parameter                        Description
   message: [1447]DebugProtocolMessage

                                       A Debug Adapter Protocol message
                 Returns                         Description
   void

DebugAdapterDescriptor

   DebugAdapterDescriptor: [1448]DebugAdapterExecutable |
   [1449]DebugAdapterServer | [1450]DebugAdapterNamedPipeServer |
   [1451]DebugAdapterInlineImplementation

DebugAdapterDescriptorFactory

Methods

   createDebugAdapterDescriptor(session: [1452]DebugSession,
   executable: [1453]DebugAdapterExecutable | undefined):
   [1454]ProviderResult<[1455]DebugAdapterDescriptor>

   'createDebugAdapterDescriptor' is called at the start of a
   debug session to provide details about the debug adapter to
   use. These details must be returned as objects of type
   [1456]DebugAdapterDescriptor. Currently two types of debug
   adapters are supported:
     * a debug adapter executable is specified as a command path
       and arguments (see [1457]DebugAdapterExecutable),
     * a debug adapter server reachable via a communication port
       (see [1458]DebugAdapterServer). If the method is not
       implemented the default behavior is this:
       createDebugAdapter(session: DebugSession, executable:
       DebugAdapterExecutable) { if (typeof
       session.configuration.debugServer === 'number') {
  return new DebugAdapterServer(session.configuration.debugServer);

       } return executable; }

   Parameter Description
   session: [1459]DebugSession

   The [1460]debug session for which the debug adapter will be
   used.
   executable: [1461]DebugAdapterExecutable | undefined

   The debug adapter's executable information as specified in the
   package.json (or undefined if no such information exists).
   Returns Description
   [1462]ProviderResult<[1463]DebugAdapterDescriptor>

   a [1464]debug adapter descriptor or undefined.

DebugAdapterExecutable

   Represents a debug adapter executable and optional arguments
   and runtime options passed to it.

Constructors

   new DebugAdapterExecutable(command: string, args?: string[],
   options?: [1465]DebugAdapterExecutableOptions):
   [1466]DebugAdapterExecutable

   Creates a description for a debug adapter based on an
   executable program.
   Parameter Description
   command: string

   The command or executable path that implements the debug
   adapter.
   args?: string[]

   Optional arguments to be passed to the command or executable.
   options?: [1467]DebugAdapterExecutableOptions

   Optional options to be used when starting the command or
   executable.
   Returns Description
   [1468]DebugAdapterExecutable

Properties

   args: string[]

   The arguments passed to the debug adapter executable. Defaults
   to an empty array.

   command: string

   The command or path of the debug adapter executable. A command
   must be either an absolute path of an executable or the name of
   an command to be looked up via the PATH environment variable.
   The special value 'node' will be mapped to VS Code's built-in
   Node.js runtime.

   options?: [1469]DebugAdapterExecutableOptions

   Optional options to be used when the debug adapter is started.
   Defaults to undefined.

DebugAdapterExecutableOptions

   Options for a debug adapter executable.

Properties

   cwd?: string

   The current working directory for the executed debug adapter.

   env?:

   The additional environment of the executed program or shell. If
   omitted the parent process' environment is used. If provided it
   is merged with the parent process' environment.

DebugAdapterInlineImplementation

   A debug adapter descriptor for an inline implementation.

Constructors

   new DebugAdapterInlineImplementation(implementation:
   [1470]DebugAdapter): [1471]DebugAdapterInlineImplementation

   Create a descriptor for an inline implementation of a debug
   adapter.
                 Parameter                Description
   implementation: [1472]DebugAdapter
                  Returns                 Description
   [1473]DebugAdapterInlineImplementation

DebugAdapterNamedPipeServer

   Represents a debug adapter running as a Named Pipe (on
   Windows)/UNIX Domain Socket (on non-Windows) based server.

Constructors

   new DebugAdapterNamedPipeServer(path: string):
   [1474]DebugAdapterNamedPipeServer

   Create a description for a debug adapter running as a socket
   based server.
               Parameter             Description
   path: string
                Returns              Description
   [1475]DebugAdapterNamedPipeServer

Properties

   path: string

   The path to the NamedPipe/UNIX Domain Socket.

DebugAdapterServer

   Represents a debug adapter running as a socket based server.

Constructors

   new DebugAdapterServer(port: number, host?: string):
   [1476]DebugAdapterServer

   Create a description for a debug adapter running as a socket
   based server.
          Parameter         Description
   port: number
   host?: string
           Returns          Description
   [1477]DebugAdapterServer

Properties

   host?: string

   The host.

   port: number

   The port.

DebugAdapterTracker

   A Debug Adapter Tracker is a means to track the communication
   between VS Code and a Debug Adapter.

Events

   onDidSendMessage(message: any): void

   The debug adapter has sent a Debug Adapter Protocol message to
   VS Code.
    Parameter   Description
   message: any
     Returns    Description
   void

   onWillReceiveMessage(message: any): void

   The debug adapter is about to receive a Debug Adapter Protocol
   message from VS Code.
    Parameter   Description
   message: any
     Returns    Description
   void

   onWillStartSession(): void

   A session with the debug adapter is about to be started.
   Returns Description
   void

   onWillStopSession(): void

   The debug adapter session is about to be stopped.
   Returns Description
   void

Methods

   onError(error: [1478]Error): void

   An error with the debug adapter has occurred.
       Parameter      Description
   error: [1479]Error
        Returns       Description
   void

   onExit(code: number | undefined, signal: string | undefined):
   void

   The debug adapter has exited with the given exit code or
   signal.
           Parameter          Description
   code: number | undefined
   signal: string | undefined
            Returns           Description
   void

DebugAdapterTrackerFactory

Methods

   createDebugAdapterTracker(session: [1480]DebugSession):
   [1481]ProviderResult<[1482]DebugAdapterTracker>

   The method 'createDebugAdapterTracker' is called at the start
   of a debug session in order to return a "tracker" object that
   provides read-access to the communication between VS Code and a
   debug adapter.
   Parameter Description
   session: [1483]DebugSession

   The [1484]debug session for which the debug adapter tracker
   will be used.
   Returns Description
   [1485]ProviderResult<[1486]DebugAdapterTracker>

   A [1487]debug adapter tracker or undefined.

DebugConfiguration

   Configuration for a debug session.

Properties

   name: string

   The name of the debug session.

   request: string

   The request type of the debug session.

   type: string

   The type of the debug session.

DebugConfigurationProvider

   A debug configuration provider allows to add debug
   configurations to the debug service and to resolve launch
   configurations before they are used to start a debug session. A
   debug configuration provider is registered via
   #debug.registerDebugConfigurationProvider.

Methods

   provideDebugConfigurations(folder: [1488]WorkspaceFolder |
   undefined, token?: [1489]CancellationToken):
   [1490]ProviderResult<[1491]DebugConfiguration[]>

   Provides [1492]debug configuration to the debug service. If
   more than one debug configuration provider is registered for
   the same type, debug configurations are concatenated in
   arbitrary order.
   Parameter Description
   folder: [1493]WorkspaceFolder | undefined

   The workspace folder for which the configurations are used or
   undefined for a folderless setup.
   token?: [1494]CancellationToken

   A cancellation token.
   Returns Description
   [1495]ProviderResult<[1496]DebugConfiguration[]>

   An array of [1497]debug configurations.

   resolveDebugConfiguration(folder: [1498]WorkspaceFolder |
   undefined, debugConfiguration: [1499]DebugConfiguration,
   token?: [1500]CancellationToken):
   [1501]ProviderResult<[1502]DebugConfiguration>

   Resolves a [1503]debug configuration by filling in missing
   values or by adding/changing/removing attributes. If more than
   one debug configuration provider is registered for the same
   type, the resolveDebugConfiguration calls are chained in
   arbitrary order and the initial debug configuration is piped
   through the chain. Returning the value 'undefined' prevents the
   debug session from starting. Returning the value 'null'
   prevents the debug session from starting and opens the
   underlying debug configuration instead.
   Parameter Description
   folder: [1504]WorkspaceFolder | undefined

   The workspace folder from which the configuration originates
   from or undefined for a folderless setup.
   debugConfiguration: [1505]DebugConfiguration

   The [1506]debug configuration to resolve.
   token?: [1507]CancellationToken

   A cancellation token.
   Returns Description
   [1508]ProviderResult<[1509]DebugConfiguration>

   The resolved debug configuration or undefined or null.

   resolveDebugConfigurationWithSubstitutedVariables(folder:
   [1510]WorkspaceFolder | undefined, debugConfiguration:
   [1511]DebugConfiguration, token?: [1512]CancellationToken):
   [1513]ProviderResult<[1514]DebugConfiguration>

   This hook is directly called after 'resolveDebugConfiguration'
   but with all variables substituted. It can be used to resolve
   or verify a [1515]debug configuration by filling in missing
   values or by adding/changing/removing attributes. If more than
   one debug configuration provider is registered for the same
   type, the 'resolveDebugConfigurationWithSubstitutedVariables'
   calls are chained in arbitrary order and the initial debug
   configuration is piped through the chain. Returning the value
   'undefined' prevents the debug session from starting. Returning
   the value 'null' prevents the debug session from starting and
   opens the underlying debug configuration instead.
   Parameter Description
   folder: [1516]WorkspaceFolder | undefined

   The workspace folder from which the configuration originates
   from or undefined for a folderless setup.
   debugConfiguration: [1517]DebugConfiguration

   The [1518]debug configuration to resolve.
   token?: [1519]CancellationToken

   A cancellation token.
   Returns Description
   [1520]ProviderResult<[1521]DebugConfiguration>

   The resolved debug configuration or undefined or null.

DebugConfigurationProviderTriggerKind

   A DebugConfigurationProviderTriggerKind specifies when the
   provideDebugConfigurations method of a
   DebugConfigurationProvider is triggered. Currently there are
   two situations: to provide the initial debug configurations for
   a newly created launch.json or to provide dynamically generated
   debug configurations when the user asks for them through the UI
   (e.g. via the "Select and Start Debugging" command). A trigger
   kind is used when registering a DebugConfigurationProvider with
   #debug.registerDebugConfigurationProvider.

Enumeration members

   Dynamic
   2

   Initial
   1

DebugConsole

   Represents the debug console.

Methods

   append(value: string): void

   Append the given value to the debug console.
     Parameter                   Description
   value: string

                 A string, falsy values will not be printed.
      Returns                    Description
   void

   appendLine(value: string): void

   Append the given value and a line feed character to the debug
   console.
     Parameter                 Description
   value: string

                 A string, falsy values will be printed.
      Returns                  Description
   void

DebugConsoleMode

   Debug console mode used by debug session, see [1522]options.

Enumeration members

   MergeWithParent
   1

   Separate
   0

DebugProtocolBreakpoint

   A DebugProtocolBreakpoint is an opaque stand-in type for the
   [1523]Breakpoint type defined in the Debug Adapter Protocol.

   [1523] https://microsoft.github.io/debug-adapter-protocol/specification#Types_Breakpoint

DebugProtocolMessage

   A DebugProtocolMessage is an opaque stand-in type for the
   [1524]ProtocolMessage type defined in the Debug Adapter
   Protocol.

   [1524] https://microsoft.github.io/debug-adapter-protocol/specification#Base_Protocol_ProtocolMessage

DebugProtocolSource

   A DebugProtocolSource is an opaque stand-in type for the
   [1525]Source type defined in the Debug Adapter Protocol.

   [1525] https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source

DebugSession

   A debug session.

Properties

   configuration: [1526]DebugConfiguration

   The "resolved" [1527]debug configuration of this session.
   "Resolved" means that
     * all variables have been substituted and
     * platform specific attribute sections have been "flattened"
       for the matching platform and removed for non-matching
       platforms.

   id: string

   The unique ID of this debug session.

   name: string

   The debug session's name is initially taken from the
   [1528]debug configuration. Any changes will be properly
   reflected in the UI.

   type: string

   The debug session's type from the [1529]debug configuration.

   workspaceFolder: [1530]WorkspaceFolder | undefined

   The workspace folder of this session or undefined for a
   folderless setup.

Methods

   customRequest(command: string, args?: any): [1531]Thenable<any>

   Send a custom request to the debug adapter.
        Parameter      Description
   command: string
   args?: any
         Returns       Description
   [1532]Thenable<any>

   getDebugProtocolBreakpoint(breakpoint: [1533]Breakpoint):
   [1534]Thenable<[1535]DebugProtocolBreakpoint | undefined>

   Maps a VS Code breakpoint to the corresponding Debug Adapter
   Protocol (DAP) breakpoint that is managed by the debug adapter
   of the debug session. If no DAP breakpoint exists (either
   because the VS Code breakpoint was not yet registered or
   because the debug adapter is not interested in the breakpoint),
   the value undefined is returned.
   Parameter Description
   breakpoint: [1536]Breakpoint

   A VS Code [1537]breakpoint.
   Returns Description
   [1538]Thenable<[1539]DebugProtocolBreakpoint | undefined>

   A promise that resolves to the Debug Adapter Protocol
   breakpoint or undefined.

DebugSessionCustomEvent

   A custom Debug Adapter Protocol event received from a
   [1540]debug session.

Properties

   body?: any

   Event specific information.

   event: string

   Type of event.

   session: [1541]DebugSession

   The [1542]debug session for which the custom event was
   received.

DebugSessionOptions

   Options for [1543]starting a debug session.

Properties

   compact?: boolean

   Controls if the debug session's parent session is shown in the
   CALL STACK view even if it has only a single child. By default,
   the debug session will never hide its parent. If compact is
   true, debug sessions with a single child are hidden in the CALL
   STACK view to make the tree more compact.

   consoleMode?: [1544]DebugConsoleMode

   Controls whether this session should have a separate debug
   console or share it with the parent session. Has no effect for
   sessions which do not have a parent session. Defaults to
   Separate.

   noDebug?: boolean

   Controls whether this session should run without debugging,
   thus ignoring breakpoints. When this property is not specified,
   the value from the parent session (if there is one) is used.

   parentSession?: [1545]DebugSession

   When specified the newly created debug session is registered as
   a "child" session of this "parent" debug session.

Declaration

   The declaration of a symbol representation as one or many
   [1546]locations or [1547]location links.

   Declaration: [1548]Location | [1549]Location[] |
   [1550]LocationLink[]

DeclarationProvider

   The declaration provider interface defines the contract between
   extensions and the go to declaration feature.

Methods

   provideDeclaration(document: [1551]TextDocument, position:
   [1552]Position, token: [1553]CancellationToken):
   [1554]ProviderResult<[1555]Declaration>

   Provide the declaration of the symbol at the given position and
   document.
   Parameter Description
   document: [1556]TextDocument

   The document in which the command was invoked.
   position: [1557]Position

   The position at which the command was invoked.
   token: [1558]CancellationToken

   A cancellation token.
   Returns Description
   [1559]ProviderResult<[1560]Declaration>

   A declaration or a thenable that resolves to such. The lack of
   a result can be signaled by returning undefined or null.

DecorationInstanceRenderOptions

Properties

   after?: [1561]ThemableDecorationAttachmentRenderOptions

   Defines the rendering options of the attachment that is
   inserted after the decorated text.

   before?: [1562]ThemableDecorationAttachmentRenderOptions

   Defines the rendering options of the attachment that is
   inserted before the decorated text.

   dark?: [1563]ThemableDecorationInstanceRenderOptions

   Overwrite options for dark themes.

   light?: [1564]ThemableDecorationInstanceRenderOptions

   Overwrite options for light themes.

DecorationOptions

   Represents options for a specific decoration in a
   [1565]decoration set.

Properties

   hoverMessage?: [1566]MarkedString | [1567]MarkedString[]

   A message that should be rendered when hovering over the
   decoration.

   range: [1568]Range

   Range to which this decoration is applied. The range must not
   be empty.

   renderOptions?: [1569]DecorationInstanceRenderOptions

   Render options applied to the current decoration. For
   performance reasons, keep the number of decoration specific
   options small, and use decoration types wherever possible.

DecorationRangeBehavior

   Describes the behavior of decorations when typing/editing at
   their edges.

Enumeration members

   ClosedClosed
   1

   ClosedOpen
   3

   OpenClosed
   2

   OpenOpen
   0

DecorationRenderOptions

   Represents rendering styles for a [1570]text editor decoration.

Properties

   after?: [1571]ThemableDecorationAttachmentRenderOptions

   Defines the rendering options of the attachment that is
   inserted after the decorated text.

   backgroundColor?: string | [1572]ThemeColor

   Background color of the decoration. Use rgba() and define
   transparent background colors to play well with other
   decorations. Alternatively a color from the color registry can
   be [1573]referenced.

   before?: [1574]ThemableDecorationAttachmentRenderOptions

   Defines the rendering options of the attachment that is
   inserted before the decorated text.

   border?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   borderColor?: string | [1575]ThemeColor

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'border' for setting one or more of the
   individual border properties.

   borderRadius?: string

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'border' for setting one or more of the
   individual border properties.

   borderSpacing?: string

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'border' for setting one or more of the
   individual border properties.

   borderStyle?: string

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'border' for setting one or more of the
   individual border properties.

   borderWidth?: string

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'border' for setting one or more of the
   individual border properties.

   color?: string | [1576]ThemeColor

   CSS styling property that will be applied to text enclosed by a
   decoration.

   cursor?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   dark?: [1577]ThemableDecorationRenderOptions

   Overwrite options for dark themes.

   fontStyle?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   fontWeight?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   gutterIconPath?: string | [1578]Uri

   An absolute path or an URI to an image to be rendered in the
   gutter.

   gutterIconSize?: string

   Specifies the size of the gutter icon. Available values are
   'auto', 'contain', 'cover' and any percentage value. For
   further information:
   [1579]https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85
   ).aspx

   [1579] https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx

   isWholeLine?: boolean

   Should the decoration be rendered also on the whitespace after
   the line text. Defaults to false.

   letterSpacing?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   light?: [1580]ThemableDecorationRenderOptions

   Overwrite options for light themes.

   opacity?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   outline?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

   outlineColor?: string | [1581]ThemeColor

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'outline' for setting one or more of the
   individual outline properties.

   outlineStyle?: string

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'outline' for setting one or more of the
   individual outline properties.

   outlineWidth?: string

   CSS styling property that will be applied to text enclosed by a
   decoration. Better use 'outline' for setting one or more of the
   individual outline properties.

   overviewRulerColor?: string | [1582]ThemeColor

   The color of the decoration in the overview ruler. Use rgba()
   and define transparent colors to play well with other
   decorations.

   overviewRulerLane?: [1583]OverviewRulerLane

   The position in the overview ruler where the decoration should
   be rendered.

   rangeBehavior?: [1584]DecorationRangeBehavior

   Customize the growing behavior of the decoration when edits
   occur at the edges of the decoration's range. Defaults to
   DecorationRangeBehavior.OpenOpen.

   textDecoration?: string

   CSS styling property that will be applied to text enclosed by a
   decoration.

Definition

   The definition of a symbol represented as one or many
   [1585]locations. For most programming languages there is only
   one location at which a symbol is defined.

   Definition: [1586]Location | [1587]Location[]

DefinitionLink

   Information about where a symbol is defined.

   Provides additional metadata over normal [1588]location
   definitions, including the range of the defining symbol

   DefinitionLink: [1589]LocationLink

DefinitionProvider

   The definition provider interface defines the contract between
   extensions and the [1590]go to definition and peek definition
   features.

   [1590] https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition

Methods

   provideDefinition(document: [1591]TextDocument, position:
   [1592]Position, token: [1593]CancellationToken):
   [1594]ProviderResult<[1595]Definition | [1596]DefinitionLink[]>

   Provide the definition of the symbol at the given position and
   document.
   Parameter Description
   document: [1597]TextDocument

   The document in which the command was invoked.
   position: [1598]Position

   The position at which the command was invoked.
   token: [1599]CancellationToken

   A cancellation token.
   Returns Description
   [1600]ProviderResult<[1601]Definition | [1602]DefinitionLink[]>

   A definition or a thenable that resolves to such. The lack of a
   result can be signaled by returning undefined or null.

Diagnostic

   Represents a diagnostic, such as a compiler error or warning.
   Diagnostic objects are only valid in the scope of a file.

Constructors

   new Diagnostic(range: [1603]Range, message: string, severity?:
   [1604]DiagnosticSeverity): [1605]Diagnostic

   Creates a new diagnostic object.
   Parameter Description
   range: [1606]Range

   The range to which this diagnostic applies.
   message: string

   The human-readable message.
   severity?: [1607]DiagnosticSeverity

   The severity, default is [1608]error.
   Returns Description
   [1609]Diagnostic

Properties

   code?: string | number | {target: [1610]Uri, value: string |
   number}

   A code or identifier for this diagnostic. Should be used for
   later processing, e.g. when providing [1611]code actions.

   message: string

   The human-readable message.

   range: [1612]Range

   The range to which this diagnostic applies.

   relatedInformation?: [1613]DiagnosticRelatedInformation[]

   An array of related diagnostic information, e.g. when
   symbol-names within a scope collide all definitions can be
   marked via this property.

   severity: [1614]DiagnosticSeverity

   The severity, default is [1615]error.

   source?: string

   A human-readable string describing the source of this
   diagnostic, e.g. 'typescript' or 'super lint'.

   tags?: [1616]DiagnosticTag[]

   Additional metadata about the diagnostic.

DiagnosticChangeEvent

   The event that is fired when diagnostics change.

Properties

   uris: [1617]ReadonlyArray<[1618]Uri>

   An array of resources for which diagnostics have changed.

DiagnosticCollection

   A diagnostics collection is a container that manages a set of
   [1619]diagnostics. Diagnostics are always scopes to a
   diagnostics collection and a resource.

   To get an instance of a DiagnosticCollection use
   [1620]createDiagnosticCollection.

Properties

   name: string

   The name of this diagnostic collection, for instance
   typescript. Every diagnostic from this collection will be
   associated with this name. Also, the task framework uses this
   name when defining [1621]problem matchers.

   [1621] https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher

Methods

   clear(): void

   Remove all diagnostics from this collection. The same as
   calling #set(undefined);
   Returns Description
   void

   delete(uri: [1622]Uri): void

   Remove all diagnostics from this collection that belong to the
   provided uri. The same as #set(uri, undefined).
     Parameter         Description
   uri: [1623]Uri

                  A resource identifier.
      Returns          Description
   void

   dispose(): void

   Dispose and free associated resources. Calls [1624]clear.
   Returns Description
   void

   forEach(callback: (uri: [1625]Uri, diagnostics:
   [1626]ReadonlyArray<[1627]Diagnostic>, collection:
   [1628]DiagnosticCollection) => any, thisArg?: any): void

   Iterate over each entry in this collection.
   Parameter Description
   callback: (uri: [1629]Uri, diagnostics:
   [1630]ReadonlyArray<[1631]Diagnostic>, collection:
   [1632]DiagnosticCollection) => any

   Function to execute for each entry.
   thisArg?: any

   The this context used when invoking the handler function.
   Returns Description
   void

   get(uri: [1633]Uri): [1634]ReadonlyArray<[1635]Diagnostic> |
   undefined

   Get the diagnostics for a given resource. Note that you cannot
   modify the diagnostics-array returned from this call.
   Parameter Description
   uri: [1636]Uri

   A resource identifier.
   Returns Description
   [1637]ReadonlyArray<[1638]Diagnostic> | undefined

   An immutable array of [1639]diagnostics or undefined.

   has(uri: [1640]Uri): boolean

   Check if this collection contains diagnostics for a given
   resource.
   Parameter Description
   uri: [1641]Uri

   A resource identifier.
   Returns Description
   boolean

   true if this collection has diagnostic for the given resource.

   set(uri: [1642]Uri, diagnostics:
   [1643]ReadonlyArray<[1644]Diagnostic> | undefined): void

   Assign diagnostics for given resource. Will replace existing
   diagnostics for that resource.
   Parameter Description
   uri: [1645]Uri

   A resource identifier.
   diagnostics: [1646]ReadonlyArray<[1647]Diagnostic> | undefined

   Array of diagnostics or undefined
   Returns Description
   void

   set(entries: [1648]ReadonlyArray<[[1649]Uri,
   [1650]ReadonlyArray<[1651]Diagnostic> | undefined]>): void

   Replace all entries in this collection.

   Diagnostics of multiple tuples of the same uri will be merged,
   e.g [[file1, [d1]], [file1, [d2]]] is equivalent to [[file1,
   [d1, d2]]]. If a diagnostics item is undefined as in [file1,
   undefined] all previous but not subsequent diagnostics are
   removed.
   Parameter Description
   entries: [1652]ReadonlyArray<[[1653]Uri,
   [1654]ReadonlyArray<[1655]Diagnostic> | undefined]>

   An array of tuples, like [[file1, [d1, d2]], [file2, [d3, d4,
   d5]]], or undefined.
   Returns Description
   void

DiagnosticRelatedInformation

   Represents a related message and source code location for a
   diagnostic. This should be used to point to code locations that
   cause or related to a diagnostics, e.g. when duplicating a
   symbol in a scope.

Constructors

   new DiagnosticRelatedInformation(location: [1656]Location,
   message: string): [1657]DiagnosticRelatedInformation

   Creates a new related diagnostic information object.
               Parameter               Description
   location: [1658]Location

                                      The location.
   message: string

                                      The message.
                Returns                Description
   [1659]DiagnosticRelatedInformation

Properties

   location: [1660]Location

   The location of this related diagnostic information.

   message: string

   The message of this related diagnostic information.

DiagnosticSeverity

   Represents the severity of diagnostics.

Enumeration members

   Error
   0

   Hint
   3

   Information
   2

   Warning
   1

DiagnosticTag

   Additional metadata about the type of a diagnostic.

Enumeration members

   Deprecated
   2

   Unnecessary
   1

Disposable

   Represents a type which can release resources, such as event
   listening or a timer.

Static

   from(...disposableLikes: {dispose: () => any}[]):
   [1661]Disposable

   Combine many disposable-likes into one. Use this method when
   having objects with a dispose function which are not instances
   of Disposable.
   Parameter Description
   ...disposableLikes: {dispose: () => any}[]

   Objects that have at least a dispose-function member.
   Returns Description
   [1662]Disposable

   Returns a new disposable which, upon dispose, will dispose all
   provided disposables.

Constructors

   new Disposable(callOnDispose: [1663]Function): [1664]Disposable

   Creates a new Disposable calling the provided function on
   dispose.
             Parameter                      Description
   callOnDispose: [1665]Function

                                 Function that disposes something.
              Returns                       Description
   [1666]Disposable

Methods

   dispose(): any

   Dispose this object.
   Returns Description
   any

DocumentColorProvider

   The document color provider defines the contract between
   extensions and feature of picking and modifying colors in the
   editor.

Methods

   provideColorPresentations(color: [1667]Color, context:
   {document: [1668]TextDocument, range: [1669]Range}, token:
   [1670]CancellationToken):
   [1671]ProviderResult<[1672]ColorPresentation[]>

   Provide [1673]representations for a color.
   Parameter Description
   color: [1674]Color

   The color to show and insert.
   context: {document: [1675]TextDocument, range: [1676]Range}

   A context object with additional information
   token: [1677]CancellationToken

   A cancellation token.
   Returns Description
   [1678]ProviderResult<[1679]ColorPresentation[]>

   An array of color presentations or a thenable that resolves to
   such. The lack of a result can be signaled by returning
   undefined, null, or an empty array.

   provideDocumentColors(document: [1680]TextDocument, token:
   [1681]CancellationToken):
   [1682]ProviderResult<[1683]ColorInformation[]>

   Provide colors for the given document.
   Parameter Description
   document: [1684]TextDocument

   The document in which the command was invoked.
   token: [1685]CancellationToken

   A cancellation token.
   Returns Description
   [1686]ProviderResult<[1687]ColorInformation[]>

   An array of [1688]color information or a thenable that resolves
   to such. The lack of a result can be signaled by returning
   undefined, null, or an empty array.

DocumentFilter

   A document filter denotes a document by different properties
   like the [1689]language, the [1690]scheme of its resource, or a
   glob-pattern that is applied to the [1691]path.
     * example -

       CAPTION: A language filter that applies to typescript files
       on disk

       { language: 'typescript', scheme: 'file' }

     * example -

       CAPTION: A language filter that applies to all package.json
       paths

       { language: 'json', scheme: 'untitled', pattern:
       '**/package.json' }

Properties

   language?: string

   A language id, like typescript.

   pattern?: [1692]GlobPattern

   A [1693]glob pattern that is matched on the absolute path of
   the document. Use a [1694]relative pattern to filter documents
   to a [1695]workspace folder.

   scheme?: string

   A Uri [1696]scheme, like file or untitled.

DocumentFormattingEditProvider

   The document formatting provider interface defines the contract
   between extensions and the formatting-feature.

Methods

   provideDocumentFormattingEdits(document: [1697]TextDocument,
   options: [1698]FormattingOptions, token:
   [1699]CancellationToken):
   [1700]ProviderResult<[1701]TextEdit[]>

   Provide formatting edits for a whole document.
   Parameter Description
   document: [1702]TextDocument

   The document in which the command was invoked.
   options: [1703]FormattingOptions

   Options controlling formatting.
   token: [1704]CancellationToken

   A cancellation token.
   Returns Description
   [1705]ProviderResult<[1706]TextEdit[]>

   A set of text edits or a thenable that resolves to such. The
   lack of a result can be signaled by returning undefined, null,
   or an empty array.

DocumentHighlight

   A document highlight is a range inside a text document which
   deserves special attention. Usually a document highlight is
   visualized by changing the background color of its range.

Constructors

   new DocumentHighlight(range: [1707]Range, kind?:
   [1708]DocumentHighlightKind): [1709]DocumentHighlight

   Creates a new document highlight object.
   Parameter Description
   range: [1710]Range

   The range the highlight applies to.
   kind?: [1711]DocumentHighlightKind

   The highlight kind, default is [1712]text.
   Returns Description
   [1713]DocumentHighlight

Properties

   kind?: [1714]DocumentHighlightKind

   The highlight kind, default is [1715]text.

   range: [1716]Range

   The range this highlight applies to.

DocumentHighlightKind

   A document highlight kind.

Enumeration members

   Read
   1

   Text
   0

   Write
   2

DocumentHighlightProvider

   The document highlight provider interface defines the contract
   between extensions and the word-highlight-feature.

Methods

   provideDocumentHighlights(document: [1717]TextDocument,
   position: [1718]Position, token: [1719]CancellationToken):
   [1720]ProviderResult<[1721]DocumentHighlight[]>

   Provide a set of document highlights, like all occurrences of a
   variable or all exit-points of a function.
   Parameter Description
   document: [1722]TextDocument

   The document in which the command was invoked.
   position: [1723]Position

   The position at which the command was invoked.
   token: [1724]CancellationToken

   A cancellation token.
   Returns Description
   [1725]ProviderResult<[1726]DocumentHighlight[]>

   An array of document highlights or a thenable that resolves to
   such. The lack of a result can be signaled by returning
   undefined, null, or an empty array.

DocumentLink

   A document link is a range in a text document that links to an
   internal or external resource, like another text document or a
   web site.

Constructors

   new DocumentLink(range: [1727]Range, target?: [1728]Uri):
   [1729]DocumentLink

   Creates a new document link.
   Parameter Description
   range: [1730]Range

   The range the document link applies to. Must not be empty.
   target?: [1731]Uri

   The uri the document link points to.
   Returns Description
   [1732]DocumentLink

Properties

   range: [1733]Range

   The range this link applies to.

   target?: [1734]Uri

   The uri this link points to.

   tooltip?: string

   The tooltip text when you hover over this link.

   If a tooltip is provided, is will be displayed in a string that
   includes instructions on how to trigger the link, such as {0}
   (ctrl + click). The specific instructions vary depending on OS,
   user settings, and localization.

DocumentLinkProvider<T>

   The document link provider defines the contract between
   extensions and feature of showing links in the editor.

Methods

   provideDocumentLinks(document: [1735]TextDocument, token:
   [1736]CancellationToken): [1737]ProviderResult<T[]>

   Provide links for the given document. Note that the editor
   ships with a default provider that detects http(s) and file
   links.
   Parameter Description
   document: [1738]TextDocument

   The document in which the command was invoked.
   token: [1739]CancellationToken

   A cancellation token.
   Returns Description
   [1740]ProviderResult<T[]>

   An array of [1741]document links or a thenable that resolves to
   such. The lack of a result can be signaled by returning
   undefined, null, or an empty array.

   resolveDocumentLink(link: T, token: [1742]CancellationToken):
   [1743]ProviderResult<T>

   Given a link fill in its [1744]target. This method is called
   when an incomplete link is selected in the UI. Providers can
   implement this method and return incomplete links (without
   target) from the [1745]provideDocumentLinks method which often
   helps to improve performance.
             Parameter                      Description
   link: T

                                  The link that is to be resolved.
   token: [1746]CancellationToken

                                  A cancellation token.
              Returns                       Description
   [1747]ProviderResult<T>

DocumentRangeFormattingEditProvider

   The document formatting provider interface defines the contract
   between extensions and the formatting-feature.

Methods

   provideDocumentRangeFormattingEdits(document:
   [1748]TextDocument, range: [1749]Range, options:
   [1750]FormattingOptions, token: [1751]CancellationToken):
   [1752]ProviderResult<[1753]TextEdit[]>

   Provide formatting edits for a range in a document.

   The given range is a hint and providers can decide to format a
   smaller or larger range. Often this is done by adjusting the
   start and end of the range to full syntax nodes.
   Parameter Description
   document: [1754]TextDocument

   The document in which the command was invoked.
   range: [1755]Range

   The range which should be formatted.
   options: [1756]FormattingOptions

   Options controlling formatting.
   token: [1757]CancellationToken

   A cancellation token.
   Returns Description
   [1758]ProviderResult<[1759]TextEdit[]>

   A set of text edits or a thenable that resolves to such. The
   lack of a result can be signaled by returning undefined, null,
   or an empty array.

DocumentRangeSemanticTokensProvider

   The document range semantic tokens provider interface defines
   the contract between extensions and semantic tokens.

Methods

   provideDocumentRangeSemanticTokens(document:
   [1760]TextDocument, range: [1761]Range, token:
   [1762]CancellationToken):
   [1763]ProviderResult<[1764]SemanticTokens>
     * see - [1765]provideDocumentSemanticTokens.

                   Parameter                  Description
   document: [1766]TextDocument
   range: [1767]Range
   token: [1768]CancellationToken
                    Returns                   Description
   [1769]ProviderResult<[1770]SemanticTokens>

DocumentSelector

   A language selector is the combination of one or many language
   identifiers and [1771]language filters.

   Note that a document selector that is just a language
   identifier selects all documents, even those that are not saved
   on disk. Only use such selectors when a feature works without
   further context, e.g. without the need to resolve related
   'files'.
     * example - let sel:DocumentSelector = { scheme: 'file',
       language: 'typescript' };

   DocumentSelector: [1772]DocumentFilter | string |
   [1773]ReadonlyArray<[1774]DocumentFilter | string>

DocumentSemanticTokensProvider

   The document semantic tokens provider interface defines the
   contract between extensions and semantic tokens.

Events

   onDidChangeSemanticTokens?: [1775]Event<void>

   An optional event to signal that the semantic tokens from this
   provider have changed.

Methods

   provideDocumentSemanticTokens(document: [1776]TextDocument,
   token: [1777]CancellationToken):
   [1778]ProviderResult<[1779]SemanticTokens>

   Tokens in a file are represented as an array of integers. The
   position of each token is expressed relative to the token
   before it, because most tokens remain stable relative to each
   other when edits are made in a file.
     __________________________________________________________

   In short, each token takes 5 integers to represent, so a
   specific token i in the file consists of the following array
   indices:
     * at index 5*i - deltaLine: token line number, relative to
       the previous token
     * at index 5*i+1 - deltaStart: token start character,
       relative to the previous token (relative to 0 or the
       previous token's start if they are on the same line)
     * at index 5*i+2 - length: the length of the token. A token
       cannot be multiline.
     * at index 5*i+3 - tokenType: will be looked up in
       SemanticTokensLegend.tokenTypes. We currently ask that
       tokenType < 65536.
     * at index 5*i+4 - tokenModifiers: each set bit will be
       looked up in SemanticTokensLegend.tokenModifiers
     __________________________________________________________

How to encode tokens

   Here is an example for encoding a file with 3 tokens in a
   uint32 array:
   { line: 2, startChar:  5, length: 3, tokenType: "property",  tokenMod
ifiers: ["private", "static"] },
   { line: 2, startChar: 10, length: 4, tokenType: "type",      tokenMod
ifiers: [] },
   { line: 5, startChar:  2, length: 7, tokenType: "class",     tokenMod
ifiers: [] }

    1. First of all, a legend must be devised. This legend must be
       provided up-front and capture all possible token types. For
       this example, we will choose the following legend which
       must be passed in when registering the provider:
tokenTypes: ['property', 'type', 'class'],
tokenModifiers: ['private', 'static']

    2. The first transformation step is to encode tokenType and
       tokenModifiers as integers using the legend. Token types
       are looked up by index, so a tokenType value of 1 means
       tokenTypes[1]. Multiple token modifiers can be set by using
       bit flags, so a tokenModifier value of 3 is first viewed as
       binary 0b00000011, which means [tokenModifiers[0],
       tokenModifiers[1]] because bits 0 and 1 are set. Using this
       legend, the tokens now are:
{ line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },
{ line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },
{ line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }

      [1] https://code.visualstudio.com/feed.xml
      [1] https://code.visualstudio.com/feed.xml

    3. The next step is to represent each token relative to the
       previous token in the file. In this case, the second token
       is on the same line as the first token, so the startChar of
       the second token is made relative to the startChar of the
       first token, so it will be 10 - 5. The third token is on a
       different line than the second token, so the startChar of
       the third token will not be altered:
{ deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifie
rs: 3 },
{ deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifie
rs: 0 },
{ deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifie
rs: 0 }

    4. Finally, the last step is to inline each of the 5 fields
       for a token in a single array, which is a memory friendly
       representation:
// 1st token,  2nd token,  3rd token
[  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]

     * see - [1780]SemanticTokensBuilder for a helper to encode
       tokens as integers. NOTE: When doing edits, it is possible
       that multiple edits occur until VS Code decides to invoke
       the semantic tokens provider. NOTE: If the provider cannot
       temporarily compute semantic tokens, it can indicate this
       by throwing an error with the message 'Busy'.

                   Parameter                  Description
   document: [1781]TextDocument
   token: [1782]CancellationToken
                    Returns                   Description
   [1783]ProviderResult<[1784]SemanticTokens>

   provideDocumentSemanticTokensEdits(document:
   [1785]TextDocument, previousResultId: string, token:
   [1786]CancellationToken):
   [1787]ProviderResult<[1788]SemanticTokens |
   [1789]SemanticTokensEdits>

   Instead of always returning all the tokens in a file, it is
   possible for a DocumentSemanticTokensProvider to implement this
   method (provideDocumentSemanticTokensEdits) and then return
   incremental updates to the previously provided semantic tokens.
     __________________________________________________________

How tokens change when the document changes

   Suppose that provideDocumentSemanticTokens has previously
   returned the following semantic tokens:
   // 1st token,  2nd token,  3rd token
   [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]

   Also suppose that after some edits, the new semantic tokens in
   a file are:
   // 1st token,  2nd token,  3rd token
   [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]

   It is possible to express these new tokens in terms of an edit
   applied to the previous tokens:
   [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // old tokens
   [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // new tokens

   edit: { start:  0, deleteCount: 1, data: [3] } // replace integer at
offset 0 with 3

      [3] https://code.visualstudio.com/

   NOTE: If the provider cannot compute SemanticTokensEdits, it
   can "give up" and return all the tokens in the document again.

   NOTE: All edits in SemanticTokensEdits contain indices in the
   old integers array, so they all refer to the previous result
   state.
                    Parameter                 Description
   document: [1790]TextDocument
   previousResultId: string
   token: [1791]CancellationToken
                     Returns                  Description
   [1792]ProviderResult<[1793]SemanticTokens |
   [1794]SemanticTokensEdits>

DocumentSymbol

   Represents programming constructs like variables, classes,
   interfaces etc. that appear in a document. Document symbols can
   be hierarchical and they have two ranges: one that encloses its
   definition and one that points to its most interesting range,
   e.g. the range of an identifier.

Constructors

   new DocumentSymbol(name: string, detail: string, kind:
   [1795]SymbolKind, range: [1796]Range, selectionRange:
   [1797]Range): [1798]DocumentSymbol

   Creates a new document symbol.
            Parameter                    Description
   name: string

                               The name of the symbol.
   detail: string

                               Details for the symbol.
   kind: [1799]SymbolKind

                               The kind of the symbol.
   range: [1800]Range

                               The full range of the symbol.
   selectionRange: [1801]Range

                               The range that should be reveal.
             Returns                     Description
   [1802]DocumentSymbol

Properties

   children: [1803]DocumentSymbol[]

   Children of this symbol, e.g. properties of a class.

   detail: string

   More detail for this symbol, e.g. the signature of a function.

   kind: [1804]SymbolKind

   The kind of this symbol.

   name: string

   The name of this symbol.

   range: [1805]Range

   The range enclosing this symbol not including leading/trailing
   whitespace but everything else, e.g. comments and code.

   selectionRange: [1806]Range

   The range that should be selected and reveal when this symbol
   is being picked, e.g. the name of a function. Must be contained
   by the [1807]range.

   tags?: [1808]ReadonlyArray<[1809]SymbolTag>

   Tags for this symbol.

DocumentSymbolProvider

   The document symbol provider interface defines the contract
   between extensions and the [1810]go to symbol-feature.

   [1810] https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol

Methods

   provideDocumentSymbols(document: [1811]TextDocument, token:
   [1812]CancellationToken):
   [1813]ProviderResult<[1814]SymbolInformation[] |
   [1815]DocumentSymbol[]>

   Provide symbol information for the given document.
   Parameter Description
   document: [1816]TextDocument

   The document in which the command was invoked.
   token: [1817]CancellationToken

   A cancellation token.
   Returns Description
   [1818]ProviderResult<[1819]SymbolInformation[] |
   [1820]DocumentSymbol[]>

   An array of document highlights or a thenable that resolves to
   such. The lack of a result can be signaled by returning
   undefined, null, or an empty array.

DocumentSymbolProviderMetadata

   Metadata about a document symbol provider.

Properties

   label?: string

   A human-readable string that is shown when multiple outlines
   trees show for one document.

EndOfLine

   Represents an end of line character sequence in a
   [1821]document.

Enumeration members

   CRLF
   2

   LF
   1

EnterAction

   Describes what to do when pressing Enter.

Properties

   appendText?: string

   Describes text to be appended after the new line and after the
   indentation.

   indentAction: [1822]IndentAction

   Describe what to do with the indentation.

   removeText?: number

   Describes the number of characters to remove from the new
   line's indentation.

EnvironmentVariableCollection

   A collection of mutations that an extension can apply to a
   process environment.

Properties

   persistent: boolean

   Whether the collection should be cached for the workspace and
   applied to the terminal across window reloads. When true the
   collection will be active immediately such when the window
   reloads. Additionally, this API will return the cached version
   if it exists. The collection will be invalidated when the
   extension is uninstalled or when the collection is cleared.
   Defaults to true.

Methods

   append(variable: string, value: string): void

   Append a value to an environment variable.

   Note that an extension can only make a single change to any one
   variable, so this will overwrite any previous calls to replace,
   append or prepend.
      Parameter                 Description
   variable: string

                    The variable to append to.
   value: string

                    The value to append to the variable.
       Returns                  Description
   void

   clear(): void

   Clears all mutators from this collection.
   Returns Description
   void

   delete(variable: string): void

   Deletes this collection's mutator for a variable.
      Parameter                   Description
   variable: string

                    The variable to delete the mutator for.
       Returns                    Description
   void

   forEach(callback: (variable: string, mutator:
   [1823]EnvironmentVariableMutator, collection:
   [1824]EnvironmentVariableCollection) => any, thisArg?: any):
   void

   Iterate over each mutator in this collection.
   Parameter Description
   callback: (variable: string, mutator:
   [1825]EnvironmentVariableMutator, collection:
   [1826]EnvironmentVariableCollection) => any

   Function to execute for each entry.
   thisArg?: any

   The this context used when invoking the handler function.
   Returns Description
   void

   get(variable: string): [1827]EnvironmentVariableMutator |
   undefined

   Gets the mutator that this collection applies to a variable, if
   any.
   Parameter Description
   variable: string

   The variable to get the mutator for.
   Returns Description
   [1828]EnvironmentVariableMutator | undefined

   prepend(variable: string, value: string): void

   Prepend a value to an environment variable.

   Note that an extension can only make a single change to any one
   variable, so this will overwrite any previous calls to replace,
   append or prepend.
      Parameter                  Description
   variable: string

                    The variable to prepend.
   value: string

                    The value to prepend to the variable.
       Returns                   Description
   void

   replace(variable: string, value: string): void

   Replace an environment variable with a value.

   Note that an extension can only make a single change to any one
   variable, so this will overwrite any previous calls to replace,
   append or prepend.
      Parameter                   Description
   variable: string

                    The variable to replace.
   value: string

                    The value to replace the variable with.
       Returns                    Description
   void

EnvironmentVariableMutator

   A type of mutation and its value to be applied to an
   environment variable.

Properties

   type: [1829]EnvironmentVariableMutatorType

   The type of mutation that will occur to the variable.

   value: string

   The value to use for the variable.

EnvironmentVariableMutatorType

   A type of mutation that can be applied to an environment
   variable.

Enumeration members

   Append
   2

   Prepend
   3

   Replace
   1

EvaluatableExpression

   An EvaluatableExpression represents an expression in a document
   that can be evaluated by an active debugger or runtime. The
   result of this evaluation is shown in a tooltip-like widget. If
   only a range is specified, the expression will be extracted
   from the underlying document. An optional expression can be
   used to override the extracted expression. In this case the
   range is still used to highlight the range in the document.

Constructors

   new EvaluatableExpression(range: [1830]Range, expression?:
   string): [1831]EvaluatableExpression

   Creates a new evaluatable expression object.
   Parameter Description
   range: [1832]Range

   The range in the underlying document from which the evaluatable
   expression is extracted.
   expression?: string

   If specified overrides the extracted expression.
   Returns Description
   [1833]EvaluatableExpression

Properties

   expression?: string

   range: [1834]Range

EvaluatableExpressionProvider

   The evaluatable expression provider interface defines the
   contract between extensions and the debug hover. In this
   contract the provider returns an evaluatable expression for a
   given position in a document and VS Code evaluates this
   expression in the active debug session and shows the result in
   a debug hover.

Methods

   provideEvaluatableExpression(document: [1835]TextDocument,
   position: [1836]Position, token: [1837]CancellationToken):
   [1838]ProviderResult<[1839]EvaluatableExpression>

   Provide an evaluatable expression for the given document and
   position. VS Code will evaluate this expression in the active
   debug session and will show the result in the debug hover. The
   expression can be implicitly specified by the range in the
   underlying document or by explicitly returning an expression.
   Parameter Description
   document: [1840]TextDocument

   The document for which the debug hover is about to appear.
   position: [1841]Position

   The line and character position in the document where the debug
   hover is about to appear.
   token: [1842]CancellationToken

   A cancellation token.
   Returns Description
   [1843]ProviderResult<[1844]EvaluatableExpression>

   An EvaluatableExpression or a thenable that resolves to such.
   The lack of a result can be signaled by returning undefined or
   null.

Event<T>

   Represents a typed event.

   A function that represents an event to which you subscribe by
   calling it with a listener function as argument.
     * example - item.onDidChange(function(event) {
       console.log("Event happened: " + event); });

   (listener: (e: T) => any, thisArgs?: any, disposables?:
   [1845]Disposable[]): [1846]Disposable

   A function that represents an event to which you subscribe by
   calling it with a listener function as argument.

   A function that represents an event to which you subscribe by
   calling it with a listener function as argument.
   Parameter Description
   listener: (e: T) => any

   The listener function will be called when the event happens.
   thisArgs?: any

   The this-argument which will be used when calling the event
   listener.
   disposables?: [1847]Disposable[]

   An array to which a [1848]disposable will be added.
   Returns Description
   [1849]Disposable

   A disposable which unsubscribes the event listener.

EventEmitter<T>

   An event emitter can be used to create and manage an
   [1850]event for others to subscribe to. One emitter always owns
   one event.

   Use this class if you want to provide event from within your
   extension, for instance inside a
   [1851]TextDocumentContentProvider or when providing API to
   other extensions.

Properties

   event: [1852]Event<T>

   The event listeners can subscribe to.

Methods

   dispose(): void

   Dispose this object and free resources.
   Returns Description
   void

   fire(data: T): void

   Notify all subscribers of the [1853]event. Failure of one or
   more listener will not fail this function call.
   Parameter    Description
   data: T

             The event object.
    Returns     Description
   void

Extension<T>

   Represents an extension.

   To get an instance of an Extension use [1854]getExtension.

Properties

   exports: T

   The public API exported by this extension. It is an invalid
   action to access this field before this extension has been
   activated.

   extensionKind: [1855]ExtensionKind

   The extension kind describes if an extension runs where the UI
   runs or if an extension runs where the remote extension host
   runs. The extension kind is defined in the package.json-file of
   extensions but can also be refined via the
   remote.extensionKind-setting. When no remote extension host
   exists, the value is [1856]ExtensionKind.UI.

   extensionPath: string

   The absolute file path of the directory containing this
   extension. Shorthand notation for
   [1857]Extension.extensionUri.fsPath (independent of the uri
   scheme).

   extensionUri: [1858]Uri

   The uri of the directory containing the extension.

   id: string

   The canonical extension identifier in the form of:
   publisher.name.

   isActive: boolean

   true if the extension has been activated.

   packageJSON: any

   The parsed contents of the extension's package.json.

Methods

   activate(): [1859]Thenable<T>

   Activates this extension and returns its public API.
   Returns Description
   [1860]Thenable<T>

   A promise that will resolve when this extension has been
   activated.

ExtensionContext

   An extension context is a collection of utilities private to an
   extension.

   An instance of an ExtensionContext is provided as the first
   parameter to the activate-call of an extension.

Properties

   environmentVariableCollection:
   [1861]EnvironmentVariableCollection

   Gets the extension's environment variable collection for this
   workspace, enabling changes to be applied to terminal
   environment variables.

   extensionMode: [1862]ExtensionMode

   The mode the extension is running in. This is specific to the
   current extension. One extension may be in
   ExtensionMode.Development while other extensions in the host
   run in ExtensionMode.Release.

   extensionPath: string

   The absolute file path of the directory containing the
   extension. Shorthand notation for
   [1863]ExtensionContext.extensionUri.fsPath (independent of the
   uri scheme).

   extensionUri: [1864]Uri

   The uri of the directory containing the extension.

   globalState: [1865]Memento & {setKeysForSync}

   A memento object that stores state independent of the current
   opened [1866]workspace.

   globalStoragePath: string

   An absolute file path in which the extension can store global
   state. The directory might not exist on disk and creation is up
   to the extension. However, the parent directory is guaranteed
   to be existent.

   Use [1867]globalState to store key value data.
     * deprecated - Use [1868]globalStorageUri instead.

   globalStorageUri: [1869]Uri

   The uri of a directory in which the extension can store global
   state. The directory might not exist on disk and creation is up
   to the extension. However, the parent directory is guaranteed
   to be existent.

   Use [1870]globalState to store key value data.
     * see - [1871]workspace.fs for how to read and write files
       and folders from an uri.

   logPath: string

   An absolute file path of a directory in which the extension can
   create log files. The directory might not exist on disk and
   creation is up to the extension. However, the parent directory
   is guaranteed to be existent.
     * deprecated - Use [1872]logUri instead.

   logUri: [1873]Uri

   The uri of a directory in which the extension can create log
   files. The directory might not exist on disk and creation is up
   to the extension. However, the parent directory is guaranteed
   to be existent.
     * see - [1874]workspace.fs for how to read and write files
       and folders from an uri.

   storagePath: string | undefined

   An absolute file path of a workspace specific directory in
   which the extension can store private state. The directory
   might not exist on disk and creation is up to the extension.
   However, the parent directory is guaranteed to be existent.

   Use [1875]workspaceState or [1876]globalState to store key
   value data.
     * deprecated - Use [1877]storageUri instead.

   storageUri: [1878]Uri | undefined

   The uri of a workspace specific directory in which the
   extension can store private state. The directory might not
   exist and creation is up to the extension. However, the parent
   directory is guaranteed to be existent. The value is undefined
   when no workspace nor folder has been opened.

   Use [1879]workspaceState or [1880]globalState to store key
   value data.
     * see - [1881]workspace.fs for how to read and write files
       and folders from an uri.

   subscriptions: {dispose}[]

   An array to which disposables can be added. When this extension
   is deactivated the disposables will be disposed.

   workspaceState: [1882]Memento

   A memento object that stores state in the context of the
   currently opened [1883]workspace.

Methods

   asAbsolutePath(relativePath: string): string

   Get the absolute path of a resource contained in the extension.

   Note that an absolute uri can be constructed via
   [1884]Uri.joinPath and [1885]extensionUri, e.g.
   vscode.Uri.joinPath(context.extensionUri, relativePath);
   Parameter Description
   relativePath: string

   A relative path to a resource contained in the extension.
   Returns Description
   string

   The absolute path of the resource.

ExtensionKind

   In a remote window the extension kind describes if an extension
   runs where the UI (window) runs or if an extension runs
   remotely.

Enumeration members

   UI
   1

   Workspace
   2

ExtensionMode

   The ExtensionMode is provided on the ExtensionContext and
   indicates the mode the specific extension is running in.

Enumeration members

   Development
   2

   Production
   1

   Test
   3

ExtensionTerminalOptions

   Value-object describing what options a virtual process terminal
   should use.

Properties

   name: string

   A human-readable string which will be used to represent the
   terminal in the UI.

   pty: [1886]Pseudoterminal

   An implementation of [1887]Pseudoterminal that allows an
   extension to control a terminal.

FileChangeEvent

   The event filesystem providers must use to signal a file
   change.

Properties

   type: [1888]FileChangeType

   The type of change.

   uri: [1889]Uri

   The uri of the file that has changed.

FileChangeType

   Enumeration of file change types.

Enumeration members

   Changed
   1

   Created
   2

   Deleted
   3

FileCreateEvent

   An event that is fired after files are created.

Properties

   files: [1890]ReadonlyArray<[1891]Uri>

   The files that got created.

FileDeleteEvent

   An event that is fired after files are deleted.

Properties

   files: [1892]ReadonlyArray<[1893]Uri>

   The files that got deleted.

FileRenameEvent

   An event that is fired after files are renamed.

Properties

   files: [1894]ReadonlyArray<{newUri: [1895]Uri, oldUri:
   [1896]Uri}>

   The files that got renamed.

FileStat

   The FileStat-type represents metadata about a file

Properties

   ctime: number

   The creation timestamp in milliseconds elapsed since January 1,
   1970 00:00:00 UTC.

   mtime: number

   The modification timestamp in milliseconds elapsed since
   January 1, 1970 00:00:00 UTC.

   Note: If the file changed, it is important to provide an
   updated mtime that advanced from the previous value. Otherwise
   there may be optimizations in place that will not show the
   updated file contents in an editor for example.

   size: number

   The size in bytes.

   Note: If the file changed, it is important to provide an
   updated size. Otherwise there may be optimizations in place
   that will not show the updated file contents in an editor for
   example.

   type: [1897]FileType

   The type of the file, e.g. is a regular file, a directory, or
   symbolic link to a file.

   Note: This value might be a bitmask, e.g. FileType.File |
   FileType.SymbolicLink.

FileSystem

   The file system interface exposes the editor's built-in and
   contributed [1898]file system providers. It allows extensions
   to work with files from the local disk as well as files from
   remote places, like the remote extension host or ftp-servers.

   Note that an instance of this interface is available as
   [1899]workspace.fs.

Methods

   copy(source: [1900]Uri, target: [1901]Uri, options?:
   {overwrite: boolean}): [1902]Thenable<void>

   Copy files or folders.
   Parameter Description
   source: [1903]Uri

   The existing file.
   target: [1904]Uri
   options?: {overwrite: boolean}

   Defines if existing files should be overwritten.
   Returns Description
   [1905]Thenable<void>

   createDirectory(uri: [1906]Uri): [1907]Thenable<void>

   Create a new directory (Note, that new files are created via
   write-calls).

   Note that missing directories are created automatically, e.g
   this call has mkdirp semantics.
        Parameter              Description
   uri: [1908]Uri

                        The uri of the new folder.
         Returns               Description
   [1909]Thenable<void>

   delete(uri: [1910]Uri, options?: {recursive: boolean, useTrash:
   boolean}): [1911]Thenable<void>

   Delete a file.
   Parameter Description
   uri: [1912]Uri

   The resource that is to be deleted.
   options?: {recursive: boolean, useTrash: boolean}

   Defines if trash can should be used and if deletion of folders
   is recursive
   Returns Description
   [1913]Thenable<void>

   readDirectory(uri: [1914]Uri): [1915]Thenable<[string,
   [1916]FileType][]>

   Retrieve all entries of a [1917]directory.
   Parameter Description
   uri: [1918]Uri

   The uri of the folder.
   Returns Description
   [1919]Thenable<[string, [1920]FileType][]>

   An array of name/type-tuples or a thenable that resolves to
   such.

   readFile(uri: [1921]Uri): [1922]Thenable<[1923]Uint8Array>

   Read the entire contents of a file.
   Parameter Description
   uri: [1924]Uri

   The uri of the file.
   Returns Description
   [1925]Thenable<[1926]Uint8Array>

   An array of bytes or a thenable that resolves to such.

   rename(source: [1927]Uri, target: [1928]Uri, options?:
   {overwrite: boolean}): [1929]Thenable<void>

   Rename a file or folder.
   Parameter Description
   source: [1930]Uri
   target: [1931]Uri
   options?: {overwrite: boolean}

   Defines if existing files should be overwritten.
   Returns Description
   [1932]Thenable<void>

   stat(uri: [1933]Uri): [1934]Thenable<[1935]FileStat>

   Retrieve metadata about a file.
   Parameter Description
   uri: [1936]Uri

   The uri of the file to retrieve metadata about.
   Returns Description
   [1937]Thenable<[1938]FileStat>

   The file metadata about the file.

   writeFile(uri: [1939]Uri, content: [1940]Uint8Array):
   [1941]Thenable<void>

   Write data to a file, replacing its entire contents.
           Parameter                 Description
   uri: [1942]Uri

                             The uri of the file.
   content: [1943]Uint8Array

                             The new content of the file.
            Returns                  Description
   [1944]Thenable<void>

FileSystemError

   A type that filesystem providers should use to signal errors.

   This class has factory methods for common error-cases, like
   FileNotFound when a file or folder doesn't exist, use them like
   so: throw vscode.FileSystemError.FileNotFound(someUri);

Static

   Error: [1945]ErrorConstructor

   FileExists(messageOrUri?: string | [1946]Uri):
   [1947]FileSystemError

   Create an error to signal that a file or folder already exists,
   e.g. when creating but not overwriting a file.
               Parameter               Description
   messageOrUri?: string | [1948]Uri

                                     Message or uri.
                Returns                Description
   [1949]FileSystemError

   FileIsADirectory(messageOrUri?: string | [1950]Uri):
   [1951]FileSystemError

   Create an error to signal that a file is a folder.
               Parameter               Description
   messageOrUri?: string | [1952]Uri

                                     Message or uri.
                Returns                Description
   [1953]FileSystemError

   FileNotADirectory(messageOrUri?: string | [1954]Uri):
   [1955]FileSystemError

   Create an error to signal that a file is not a folder.
               Parameter               Description
   messageOrUri?: string | [1956]Uri

                                     Message or uri.
                Returns                Description
   [1957]FileSystemError

   FileNotFound(messageOrUri?: string | [1958]Uri):
   [1959]FileSystemError

   Create an error to signal that a file or folder wasn't found.
               Parameter               Description
   messageOrUri?: string | [1960]Uri

                                     Message or uri.
                Returns                Description
   [1961]FileSystemError

   NoPermissions(messageOrUri?: string | [1962]Uri):
   [1963]FileSystemError

   Create an error to signal that an operation lacks required
   permissions.
               Parameter               Description
   messageOrUri?: string | [1964]Uri

                                     Message or uri.
                Returns                Description
   [1965]FileSystemError

   Unavailable(messageOrUri?: string | [1966]Uri):
   [1967]FileSystemError

   Create an error to signal that the file system is unavailable
   or too busy to complete a request.
               Parameter               Description
   messageOrUri?: string | [1968]Uri

                                     Message or uri.
                Returns                Description
   [1969]FileSystemError

Constructors

   new FileSystemError(messageOrUri?: string | [1970]Uri):
   [1971]FileSystemError

   Creates a new filesystem error.
               Parameter               Description
   messageOrUri?: string | [1972]Uri

                                     Message or uri.
                Returns                Description
   [1973]FileSystemError

Properties

   code: string

   A code that identifies this error.

   Possible values are names of errors, like [1974]FileNotFound,
   or Unknown for unspecified errors.

   message: string

   name: string

   stack?: string

FileSystemProvider

   The filesystem provider defines what the editor needs to read,
   write, discover, and to manage files and folders. It allows
   extensions to serve files from remote places, like ftp-servers,
   and to seamlessly integrate those into the editor.
     * Note 1: The filesystem provider API works with [1975]uris
       and assumes hierarchical paths, e.g. foo:/my/path is a
       child of foo:/my/ and a parent of foo:/my/path/deeper.
     * Note 2: There is an activation event onFileSystem:<scheme>
       that fires when a file or folder is being accessed.
     * Note 3: The word 'file' is often used to denote all
       [1976]kinds of files, e.g. folders, symbolic links, and
       regular files.

Events

   onDidChangeFile: [1977]Event<[1978]FileChangeEvent[]>

   An event to signal that a resource has been created, changed,
   or deleted. This event should fire for resources that are being
   [1979]watched by clients of this provider.

   Note: It is important that the metadata of the file that
   changed provides an updated mtime that advanced from the
   previous value in the [1980]stat and a correct size value.
   Otherwise there may be optimizations in place that will not
   show the change in an editor for example.

Methods

   copy(source: [1981]Uri, destination: [1982]Uri, options:
   {overwrite: boolean}): void | [1983]Thenable<void>

   Copy files or folders. Implementing this function is optional
   but it will speedup the copy operation.
     * throws - [1984]FileNotFound when source doesn't exist.

     * throws - [1985]FileNotFound when parent of destination
       doesn't exist, e.g. no mkdirp-logic required.

     * throws - [1986]FileExists when destination exists and when
       the overwrite option is not true.

     * throws - [1987]NoPermissions when permissions aren't
       sufficient.

   Parameter Description
   source: [1988]Uri

   The existing file.
   destination: [1989]Uri

   The destination location.
   options: {overwrite: boolean}

   Defines if existing files should be overwritten.
   Returns Description
   void | [1990]Thenable<void>

   createDirectory(uri: [1991]Uri): void | [1992]Thenable<void>

   Create a new directory (Note, that new files are created via
   write-calls).
     * throws - [1993]FileNotFound when the parent of uri doesn't
       exist, e.g. no mkdirp-logic required.

     * throws - [1994]FileExists when uri already exists.

     * throws - [1995]NoPermissions when permissions aren't
       sufficient.

            Parameter                 Description
   uri: [1996]Uri

                               The uri of the new folder.
             Returns                  Description
   void | [1997]Thenable<void>

   delete(uri: [1998]Uri, options: {recursive: boolean}): void |
   [1999]Thenable<void>

   Delete a file.
     * throws - [2000]FileNotFound when uri doesn't exist.

     * throws - [2001]NoPermissions when permissions aren't
       sufficient.

   Parameter Description
   uri: [2002]Uri

   The resource that is to be deleted.
   options: {recursive: boolean}

   Defines if deletion of folders is recursive.
   Returns Description
   void | [2003]Thenable<void>

   readDirectory(uri: [2004]Uri): [string, [2005]FileType][] |
   [2006]Thenable<[string, [2007]FileType][]>

   Retrieve all entries of a [2008]directory.
     * throws - [2009]FileNotFound when uri doesn't exist.

   Parameter Description
   uri: [2010]Uri

   The uri of the folder.
   Returns Description
   [string, [2011]FileType][] | [2012]Thenable<[string,
   [2013]FileType][]>

   An array of name/type-tuples or a thenable that resolves to
   such.

   readFile(uri: [2014]Uri): [2015]Uint8Array |
   [2016]Thenable<[2017]Uint8Array>

   Read the entire contents of a file.
     * throws - [2018]FileNotFound when uri doesn't exist.

   Parameter Description
   uri: [2019]Uri

   The uri of the file.
   Returns Description
   [2020]Uint8Array | [2021]Thenable<[2022]Uint8Array>

   An array of bytes or a thenable that resolves to such.

   rename(oldUri: [2023]Uri, newUri: [2024]Uri, options:
   {overwrite: boolean}): void | [2025]Thenable<void>

   Rename a file or folder.
     * throws - [2026]FileNotFound when oldUri doesn't exist.

     * throws - [2027]FileNotFound when parent of newUri doesn't
       exist, e.g. no mkdirp-logic required.

     * throws - [2028]FileExists when newUri exists and when the
       overwrite option is not true.

     * throws - [2029]NoPermissions when permissions aren't
       sufficient.

   Parameter Description
   oldUri: [2030]Uri

   The existing file.
   newUri: [2031]Uri

   The new location.
   options: {overwrite: boolean}

   Defines if existing files should be overwritten.
   Returns Description
   void | [2032]Thenable<void>

   stat(uri: [2033]Uri): [2034]FileStat |
   [2035]Thenable<[2036]FileStat>

   Retrieve metadata about a file.

   Note that the metadata for symbolic links should be the
   metadata of the file they refer to. Still, the
   [2037]SymbolicLink-type must be used in addition to the actual
   type, e.g. FileType.SymbolicLink | FileType.Directory.
     * throws - [2038]FileNotFound when uri doesn't exist.

   Parameter Description
   uri: [2039]Uri

   The uri of the file to retrieve metadata about.
   Returns Description
   [2040]FileStat | [2041]Thenable<[2042]FileStat>

   The file metadata about the file.

   watch(uri: [2043]Uri, options: {excludes: string[], recursive:
   boolean}): [2044]Disposable

   Subscribe to events in the file or folder denoted by uri.

   The editor will call this function for files and folders. In
   the latter case, the options differ from defaults, e.g. what
   files/folders to exclude from watching and if subfolders,
   sub-subfolder, etc. should be watched (recursive).
   Parameter Description
   uri: [2045]Uri

   The uri of the file to be watched.
   options: {excludes: string[], recursive: boolean}

   Configures the watch.
   Returns Description
   [2046]Disposable

   A disposable that tells the provider to stop watching the uri.

   writeFile(uri: [2047]Uri, content: [2048]Uint8Array, options:
   {create: boolean, overwrite: boolean}): void |
   [2049]Thenable<void>

   Write data to a file, replacing its entire contents.
     * throws - [2050]FileNotFound when uri doesn't exist and
       create is not set.

     * throws - [2051]FileNotFound when the parent of uri doesn't
       exist and create is set, e.g. no mkdirp-logic required.

     * throws - [2052]FileExists when uri already exists, create
       is set but overwrite is not set.

     * throws - [2053]NoPermissions when permissions aren't
       sufficient.

   Parameter Description
   uri: [2054]Uri

   The uri of the file.
   content: [2055]Uint8Array

   The new content of the file.
   options: {create: boolean, overwrite: boolean}

   Defines if missing files should or must be created.
   Returns Description
   void | [2056]Thenable<void>

FileSystemWatcher

   A file system watcher notifies about changes to files and
   folders on disk or from other [2057]FileSystemProviders.

   To get an instance of a FileSystemWatcher use
   [2058]createFileSystemWatcher.

Events

   onDidChange: [2059]Event<[2060]Uri>

   An event which fires on file/folder change.

   onDidCreate: [2061]Event<[2062]Uri>

   An event which fires on file/folder creation.

   onDidDelete: [2063]Event<[2064]Uri>

   An event which fires on file/folder deletion.

Static

   from(...disposableLikes: {dispose: () => any}[]):
   [2065]Disposable

   Combine many disposable-likes into one. Use this method when
   having objects with a dispose function which are not instances
   of Disposable.
   Parameter Description
   ...disposableLikes: {dispose: () => any}[]

   Objects that have at least a dispose-function member.
   Returns Description
   [2066]Disposable

   Returns a new disposable which, upon dispose, will dispose all
   provided disposables.

Constructors

   new FileSystemWatcher(callOnDispose: [2067]Function):
   [2068]FileSystemWatcher

   Creates a new Disposable calling the provided function on
   dispose.
             Parameter                      Description
   callOnDispose: [2069]Function

                                 Function that disposes something.
              Returns                       Description
   [2070]FileSystemWatcher

Properties

   ignoreChangeEvents: boolean

   true if this file system watcher has been created such that it
   ignores change file system events.

   ignoreCreateEvents: boolean

   true if this file system watcher has been created such that it
   ignores creation file system events.

   ignoreDeleteEvents: boolean

   true if this file system watcher has been created such that it
   ignores delete file system events.

Methods

   dispose(): any

   Dispose this object.
   Returns Description
   any

FileType

   Enumeration of file types. The types File and Directory can
   also be a symbolic links, in that case use FileType.File |
   FileType.SymbolicLink and FileType.Directory |
   FileType.SymbolicLink.

Enumeration members

   Directory
   2

   File
   1

   SymbolicLink
   64

   Unknown
   0

FileWillCreateEvent

   An event that is fired when files are going to be created.

   To make modifications to the workspace before the files are
   created, call the [2071]`waitUntil-function with a thenable
   that resolves to a [2072]workspace edit.

Properties

   files: [2073]ReadonlyArray<[2074]Uri>

   The files that are going to be created.

Methods

   waitUntil(thenable: [2075]Thenable<[2076]WorkspaceEdit>): void

   Allows to pause the event and to apply a [2077]workspace edit.

   Note: This function can only be called during event dispatch
   and not in an asynchronous manner:
workspace.onWillCreateFiles(event => {
    // async, will *throw* an error
    setTimeout(() => event.waitUntil(promise));

    // sync, OK
    event.waitUntil(promise);
})

   Parameter Description
   thenable: [2078]Thenable<[2079]WorkspaceEdit>

   A thenable that delays saving.
   Returns Description
   void

   waitUntil(thenable: [2080]Thenable<any>): void

   Allows to pause the event until the provided thenable resolves.

   Note: This function can only be called during event dispatch.
             Parameter                    Description
   thenable: [2081]Thenable<any>

                                 A thenable that delays saving.
              Returns                     Description
   void

FileWillDeleteEvent

   An event that is fired when files are going to be deleted.

   To make modifications to the workspace before the files are
   deleted, call the [2082]`waitUntil-function with a thenable
   that resolves to a [2083]workspace edit.

Properties

   files: [2084]ReadonlyArray<[2085]Uri>

   The files that are going to be deleted.

Methods

   waitUntil(thenable: [2086]Thenable<[2087]WorkspaceEdit>): void

   Allows to pause the event and to apply a [2088]workspace edit.

   Note: This function can only be called during event dispatch
   and not in an asynchronous manner:
workspace.onWillCreateFiles(event => {
    // async, will *throw* an error
    setTimeout(() => event.waitUntil(promise));

    // sync, OK
    event.waitUntil(promise);
})

   Parameter Description
   thenable: [2089]Thenable<[2090]WorkspaceEdit>

   A thenable that delays saving.
   Returns Description
   void

   waitUntil(thenable: [2091]Thenable<any>): void

   Allows to pause the event until the provided thenable resolves.

   Note: This function can only be called during event dispatch.
             Parameter                    Description
   thenable: [2092]Thenable<any>

                                 A thenable that delays saving.
              Returns                     Description
   void

FileWillRenameEvent

   An event that is fired when files are going to be renamed.

   To make modifications to the workspace before the files are
   renamed, call the [2093]`waitUntil-function with a thenable
   that resolves to a [2094]workspace edit.

Properties

   files: [2095]ReadonlyArray<{newUri: [2096]Uri, oldUri:
   [2097]Uri}>

   The files that are going to be renamed.

Methods

   waitUntil(thenable: [2098]Thenable<[2099]WorkspaceEdit>): void

   Allows to pause the event and to apply a [2100]workspace edit.

   Note: This function can only be called during event dispatch
   and not in an asynchronous manner:
workspace.onWillCreateFiles(event => {
    // async, will *throw* an error
    setTimeout(() => event.waitUntil(promise));

    // sync, OK
    event.waitUntil(promise);
})

   Parameter Description
   thenable: [2101]Thenable<[2102]WorkspaceEdit>

   A thenable that delays saving.
   Returns Description
   void

   waitUntil(thenable: [2103]Thenable<any>): void

   Allows to pause the event until the provided thenable resolves.

   Note: This function can only be called during event dispatch.
             Parameter                    Description
   thenable: [2104]Thenable<any>

                                 A thenable that delays saving.
              Returns                     Description
   void

FoldingContext

   Folding context (for future use)

FoldingRange

   A line based folding range. To be valid, start and end line
   must be bigger than zero and smaller than the number of lines
   in the document. Invalid ranges will be ignored.

Constructors

   new FoldingRange(start: number, end: number, kind?:
   [2105]FoldingRangeKind): [2106]FoldingRange

   Creates a new folding range.
             Parameter                       Description
   start: number

                                 The start line of the folded range.
   end: number

                                 The end line of the folded range.
   kind?: [2107]FoldingRangeKind

                                 The kind of the folding range.
              Returns                        Description
   [2108]FoldingRange

Properties

   end: number

   The zero-based end line of the range to fold. The folded area
   ends with the line's last character. To be valid, the end must
   be zero or larger and smaller than the number of lines in the
   document.

   kind?: [2109]FoldingRangeKind

   Describes the [2110]Kind of the folding range such as
   [2111]Comment or [2112]Region. The kind is used to categorize
   folding ranges and used by commands like 'Fold all comments'.
   See [2113]FoldingRangeKind for an enumeration of all kinds. If
   not set, the range is originated from a syntax element.

   start: number

   The zero-based start line of the range to fold. The folded area
   starts after the line's last character. To be valid, the end
   must be zero or larger and smaller than the number of lines in
   the document.

FoldingRangeKind

   An enumeration of specific folding range kinds. The kind is an
   optional field of a [2114]FoldingRange and is used to
   distinguish specific folding ranges such as ranges originated
   from comments. The kind is used by commands like Fold all
   comments or Fold all regions. If the kind is not set on the
   range, the range originated from a syntax element other than
   comments, imports or region markers.

Enumeration members

   Comment
   1

   Imports
   2

   Region
   3

FoldingRangeProvider

   The folding range provider interface defines the contract
   between extensions and [2115]Folding in the editor.

   [2115] https://code.visualstudio.com/docs/editor/codebasics#_folding

Methods

   provideFoldingRanges(document: [2116]TextDocument, context:
   [2117]FoldingContext, token: [2118]CancellationToken):
   [2119]ProviderResult<[2120]FoldingRange[]>

   Returns a list of folding ranges or null and undefined if the
   provider does not want to participate or was cancelled.
   Parameter Description
   document: [2121]TextDocument

   The document in which the command was invoked.
   context: [2122]FoldingContext

   Additional context information (for future use)
   token: [2123]CancellationToken

   A cancellation token.
   Returns Description
   [2124]ProviderResult<[2125]FoldingRange[]>

FormattingOptions

   Value-object describing what options formatting should use.

Properties

   insertSpaces: boolean

   Prefer spaces over tabs.

   tabSize: number

   Size of a tab in spaces.

FunctionBreakpoint

   A breakpoint specified by a function name.

Constructors

   new FunctionBreakpoint(functionName: string, enabled?: boolean,
   condition?: string, hitCondition?: string, logMessage?:
   string): [2126]FunctionBreakpoint

   Create a new function breakpoint.
          Parameter         Description
   functionName: string
   enabled?: boolean
   condition?: string
   hitCondition?: string
   logMessage?: string
           Returns          Description
   [2127]FunctionBreakpoint

Properties

   condition?: string

   An optional expression for conditional breakpoints.

   enabled: boolean

   Is breakpoint enabled.

   functionName: string

   The name of the function to which this breakpoint is attached.

   hitCondition?: string

   An optional expression that controls how many hits of the
   breakpoint are ignored.

   id: string

   The unique ID of the breakpoint.

   logMessage?: string

   An optional message that gets logged when this breakpoint is
   hit. Embedded expressions within {} are interpolated by the
   debug adapter.

GlobPattern

   A file glob pattern to match file paths against. This can
   either be a glob pattern string (like **/*.{ts,js} or
   *.{ts,js}) or a [2128]relative pattern.

   Glob patterns can have the following syntax:
     * * to match one or more characters in a path segment
     * ? to match on one character in a path segment
     * ** to match any number of path segments, including none
     * {} to group conditions (e.g. **/*.{ts,js} matches all
       TypeScript and JavaScript files)
     * [] to declare a range of characters to match in a path
       segment (e.g., example.[0-9] to match on example.0,
       example.1, …)
     * [!...] to negate a range of characters to match in a path
       segment (e.g., example.[!0-9] to match on example.a,
       example.b, but not example.0)

   Note: a backslash (\) is not valid within a glob pattern. If
   you have an existing file path to match against, consider to
   use the [2129]relative pattern support that takes care of
   converting any backslash into slash. Otherwise, make sure to
   convert any backslash to slash when creating the glob pattern.

   GlobPattern: string | [2130]RelativePattern

Hover

   A hover represents additional information for a symbol or word.
   Hovers are rendered in a tooltip-like widget.

Constructors

   new Hover(contents: [2131]MarkedString | [2132]MarkedString[],
   range?: [2133]Range): [2134]Hover

   Creates a new hover object.
   Parameter Description
   contents: [2135]MarkedString | [2136]MarkedString[]

   The contents of the hover.
   range?: [2137]Range

   The range to which the hover applies.
   Returns Description
   [2138]Hover

Properties

   contents: [2139]MarkedString[]

   The contents of this hover.

   range?: [2140]Range

   The range to which this hover applies. When missing, the editor
   will use the range at the current position or the current
   position itself.

HoverProvider

   The hover provider interface defines the contract between
   extensions and the [2141]hover-feature.

   [2141] https://code.visualstudio.com/docs/editor/intellisense

Methods

   provideHover(document: [2142]TextDocument, position:
   [2143]Position, token: [2144]CancellationToken):
   [2145]ProviderResult<[2146]Hover>

   Provide a hover for the given position and document. Multiple
   hovers at the same position will be merged by the editor. A
   hover can have a range which defaults to the word range at the
   position when omitted.
   Parameter Description
   document: [2147]TextDocument

   The document in which the command was invoked.
   position: [2148]Position

   The position at which the command was invoked.
   token: [2149]CancellationToken

   A cancellation token.
   Returns Description
   [2150]ProviderResult<[2151]Hover>

   A hover or a thenable that resolves to such. The lack of a
   result can be signaled by returning undefined or null.

ImplementationProvider

   The implementation provider interface defines the contract
   between extensions and the go to implementation feature.

Methods

   provideImplementation(document: [2152]TextDocument, position:
   [2153]Position, token: [2154]CancellationToken):
   [2155]ProviderResult<[2156]Definition | [2157]DefinitionLink[]>

   Provide the implementations of the symbol at the given position
   and document.
   Parameter Description
   document: [2158]TextDocument

   The document in which the command was invoked.
   position: [2159]Position

   The position at which the command was invoked.
   token: [2160]CancellationToken

   A cancellation token.
   Returns Description
   [2161]ProviderResult<[2162]Definition | [2163]DefinitionLink[]>

   A definition or a thenable that resolves to such. The lack of a
   result can be signaled by returning undefined or null.

IndentAction

   Describes what to do with the indentation when pressing Enter.

Enumeration members

   Indent
   1

   IndentOutdent
   2

   None
   0

   Outdent
   3

IndentationRule

   Describes indentation rules for a language.

Properties

   decreaseIndentPattern: [2164]RegExp

   If a line matches this pattern, then all the lines after it
   should be unindented once (until another rule matches).

   increaseIndentPattern: [2165]RegExp

   If a line matches this pattern, then all the lines after it
   should be indented once (until another rule matches).

   indentNextLinePattern?: [2166]RegExp

   If a line matches this pattern, then only the next line after
   it should be indented once.

   unIndentedLinePattern?: [2167]RegExp

   If a line matches this pattern, then its indentation should not
   be changed and it should not be evaluated against the other
   rules.

InputBox

   A concrete [2168]QuickInput to let the user input a text value.

   Note that in many cases the more convenient
   [2169]window.showInputBox is easier to use.
   [2170]window.createInputBox should be used when
   [2171]window.showInputBox does not offer the required
   flexibility.

Events

   onDidAccept: [2172]Event<void>

   An event signaling when the user indicated acceptance of the
   input value.

   onDidChangeValue: [2173]Event<string>

   An event signaling when the value has changed.

   onDidHide: [2174]Event<void>

   An event signaling when this input UI is hidden.

   There are several reasons why this UI might have to be hidden
   and the extension will be notified through
   [2175]QuickInput.onDidHide. (Examples include: an explicit call
   to [2176]QuickInput.hide, the user pressing Esc, some other
   input UI opening, etc.)

   onDidTriggerButton: [2177]Event<[2178]QuickInputButton>

   An event signaling when a button was triggered.

Properties

   busy: boolean

   If the UI should show a progress indicator. Defaults to false.

   Change this to true, e.g., while loading more data or
   validating user input.

   buttons: [2179]ReadonlyArray<[2180]QuickInputButton>

   Buttons for actions in the UI.

   enabled: boolean

   If the UI should allow for user input. Defaults to true.

   Change this to false, e.g., while validating user input or
   loading data for the next step in user input.

   ignoreFocusOut: boolean

   If the UI should stay open even when loosing UI focus. Defaults
   to false.

   password: boolean

   If the input value should be hidden. Defaults to false.

   placeholder: string | undefined

   Optional placeholder in the filter text.

   prompt: string | undefined

   An optional prompt text providing some ask or explanation to
   the user.

   step: number | undefined

   An optional current step count.

   title: string | undefined

   An optional title.

   totalSteps: number | undefined

   An optional total step count.

   validationMessage: string | undefined

   An optional validation message indicating a problem with the
   current input value.

   value: string

   Current input value.

Methods

   dispose(): void

   Dispose of this input UI and any associated resources. If it is
   still visible, it is first hidden. After this call the input UI
   is no longer functional and no additional methods or properties
   on it should be accessed. Instead a new input UI should be
   created.
   Returns Description
   void

   hide(): void

   Hides this input UI. This will also fire an
   [2181]QuickInput.onDidHide event.
   Returns Description
   void

   show(): void

   Makes the input UI visible in its current configuration. Any
   other input UI will first fire an [2182]QuickInput.onDidHide
   event.
   Returns Description
   void

InputBoxOptions

   Options to configure the behavior of the input box UI.

Properties

   ignoreFocusOut?: boolean

   Set to true to keep the input box open when focus moves to
   another part of the editor or to another window.

   password?: boolean

   Controls if a password input is shown. Password input hides the
   typed text.

   placeHolder?: string

   An optional string to show as placeholder in the input box to
   guide the user what to type.

   prompt?: string

   The text to display underneath the input box.

   value?: string

   The value to prefill in the input box.

   valueSelection?: [number, number]

   Selection of the prefilled [2183]value. Defined as tuple of two
   number where the first is the inclusive start index and the
   second the exclusive end index. When undefined the whole word
   will be selected, when empty (start equals end) only the cursor
   will be set, otherwise the defined range will be selected.

Methods

   validateInput(value: string): string | undefined | null |
   [2184]Thenable<string | undefined | null>

   An optional function that will be called to validate input and
   to give a hint to the user.
   Parameter Description
   value: string

   The current value of the input box.
   Returns Description
   string | undefined | null | [2185]Thenable<string | undefined |
   null>

   A human-readable string which is presented as diagnostic
   message. Return undefined, null, or the empty string when
   'value' is valid.

LanguageConfiguration

   The language configuration interfaces defines the contract
   between extensions and various editor features, like automatic
   bracket insertion, automatic indentation etc.

Properties

   __characterPairSupport?: {autoClosingPairs: {close: string,
   notIn: string[], open: string}[]}

   Deprecated Do not use.
     * deprecated - * Use the autoClosingPairs property in the
       language configuration file instead.

   __electricCharacterSupport?: {brackets: any, docComment:
   {close: string, lineStart: string, open: string, scope:
   string}}

   Deprecated Do not use.
     * deprecated - Will be replaced by a better API soon.

   brackets?: [2186]CharacterPair[]

   The language's brackets. This configuration implicitly affects
   pressing Enter around these brackets.

   comments?: [2187]CommentRule

   The language's comment settings.

   indentationRules?: [2188]IndentationRule

   The language's indentation settings.

   onEnterRules?: [2189]OnEnterRule[]

   The language's rules to be evaluated when pressing Enter.

   wordPattern?: [2190]RegExp

   The language's word definition. If the language supports
   Unicode identifiers (e.g. JavaScript), it is preferable to
   provide a word definition that uses exclusion of known
   separators. e.g.: A regex that matches anything except known
   separators (and dot is allowed to occur in a floating point
   number):
   /(-?\d.\d\w)|([^`~!\@@#\%\^\&*()-\=+[{]}\|\;\:\'\"\,.\<>\/\?\s]
   +)/g

Location

   Represents a location inside a resource, such as a line inside
   a text file.

Constructors

   new Location(uri: [2191]Uri, rangeOrPosition: [2192]Range |
   [2193]Position): [2194]Location

   Creates a new location object.
   Parameter Description
   uri: [2195]Uri

   The resource identifier.
   rangeOrPosition: [2196]Range | [2197]Position

   The range or position. Positions will be converted to an empty
   range.
   Returns Description
   [2198]Location

Properties

   range: [2199]Range

   The document range of this location.

   uri: [2200]Uri

   The resource identifier of this location.

LocationLink

   Represents the connection of two locations. Provides additional
   metadata over normal [2201]locations, including an origin
   range.

Properties

   originSelectionRange?: [2202]Range

   Span of the origin of this link.

   Used as the underlined span for mouse definition hover.
   Defaults to the word range at the definition position.

   targetRange: [2203]Range

   The full target range of this link.

   targetSelectionRange?: [2204]Range

   The span of this link.

   targetUri: [2205]Uri

   The target resource identifier of this link.

MarkdownString

   The MarkdownString represents human-readable text that supports
   formatting via the markdown syntax. Standard markdown is
   supported, also tables, but no embedded html.

   When created with supportThemeIcons then rendering of
   [2206]theme icons via the $(<name>)-syntax is supported.

Constructors

   new MarkdownString(value?: string, supportThemeIcons?:
   boolean): [2207]MarkdownString

   Creates a new markdown string with the given value.
   Parameter Description
   value?: string

   Optional, initial value.
   supportThemeIcons?: boolean

   Optional, Specifies whether [2208]ThemeIcons are supported
   within the [2209]MarkdownString.
   Returns Description
   [2210]MarkdownString

Properties

   isTrusted?: boolean

   Indicates that this markdown string is from a trusted source.
   Only trusted markdown supports links that execute commands,
   e.g. [Run it](command:myCommandId).

   supportThemeIcons?: boolean

   Indicates that this markdown string can contain
   [2211]ThemeIcons, e.g. $(zap).

   value: string

   The markdown string.

Methods

   appendCodeblock(value: string, language?: string):
   [2212]MarkdownString

   Appends the given string as codeblock using the provided
   language.
        Parameter                    Description
   value: string

                        A code snippet.
   language?: string

                        An optional [2213]language identifier.
         Returns                     Description
   [2214]MarkdownString

   appendMarkdown(value: string): [2215]MarkdownString

   Appends the given string 'as is' to this markdown string. When
   [2216]supportThemeIcons is true, [2217]ThemeIcons in the value
   will be iconified.
        Parameter         Description
   value: string

                        Markdown string.
         Returns          Description
   [2218]MarkdownString

   appendText(value: string): [2219]MarkdownString

   Appends and escapes the given string to this markdown string.
        Parameter       Description
   value: string

                        Plain text.
         Returns        Description
   [2220]MarkdownString

MarkedString

   MarkedString can be used to render human-readable text. It is
   either a markdown string or a code-block that provides a
   language and a code snippet. Note that markdown strings will be
   sanitized - that means html will be escaped.
     * deprecated - This type is deprecated, please use
       [2221]MarkdownString instead.

   MarkedString: [2222]MarkdownString | string | {language:
   string, value: string}

Memento

   A memento represents a storage utility. It can store and
   retrieve values.

Methods

   get<T>(key: string): T | undefined

   Return a value.
     Parameter            Description
   key: string

                 A string.
      Returns             Description
   T | undefined

                 The stored value or undefined.

   get<T>(key: string, defaultValue: T): T

   Return a value.
     Parameter                         Description
  key: string

                  A string.
  defaultValue: T

                  A value that should be returned when there is no value
                  (undefined) with the given key.
      Returns                          Description
  T

                  The stored value or the defaultValue.

   update(key: string, value: any): [2223]Thenable<void>

   Store a value. The value must be JSON-stringifyable.
        Parameter                       Description
   key: string

                        A string.
   value: any

                        A value. MUST not contain cyclic references.
         Returns                        Description
   [2224]Thenable<void>

MessageItem

   Represents an action that is shown with an information,
   warning, or error message.
     * see - [2225]showInformationMessage

     * see - [2226]showWarningMessage

     * see - [2227]showErrorMessage

Properties

   isCloseAffordance?: boolean

   A hint for modal dialogs that the item should be triggered when
   the user cancels the dialog (e.g. by pressing the ESC key).

   Note: this option is ignored for non-modal messages.

   title: string

   A short title like 'Retry', 'Open Log' etc.

MessageOptions

   Options to configure the behavior of the message.
     * see - [2228]showInformationMessage

     * see - [2229]showWarningMessage

     * see - [2230]showErrorMessage

Properties

   modal?: boolean

   Indicates that this message should be modal.

OnEnterRule

   Describes a rule to be evaluated when pressing Enter.

Properties

   action: [2231]EnterAction

   The action to execute.

   afterText?: [2232]RegExp

   This rule will only execute if the text after the cursor
   matches this regular expression.

   beforeText: [2233]RegExp

   This rule will only execute if the text before the cursor
   matches this regular expression.

OnTypeFormattingEditProvider

   The document formatting provider interface defines the contract
   between extensions and the formatting-feature.

Methods

   provideOnTypeFormattingEdits(document: [2234]TextDocument,
   position: [2235]Position, ch: string, options:
   [2236]FormattingOptions, token: [2237]CancellationToken):
   [2238]ProviderResult<[2239]TextEdit[]>

   Provide formatting edits after a character has been typed.

   The given position and character should hint to the provider
   what range the position to expand to, like find the matching {
   when } has been entered.
   Parameter Description
   document: [2240]TextDocument

   The document in which the command was invoked.
   position: [2241]Position

   The position at which the command was invoked.
   ch: string

   The character that has been typed.
   options: [2242]FormattingOptions

   Options controlling formatting.
   token: [2243]CancellationToken

   A cancellation token.
   Returns Description
   [2244]ProviderResult<[2245]TextEdit[]>

   A set of text edits or a thenable that resolves to such. The
   lack of a result can be signaled by returning undefined, null,
   or an empty array.

OpenDialogOptions

   Options to configure the behaviour of a file open dialog.
     * Note 1: A dialog can select files, folders, or both. This
       is not true for Windows which enforces to open either files
       or folder, but not both.
     * Note 2: Explicitly setting canSelectFiles and
       canSelectFolders to false is futile and the editor then
       silently adjusts the options to select files.

Properties

   canSelectFiles?: boolean

   Allow to select files, defaults to true.

   canSelectFolders?: boolean

   Allow to select folders, defaults to false.

   canSelectMany?: boolean

   Allow to select many files or folders.

   defaultUri?: [2246]Uri

   The resource the dialog shows when opened.

   filters?:

   A set of file filters that are used by the dialog. Each entry
   is a human-readable label, like "TypeScript", and an array of
   extensions, e.g.
{
    'Images': ['png', 'jpg']
    'TypeScript': ['ts', 'tsx']
}

   openLabel?: string

   A human-readable string for the open button.

   title?: string

   Dialog title.

   This parameter might be ignored, as not all operating systems
   display a title on open dialogs (for example, macOS).

OutputChannel

   An output channel is a container for readonly textual
   information.

   To get an instance of an OutputChannel use
   [2247]createOutputChannel.

Properties

   name: string

   The human-readable name of this output channel.

Methods

   append(value: string): void

   Append the given value to the channel.
     Parameter                   Description
   value: string

                 A string, falsy values will not be printed.
      Returns                    Description
   void

   appendLine(value: string): void

   Append the given value and a line feed character to the
   channel.
     Parameter                 Description
   value: string

                 A string, falsy values will be printed.
      Returns                  Description
   void

   clear(): void

   Removes all output from the channel.
   Returns Description
   void

   dispose(): void

   Dispose and free associated resources.
   Returns Description
   void

   hide(): void

   Hide this channel from the UI.
   Returns Description
   void

   show(preserveFocus?: boolean): void

   Reveal this channel in the UI.
          Parameter                       Description
   preserveFocus?: boolean

                           When true the channel will not take focus.
           Returns                        Description
   void

   show(column?: [2248]ViewColumn, preserveFocus?: boolean): void

   Reveal this channel in the UI.
     * deprecated - Use the overload with just one parameter
       (show(preserveFocus?: boolean): void).

   Parameter Description
   column?: [2249]ViewColumn

   This argument is deprecated and will be ignored.
   preserveFocus?: boolean

   When true the channel will not take focus.
   Returns Description
   void

OverviewRulerLane

   Represents different positions for rendering a decoration in an
   [2250]overview ruler. The overview ruler supports three lanes.

Enumeration members

   Center
   2

   Full
   7

   Left
   1

   Right
   4

ParameterInformation

   Represents a parameter of a callable-signature. A parameter can
   have a label and a doc-comment.

Constructors

   new ParameterInformation(label: string | [number, number],
   documentation?: string | [2251]MarkdownString):
   [2252]ParameterInformation

   Creates a new parameter information object.
   Parameter Description
   label: string | [number, number]

   A label string or inclusive start and exclusive end offsets
   within its containing signature label.
   documentation?: string | [2253]MarkdownString

   A doc string.
   Returns Description
   [2254]ParameterInformation

Properties

   documentation?: string | [2255]MarkdownString

   The human-readable doc-comment of this signature. Will be shown
   in the UI but can be omitted.

   label: string | [number, number]

   The label of this signature.

   Either a string or inclusive start and exclusive end offsets
   within its containing [2256]signature label. Note: A label of
   type string must be a substring of its containing signature
   information's [2257]label.

Position

   Represents a line and character position, such as the position
   of the cursor.

   Position objects are immutable. Use the [2258]with or
   [2259]translate methods to derive new positions from an
   existing position.

Constructors

   new Position(line: number, character: number): [2260]Position
       Parameter              Description
   line: number

                     A zero-based line value.
   character: number

                     A zero-based character value.
        Returns               Description
   [2261]Position

Properties

   character: number

   The zero-based character value.

   line: number

   The zero-based line value.

Methods

   compareTo(other: [2262]Position): number

   Compare this to other.
   Parameter Description
   other: [2263]Position

   A position.
   Returns Description
   number

   A number smaller than zero if this position is before the given
   position, a number greater than zero if this position is after
   the given position, or zero when this and the given position
   are equal.

   isAfter(other: [2264]Position): boolean

   Check if this position is after other.
   Parameter Description
   other: [2265]Position

   A position.
   Returns Description
   boolean

   true if position is on a greater line or on the same line on a
   greater character.

   isAfterOrEqual(other: [2266]Position): boolean

   Check if this position is after or equal to other.
   Parameter Description
   other: [2267]Position

   A position.
   Returns Description
   boolean

   true if position is on a greater line or on the same line on a
   greater or equal character.

   isBefore(other: [2268]Position): boolean

   Check if this position is before other.
   Parameter Description
   other: [2269]Position

   A position.
   Returns Description
   boolean

   true if position is on a smaller line or on the same line on a
   smaller character.

   isBeforeOrEqual(other: [2270]Position): boolean

   Check if this position is before or equal to other.
   Parameter Description
   other: [2271]Position

   A position.
   Returns Description
   boolean

   true if position is on a smaller line or on the same line on a
   smaller or equal character.

   isEqual(other: [2272]Position): boolean

   Check if this position is equal to other.
   Parameter Description
   other: [2273]Position

   A position.
   Returns Description
   boolean

   true if the line and character of the given position are equal
   to the line and character of this position.

   translate(lineDelta?: number, characterDelta?: number):
   [2274]Position

   Create a new position relative to this position.
   Parameter Description
   lineDelta?: number

   Delta value for the line value, default is 0.
   characterDelta?: number

   Delta value for the character value, default is 0.
   Returns Description
   [2275]Position

   A position which line and character is the sum of the current
   line and character and the corresponding deltas.

   translate(change: {characterDelta: number, lineDelta: number}):
   [2276]Position

   Derived a new position relative to this position.
   Parameter Description
   change: {characterDelta: number, lineDelta: number}

   An object that describes a delta to this position.
   Returns Description
   [2277]Position

   A position that reflects the given delta. Will return this
   position if the change is not changing anything.

   with(line?: number, character?: number): [2278]Position

   Create a new position derived from this position.
   Parameter Description
   line?: number

   Value that should be used as line value, default is the
   [2279]existing value
   character?: number

   Value that should be used as character value, default is the
   [2280]existing value
   Returns Description
   [2281]Position

   A position where line and character are replaced by the given
   values.

   with(change: {character: number, line: number}): [2282]Position

   Derived a new position from this position.
   Parameter Description
   change: {character: number, line: number}

   An object that describes a change to this position.
   Returns Description
   [2283]Position

   A position that reflects the given change. Will return this
   position if the change is not changing anything.

ProcessExecution

   The execution of a task happens as an external process without
   shell interaction.

Constructors

   new ProcessExecution(process: string, options?:
   [2284]ProcessExecutionOptions): [2285]ProcessExecution

   Creates a process execution.
   Parameter Description
   process: string

   The process to start.
   options?: [2286]ProcessExecutionOptions

   Optional options for the started process.
   Returns Description
   [2287]ProcessExecution

   new ProcessExecution(process: string, args: string[], options?:
   [2288]ProcessExecutionOptions): [2289]ProcessExecution

   Creates a process execution.
   Parameter Description
   process: string

   The process to start.
   args: string[]

   Arguments to be passed to the process.
   options?: [2290]ProcessExecutionOptions

   Optional options for the started process.
   Returns Description
   [2291]ProcessExecution

Properties

   args: string[]

   The arguments passed to the process. Defaults to an empty
   array.

   options?: [2292]ProcessExecutionOptions

   The process options used when the process is executed. Defaults
   to undefined.

   process: string

   The process to be executed.

ProcessExecutionOptions

   Options for a process execution

Properties

   cwd?: string

   The current working directory of the executed program or shell.
   If omitted the tools current workspace root is used.

   env?:

   The additional environment of the executed program or shell. If
   omitted the parent process' environment is used. If provided it
   is merged with the parent process' environment.

Progress<T>

   Defines a generalized way of reporting progress updates.

Methods

   report(value: T): void

   Report a progress update.
  Parameter                         Description
  value: T

            A progress item, like a message and/or an report on how much
            work finished
   Returns                          Description
  void

ProgressLocation

   A location in the editor at which progress information can be
   shown. It depends on the location how progress is visually
   represented.

Enumeration members

   Notification
   15

   SourceControl
   1

   Window
   10

ProgressOptions

   Value-object describing where and how progress should show.

Properties

   cancellable?: boolean

   Controls if a cancel button should show to allow the user to
   cancel the long running operation. Note that currently only
   ProgressLocation.Notification is supporting to show a cancel
   button.

   location: [2293]ProgressLocation | {viewId: string}

   The location at which progress should show.

   title?: string

   A human-readable string which will be used to describe the
   operation.

ProviderResult<T>

   A provider result represents the values a provider, like the
   [2294]HoverProvider, may return. For once this is the actual
   result type T, like Hover, or a thenable that resolves to that
   type T. In addition, null and undefined can be returned -
   either directly or from a thenable.

   The snippets below are all valid implementations of the
   [2295]HoverProvider:
let a: HoverProvider = {
    provideHover(doc, pos, token): ProviderResult<Hover> {
        return new Hover('Hello World');
    }
}

let b: HoverProvider = {
    provideHover(doc, pos, token): ProviderResult<Hover> {
        return new Promise(resolve => {
            resolve(new Hover('Hello World'));
         });
    }
}

let c: HoverProvider = {
    provideHover(doc, pos, token): ProviderResult<Hover> {
        return; // undefined
    }
}

   ProviderResult: T | undefined | null | [2296]Thenable<T |
   undefined | null>

Pseudoterminal

   Defines the interface of a terminal pty, enabling extensions to
   control a terminal.

Events

   onDidClose?: [2297]Event<void | number>

   An event that when fired will signal that the pty is closed and
   dispose of the terminal.

   A number can be used to provide an exit code for the terminal.
   Exit codes must be positive and a non-zero exit codes signals
   failure which shows a notification for a regular terminal and
   allows dependent tasks to proceed when used with the
   CustomExecution API.

   Example: Exit the terminal when "y" is pressed, otherwise show
   a notification.
const writeEmitter = new vscode.EventEmitter<string>();
const closeEmitter = new vscode.EventEmitter<vscode.TerminalDimensions>(
);
const pty: vscode.Pseudoterminal = {
  onDidWrite: writeEmitter.event,
  onDidClose: closeEmitter.event,
  open: () => writeEmitter.fire('Press y to exit successfully'),
  close: () => {},
  handleInput: data => {
    if (data !== 'y') {
      vscode.window.showInformationMessage('Something went wrong');
    }
    closeEmitter.fire();
  }
};
vscode.window.createTerminal({ name: 'Exit example', pty });

   onDidOverrideDimensions?: [2298]Event<[2299]TerminalDimensions
   | undefined>

   An event that when fired allows overriding the [2300]dimensions
   of the terminal. Note that when set, the overridden dimensions
   will only take effect when they are lower than the actual
   dimensions of the terminal (ie. there will never be a scroll
   bar). Set to undefined for the terminal to go back to the
   regular dimensions (fit to the size of the panel).

   Example: Override the dimensions of a terminal to 20 columns
   and 10 rows
const dimensionsEmitter = new vscode.EventEmitter<vscode.TerminalDimensi
ons>();
const pty: vscode.Pseudoterminal = {
  onDidWrite: writeEmitter.event,
  onDidOverrideDimensions: dimensionsEmitter.event,
  open: () => {
    dimensionsEmitter.fire({
      columns: 20,
      rows: 10
    });
  },
  close: () => {}
};
vscode.window.createTerminal({ name: 'My terminal', pty });

   onDidWrite: [2301]Event<string>

   An event that when fired will write data to the terminal.
   Unlike [2302]Terminal.sendText which sends text to the
   underlying child pseudo-device (the child), this will write the
   text to parent pseudo-device (the terminal itself).

   Note writing \n will just move the cursor down 1 row, you need
   to write \r as well to move the cursor to the left-most cell.

   Example: Write red text to the terminal
const writeEmitter = new vscode.EventEmitter<string>();
const pty: vscode.Pseudoterminal = {
  onDidWrite: writeEmitter.event,
  open: () => writeEmitter.fire('\x1b[31mHello world\x1b[0m'),
  close: () => {}
};
vscode.window.createTerminal({ name: 'My terminal', pty });

   Example: Move the cursor to the 10th row and 20th column and
   write an asterisk
writeEmitter.fire('\x1b[10;20H*');

Methods

   close(): void

   Implement to handle when the terminal is closed by an act of
   the user.
   Returns Description
   void

   handleInput(data: string): void

   Implement to handle incoming keystrokes in the terminal or when
   an extension calls [2303]Terminal.sendText. data contains the
   keystrokes/text serialized into their corresponding VT sequence
   representation.
   Parameter Description
   data: string

   The incoming data.

   Example: Echo input in the terminal. The sequence for enter
   (\r) is translated to CRLF to go to a new line and move the
   cursor to the start of the line.
const writeEmitter = new vscode.EventEmitter<string>();
const pty: vscode.Pseudoterminal = {
  onDidWrite: writeEmitter.event,
  open: () => {},
  close: () => {},
  handleInput: data => writeEmitter.fire(data === '\r' ? '\r\n' : data)
};
vscode.window.createTerminal({ name: 'Local echo', pty });

   Returns Description
   void

   open(initialDimensions: [2304]TerminalDimensions | undefined):
   void

   Implement to handle when the pty is open and ready to start
   firing events.
   Parameter Description
   initialDimensions: [2305]TerminalDimensions | undefined

   The dimensions of the terminal, this will be undefined if the
   terminal panel has not been opened before this is called.
   Returns Description
   void

   setDimensions(dimensions: [2306]TerminalDimensions): void

   Implement to handle when the number of rows and columns that
   fit into the terminal panel changes, for example when font size
   changes or when the panel is resized. The initial state of a
   terminal's dimensions should be treated as undefined until this
   is triggered as the size of a terminal isn't know until it
   shows up in the user interface.

   When dimensions are overridden by
   [2307]onDidOverrideDimensions, setDimensions will continue to
   be called with the regular panel dimensions, allowing the
   extension continue to react dimension changes.
                Parameter                   Description
   dimensions: [2308]TerminalDimensions

                                        The new dimensions.
                 Returns                    Description
   void

QuickDiffProvider

Methods

   provideOriginalResource(uri: [2309]Uri, token:
   [2310]CancellationToken): [2311]ProviderResult<[2312]Uri>

   Provide a [2313]uri to the original resource of any given
   resource uri.
   Parameter Description
   uri: [2314]Uri

   The uri of the resource open in a text editor.
   token: [2315]CancellationToken

   A cancellation token.
   Returns Description
   [2316]ProviderResult<[2317]Uri>

   A thenable that resolves to uri of the matching original
   resource.

QuickInput

   A light-weight user input UI that is initially not visible.
   After configuring it through its properties the extension can
   make it visible by calling [2318]QuickInput.show.

   There are several reasons why this UI might have to be hidden
   and the extension will be notified through
   [2319]QuickInput.onDidHide. (Examples include: an explicit call
   to [2320]QuickInput.hide, the user pressing Esc, some other
   input UI opening, etc.)

   A user pressing Enter or some other gesture implying acceptance
   of the current state does not automatically hide this UI
   component. It is up to the extension to decide whether to
   accept the user's input and if the UI should indeed be hidden
   through a call to [2321]QuickInput.hide.

   When the extension no longer needs this input UI, it should
   [2322]QuickInput.dispose it to allow for freeing up any
   resources associated with it.

   See [2323]QuickPick and [2324]InputBox for concrete UIs.

Events

   onDidHide: [2325]Event<void>

   An event signaling when this input UI is hidden.

   There are several reasons why this UI might have to be hidden
   and the extension will be notified through
   [2326]QuickInput.onDidHide. (Examples include: an explicit call
   to [2327]QuickInput.hide, the user pressing Esc, some other
   input UI opening, etc.)

Properties

   busy: boolean

   If the UI should show a progress indicator. Defaults to false.

   Change this to true, e.g., while loading more data or
   validating user input.

   enabled: boolean

   If the UI should allow for user input. Defaults to true.

   Change this to false, e.g., while validating user input or
   loading data for the next step in user input.

   ignoreFocusOut: boolean

   If the UI should stay open even when loosing UI focus. Defaults
   to false.

   step: number | undefined

   An optional current step count.

   title: string | undefined

   An optional title.

   totalSteps: number | undefined

   An optional total step count.

Methods

   dispose(): void

   Dispose of this input UI and any associated resources. If it is
   still visible, it is first hidden. After this call the input UI
   is no longer functional and no additional methods or properties
   on it should be accessed. Instead a new input UI should be
   created.
   Returns Description
   void

   hide(): void

   Hides this input UI. This will also fire an
   [2328]QuickInput.onDidHide event.
   Returns Description
   void

   show(): void

   Makes the input UI visible in its current configuration. Any
   other input UI will first fire an [2329]QuickInput.onDidHide
   event.
   Returns Description
   void

QuickInputButton

   Button for an action in a [2330]QuickPick or [2331]InputBox.

Properties

   iconPath: [2332]Uri | {dark: [2333]Uri, light: [2334]Uri} |
   [2335]ThemeIcon

   Icon for the button.

   tooltip?: string | undefined

   An optional tooltip.

QuickInputButtons

   Predefined buttons for [2336]QuickPick and [2337]InputBox.

Static

   Back: [2338]QuickInputButton

   A back button for [2339]QuickPick and [2340]InputBox.

   When a navigation 'back' button is needed this one should be
   used for consistency. It comes with a predefined icon, tooltip
   and location.

QuickPick<T>

   A concrete [2341]QuickInput to let the user pick an item from a
   list of items of type T. The items can be filtered through a
   filter text field and there is an option [2342]canSelectMany to
   allow for selecting multiple items.

   Note that in many cases the more convenient
   [2343]window.showQuickPick is easier to use.
   [2344]window.createQuickPick should be used when
   [2345]window.showQuickPick does not offer the required
   flexibility.

Events

   onDidAccept: [2346]Event<void>

   An event signaling when the user indicated acceptance of the
   selected item(s).

   onDidChangeActive: [2347]Event<T[]>

   An event signaling when the active items have changed.

   onDidChangeSelection: [2348]Event<T[]>

   An event signaling when the selected items have changed.

   onDidChangeValue: [2349]Event<string>

   An event signaling when the value of the filter text has
   changed.

   onDidHide: [2350]Event<void>

   An event signaling when this input UI is hidden.

   There are several reasons why this UI might have to be hidden
   and the extension will be notified through
   [2351]QuickInput.onDidHide. (Examples include: an explicit call
   to [2352]QuickInput.hide, the user pressing Esc, some other
   input UI opening, etc.)

   onDidTriggerButton: [2353]Event<[2354]QuickInputButton>

   An event signaling when a button was triggered.

Properties

   activeItems: [2355]ReadonlyArray<T>

   Active items. This can be read and updated by the extension.

   busy: boolean

   If the UI should show a progress indicator. Defaults to false.

   Change this to true, e.g., while loading more data or
   validating user input.

   buttons: [2356]ReadonlyArray<[2357]QuickInputButton>

   Buttons for actions in the UI.

   canSelectMany: boolean

   If multiple items can be selected at the same time. Defaults to
   false.

   enabled: boolean

   If the UI should allow for user input. Defaults to true.

   Change this to false, e.g., while validating user input or
   loading data for the next step in user input.

   ignoreFocusOut: boolean

   If the UI should stay open even when loosing UI focus. Defaults
   to false.

   items: [2358]ReadonlyArray<T>

   Items to pick from.

   matchOnDescription: boolean

   If the filter text should also be matched against the
   description of the items. Defaults to false.

   matchOnDetail: boolean

   If the filter text should also be matched against the detail of
   the items. Defaults to false.

   placeholder: string | undefined

   Optional placeholder in the filter text.

   selectedItems: [2359]ReadonlyArray<T>

   Selected items. This can be read and updated by the extension.

   step: number | undefined

   An optional current step count.

   title: string | undefined

   An optional title.

   totalSteps: number | undefined

   An optional total step count.

   value: string

   Current value of the filter text.

Methods

   dispose(): void

   Dispose of this input UI and any associated resources. If it is
   still visible, it is first hidden. After this call the input UI
   is no longer functional and no additional methods or properties
   on it should be accessed. Instead a new input UI should be
   created.
   Returns Description
   void

   hide(): void

   Hides this input UI. This will also fire an
   [2360]QuickInput.onDidHide event.
   Returns Description
   void

   show(): void

   Makes the input UI visible in its current configuration. Any
   other input UI will first fire an [2361]QuickInput.onDidHide
   event.
   Returns Description
   void

QuickPickItem

   Represents an item that can be selected from a list of items.

Properties

   alwaysShow?: boolean

   Always show this item.

   description?: string

   A human-readable string which is rendered less prominent in the
   same line. Supports rendering of [2362]theme icons via the
   $(<name>)-syntax.

   detail?: string

   A human-readable string which is rendered less prominent in a
   separate line. Supports rendering of [2363]theme icons via the
   $(<name>)-syntax.

   label: string

   A human-readable string which is rendered prominent. Supports
   rendering of [2364]theme icons via the $(<name>)-syntax.

   picked?: boolean

   Optional flag indicating if this item is picked initially.
   (Only honored when the picker allows multiple selections.)
     * see - [2365]QuickPickOptions.canPickMany

QuickPickOptions

   Options to configure the behavior of the quick pick UI.

Events

   onDidSelectItem(item: [2366]QuickPickItem | string): any

   An optional function that is invoked whenever an item is
   selected.
               Parameter              Description
   item: [2367]QuickPickItem | string
                Returns               Description
   any

Properties

   canPickMany?: boolean

   An optional flag to make the picker accept multiple selections,
   if true the result is an array of picks.

   ignoreFocusOut?: boolean

   Set to true to keep the picker open when focus moves to another
   part of the editor or to another window.

   matchOnDescription?: boolean

   An optional flag to include the description when filtering the
   picks.

   matchOnDetail?: boolean

   An optional flag to include the detail when filtering the
   picks.

   placeHolder?: string

   An optional string to show as placeholder in the input box to
   guide the user what to pick on.

Range

   A range represents an ordered pair of two positions. It is
   guaranteed that [2368]start.isBeforeOrEqual([2369]end)

   Range objects are immutable. Use the [2370]with,
   [2371]intersection, or [2372]union methods to derive new ranges
   from an existing range.

Constructors

   new Range(start: [2373]Position, end: [2374]Position):
   [2375]Range

   Create a new range from two positions. If start is not before
   or equal to end, the values will be swapped.
         Parameter       Description
   start: [2376]Position

                         A position.
   end: [2377]Position

                         A position.
          Returns        Description
   [2378]Range

   new Range(startLine: number, startCharacter: number, endLine:
   number, endCharacter: number): [2379]Range

   Create a new range from number coordinates. It is a shorter
   equivalent of using new Range(new Position(startLine,
   startCharacter), new Position(endLine, endCharacter))
         Parameter                 Description
   startLine: number

                          A zero-based line value.
   startCharacter: number

                          A zero-based character value.
   endLine: number

                          A zero-based line value.
   endCharacter: number

                          A zero-based character value.
          Returns                  Description
   [2380]Range

Properties

   end: [2381]Position

   The end position. It is after or equal to [2382]start.

   isEmpty: boolean

   true if start and end are equal.

   isSingleLine: boolean

   true if start.line and end.line are equal.

   start: [2383]Position

   The start position. It is before or equal to [2384]end.

Methods

   contains(positionOrRange: [2385]Position | [2386]Range):
   boolean

   Check if a position or a range is contained in this range.
   Parameter Description
   positionOrRange: [2387]Position | [2388]Range

   A position or a range.
   Returns Description
   boolean

   true if the position or range is inside or equal to this range.

   intersection(range: [2389]Range): [2390]Range | undefined

   Intersect range with this range and returns a new range or
   undefined if the ranges have no overlap.
   Parameter Description
   range: [2391]Range

   A range.
   Returns Description
   [2392]Range | undefined

   A range of the greater start and smaller end positions. Will
   return undefined when there is no overlap.

   isEqual(other: [2393]Range): boolean

   Check if other equals this range.
   Parameter Description
   other: [2394]Range

   A range.
   Returns Description
   boolean

   true when start and end are [2395]equal to start and end of
   this range.

   union(other: [2396]Range): [2397]Range

   Compute the union of other with this range.
   Parameter Description
   other: [2398]Range

   A range.
   Returns Description
   [2399]Range

   A range of smaller start position and the greater end position.

   with(start?: [2400]Position, end?: [2401]Position): [2402]Range

   Derived a new range from this range.
   Parameter Description
   start?: [2403]Position

   A position that should be used as start. The default value is
   the [2404]current start.
   end?: [2405]Position

   A position that should be used as end. The default value is the
   [2406]current end.
   Returns Description
   [2407]Range

   A range derived from this range with the given start and end
   position. If start and end are not different this range will be
   returned.

   with(change: {end: [2408]Position, start: [2409]Position}):
   [2410]Range

   Derived a new range from this range.
   Parameter Description
   change: {end: [2411]Position, start: [2412]Position}

   An object that describes a change to this range.
   Returns Description
   [2413]Range

   A range that reflects the given change. Will return this range
   if the change is not changing anything.

ReferenceContext

   Value-object that contains additional information when
   requesting references.

Properties

   includeDeclaration: boolean

   Include the declaration of the current symbol.

ReferenceProvider

   The reference provider interface defines the contract between
   extensions and the [2414]find references-feature.

   [2414] https://code.visualstudio.com/docs/editor/editingevolved#_peek

Methods

   provideReferences(document: [2415]TextDocument, position:
   [2416]Position, context: [2417]ReferenceContext, token:
   [2418]CancellationToken):
   [2419]ProviderResult<[2420]Location[]>

   Provide a set of project-wide references for the given position
   and document.
   Parameter Description
   document: [2421]TextDocument

   The document in which the command was invoked.
   position: [2422]Position

   The position at which the command was invoked.
   context: [2423]ReferenceContext
   token: [2424]CancellationToken

   A cancellation token.
   Returns Description
   [2425]ProviderResult<[2426]Location[]>

   An array of locations or a thenable that resolves to such. The
   lack of a result can be signaled by returning undefined, null,
   or an empty array.

RelativePattern

   A relative pattern is a helper to construct glob patterns that
   are matched relatively to a base path. The base path can either
   be an absolute file path or a [2427]workspace folder.

Constructors

   new RelativePattern(base: [2428]WorkspaceFolder | string,
   pattern: string): [2429]RelativePattern

   Creates a new relative pattern object with a base path and
   pattern to match. This pattern will be matched on file paths
   relative to the base path.
   Parameter Description
   base: [2430]WorkspaceFolder | string

   A base file path to which this pattern will be matched against
   relatively.
   pattern: string

   A file glob pattern like *.{ts,js} that will be matched on file
   paths relative to the base path.
   Returns Description
   [2431]RelativePattern

Properties

   base: string

   A base file path to which this pattern will be matched against
   relatively.

   pattern: string

   A file glob pattern like *.{ts,js} that will be matched on file
   paths relative to the base path.

   Example: Given a base of /home/work/folder and a file path of
   /home/work/folder/index.js, the file glob pattern will match on
   index.js.

RenameProvider

   The rename provider interface defines the contract between
   extensions and the [2432]rename-feature.

   [2432] https://code.visualstudio.com/docs/editor/editingevolved#_rename-symbol

Methods

   prepareRename(document: [2433]TextDocument, position:
   [2434]Position, token: [2435]CancellationToken):
   [2436]ProviderResult<[2437]Range | {placeholder: string, range:
   [2438]Range}>

   Optional function for resolving and validating a position
   before running rename. The result can be a range or a range and
   a placeholder text. The placeholder text should be the
   identifier of the symbol which is being renamed - when omitted
   the text in the returned range is used.

   Note: This function should throw an error or return a rejected
   thenable when the provided location doesn't allow for a rename.
   Parameter Description
   document: [2439]TextDocument

   The document in which rename will be invoked.
   position: [2440]Position

   The position at which rename will be invoked.
   token: [2441]CancellationToken

   A cancellation token.
   Returns Description
   [2442]ProviderResult<[2443]Range | {placeholder: string, range:
   [2444]Range}>

   The range or range and placeholder text of the identifier that
   is to be renamed. The lack of a result can signaled by
   returning undefined or null.

   provideRenameEdits(document: [2445]TextDocument, position:
   [2446]Position, newName: string, token:
   [2447]CancellationToken):
   [2448]ProviderResult<[2449]WorkspaceEdit>

   Provide an edit that describes changes that have to be made to
   one or many resources to rename a symbol to a different name.
   Parameter Description
   document: [2450]TextDocument

   The document in which the command was invoked.
   position: [2451]Position

   The position at which the command was invoked.
   newName: string

   The new name of the symbol. If the given name is not valid, the
   provider must return a rejected promise.
   token: [2452]CancellationToken

   A cancellation token.
   Returns Description
   [2453]ProviderResult<[2454]WorkspaceEdit>

   A workspace edit or a thenable that resolves to such. The lack
   of a result can be signaled by returning undefined or null.

RunOptions

   Run options for a task.

Properties

   reevaluateOnRerun?: boolean

   Controls whether task variables are re-evaluated on rerun.

SaveDialogOptions

   Options to configure the behaviour of a file save dialog.

Properties

   defaultUri?: [2455]Uri

   The resource the dialog shows when opened.

   filters?:

   A set of file filters that are used by the dialog. Each entry
   is a human-readable label, like "TypeScript", and an array of
   extensions, e.g.
{
    'Images': ['png', 'jpg']
    'TypeScript': ['ts', 'tsx']
}

   saveLabel?: string

   A human-readable string for the save button.

   title?: string

   Dialog title.

   This parameter might be ignored, as not all operating systems
   display a title on save dialogs (for example, macOS).

Selection

   Represents a text selection in an editor.

Constructors

   new Selection(anchor: [2456]Position, active: [2457]Position):
   [2458]Selection

   Create a selection from two positions.
         Parameter        Description
   anchor: [2459]Position

                          A position.
   active: [2460]Position

                          A position.
          Returns         Description
   [2461]Selection

   new Selection(anchorLine: number, anchorCharacter: number,
   activeLine: number, activeCharacter: number): [2462]Selection

   Create a selection from four coordinates.
          Parameter                 Description
   anchorLine: number

                           A zero-based line value.
   anchorCharacter: number

                           A zero-based character value.
   activeLine: number

                           A zero-based line value.
   activeCharacter: number

                           A zero-based character value.
           Returns                  Description
   [2463]Selection

Properties

   active: [2464]Position

   The position of the cursor. This position might be before or
   after [2465]anchor.

   anchor: [2466]Position

   The position at which the selection starts. This position might
   be before or after [2467]active.

   end: [2468]Position

   The end position. It is after or equal to [2469]start.

   isEmpty: boolean

   true if start and end are equal.

   isReversed: boolean

   A selection is reversed if [2470]active.isBefore([2471]anchor).

   isSingleLine: boolean

   true if start.line and end.line are equal.

   start: [2472]Position

   The start position. It is before or equal to [2473]end.

Methods

   contains(positionOrRange: [2474]Position | [2475]Range):
   boolean

   Check if a position or a range is contained in this range.
   Parameter Description
   positionOrRange: [2476]Position | [2477]Range

   A position or a range.
   Returns Description
   boolean

   true if the position or range is inside or equal to this range.

   intersection(range: [2478]Range): [2479]Range | undefined

   Intersect range with this range and returns a new range or
   undefined if the ranges have no overlap.
   Parameter Description
   range: [2480]Range

   A range.
   Returns Description
   [2481]Range | undefined

   A range of the greater start and smaller end positions. Will
   return undefined when there is no overlap.

   isEqual(other: [2482]Range): boolean

   Check if other equals this range.
   Parameter Description
   other: [2483]Range

   A range.
   Returns Description
   boolean

   true when start and end are [2484]equal to start and end of
   this range.

   union(other: [2485]Range): [2486]Range

   Compute the union of other with this range.
   Parameter Description
   other: [2487]Range

   A range.
   Returns Description
   [2488]Range

   A range of smaller start position and the greater end position.

   with(start?: [2489]Position, end?: [2490]Position): [2491]Range

   Derived a new range from this range.
   Parameter Description
   start?: [2492]Position

   A position that should be used as start. The default value is
   the [2493]current start.
   end?: [2494]Position

   A position that should be used as end. The default value is the
   [2495]current end.
   Returns Description
   [2496]Range

   A range derived from this range with the given start and end
   position. If start and end are not different this range will be
   returned.

   with(change: {end: [2497]Position, start: [2498]Position}):
   [2499]Range

   Derived a new range from this range.
   Parameter Description
   change: {end: [2500]Position, start: [2501]Position}

   An object that describes a change to this range.
   Returns Description
   [2502]Range

   A range that reflects the given change. Will return this range
   if the change is not changing anything.

SelectionRange

   A selection range represents a part of a selection hierarchy. A
   selection range may have a parent selection range that contains
   it.

Constructors

   new SelectionRange(range: [2503]Range, parent?:
   [2504]SelectionRange): [2505]SelectionRange

   Creates a new selection range.
             Parameter                      Description
   range: [2506]Range

                                 The range of the selection range.
   parent?: [2507]SelectionRange

                                 The parent of the selection range.
              Returns                       Description
   [2508]SelectionRange

Properties

   parent?: [2509]SelectionRange

   The parent selection range containing this range.

   range: [2510]Range

   The [2511]range of this selection range.

SelectionRangeProvider

Methods

   provideSelectionRanges(document: [2512]TextDocument, positions:
   [2513]Position[], token: [2514]CancellationToken):
   [2515]ProviderResult<[2516]SelectionRange[]>

   Provide selection ranges for the given positions.

   Selection ranges should be computed individually and
   independent for each position. The editor will merge and
   deduplicate ranges but providers must return hierarchies of
   selection ranges so that a range is [2517]contained by its
   parent.
   Parameter Description
   document: [2518]TextDocument

   The document in which the command was invoked.
   positions: [2519]Position[]

   The positions at which the command was invoked.
   token: [2520]CancellationToken

   A cancellation token.
   Returns Description
   [2521]ProviderResult<[2522]SelectionRange[]>

   Selection ranges or a thenable that resolves to such. The lack
   of a result can be signaled by returning undefined or null.

SemanticTokens

   Represents semantic tokens, either in a range or in an entire
   document.
     * see - [2523]provideDocumentSemanticTokens for an
       explanation of the format.

     * see - [2524]SemanticTokensBuilder for a helper to create an
       instance.

Constructors

   new SemanticTokens(data: [2525]Uint32Array, resultId?: string):
   [2526]SemanticTokens
          Parameter        Description
   data: [2527]Uint32Array
   resultId?: string
           Returns         Description
   [2528]SemanticTokens

Properties

   data: [2529]Uint32Array

   The actual tokens data.
     * see - [2530]provideDocumentSemanticTokens for an
       explanation of the format.

   resultId?: string

   The result id of the tokens.

   This is the id that will be passed to
   DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdi
   ts (if implemented).

SemanticTokensBuilder

   A semantic tokens builder can help with creating a
   SemanticTokens instance which contains delta encoded semantic
   tokens.

Constructors

   new SemanticTokensBuilder(legend?: [2531]SemanticTokensLegend):
   [2532]SemanticTokensBuilder
                Parameter              Description
   legend?: [2533]SemanticTokensLegend
                 Returns               Description
   [2534]SemanticTokensBuilder

Methods

   build(resultId?: string): [2535]SemanticTokens

   Finish and create a SemanticTokens instance.
        Parameter       Description
   resultId?: string
         Returns        Description
   [2536]SemanticTokens

   push(line: number, char: number, length: number, tokenType:
   number, tokenModifiers?: number): void

   Add another token.
          Parameter                         Description
   line: number

                           The token start line number (absolute value).
   char: number

                           The token start character (absolute value).
   length: number

                           The token length in characters.
   tokenType: number

                           The encoded token type.
   tokenModifiers?: number

                           The encoded token modifiers.
           Returns                          Description
   void

   push(range: [2537]Range, tokenType: string, tokenModifiers?:
   string[]): void

   Add another token. Use only when providing a legend.
          Parameter                         Description
  range: [2538]Range

                            The range of the token. Must be single-line.
  tokenType: string

                            The token type.
  tokenModifiers?: string[]

                            The token modifiers.
           Returns                          Description
  void

SemanticTokensEdit

   Represents an edit to semantic tokens.
     * see - [2539]provideDocumentSemanticTokensEdits for an
       explanation of the format.

Constructors

   new SemanticTokensEdit(start: number, deleteCount: number,
   data?: [2540]Uint32Array): [2541]SemanticTokensEdit
          Parameter         Description
   start: number
   deleteCount: number
   data?: [2542]Uint32Array
           Returns          Description
   [2543]SemanticTokensEdit

Properties

   data?: [2544]Uint32Array

   The elements to insert.

   deleteCount: number

   The count of elements to remove.

   start: number

   The start offset of the edit.

SemanticTokensEdits

   Represents edits to semantic tokens.
     * see - [2545]provideDocumentSemanticTokensEdits for an
       explanation of the format.

Constructors

   new SemanticTokensEdits(edits: [2546]SemanticTokensEdit[],
   resultId?: string): [2547]SemanticTokensEdits
               Parameter             Description
   edits: [2548]SemanticTokensEdit[]
   resultId?: string
                Returns              Description
   [2549]SemanticTokensEdits

Properties

   edits: [2550]SemanticTokensEdit[]

   The edits to the tokens data. All edits refer to the initial
   data state.

   resultId?: string

   The result id of the tokens.

   This is the id that will be passed to
   DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdi
   ts (if implemented).

SemanticTokensLegend

   A semantic tokens legend contains the needed information to
   decipher the integer encoded representation of semantic tokens.

Constructors

   new SemanticTokensLegend(tokenTypes: string[], tokenModifiers?:
   string[]): [2551]SemanticTokensLegend
           Parameter          Description
   tokenTypes: string[]
   tokenModifiers?: string[]
            Returns           Description
   [2552]SemanticTokensLegend

Properties

   tokenModifiers: string[]

   The possible token modifiers.

   tokenTypes: string[]

   The possible token types.

ShellExecution

Constructors

   new ShellExecution(commandLine: string, options?:
   [2553]ShellExecutionOptions): [2554]ShellExecution

   Creates a shell execution with a full command line.
   Parameter Description
   commandLine: string

   The command line to execute.
   options?: [2555]ShellExecutionOptions

   Optional options for the started the shell.
   Returns Description
   [2556]ShellExecution

   new ShellExecution(command: string | [2557]ShellQuotedString,
   args: string | [2558]ShellQuotedString[], options?:
   [2559]ShellExecutionOptions): [2560]ShellExecution

   Creates a shell execution with a command and arguments. For the
   real execution VS Code will construct a command line from the
   command and the arguments. This is subject to interpretation
   especially when it comes to quoting. If full control over the
   command line is needed please use the constructor that creates
   a ShellExecution with the full command line.
   Parameter Description
   command: string | [2561]ShellQuotedString

   The command to execute.
   args: string | [2562]ShellQuotedString[]

   The command arguments.
   options?: [2563]ShellExecutionOptions

   Optional options for the started the shell.
   Returns Description
   [2564]ShellExecution

Properties

   args: string | [2565]ShellQuotedString[]

   The shell args. Is undefined if created with a full command
   line.

   command: string | [2566]ShellQuotedString

   The shell command. Is undefined if created with a full command
   line.

   commandLine: string | undefined

   The shell command line. Is undefined if created with a command
   and arguments.

   options?: [2567]ShellExecutionOptions

   The shell options used when the command line is executed in a
   shell. Defaults to undefined.

ShellExecutionOptions

   Options for a shell execution

Properties

   cwd?: string

   The current working directory of the executed shell. If omitted
   the tools current workspace root is used.

   env?:

   The additional environment of the executed shell. If omitted
   the parent process' environment is used. If provided it is
   merged with the parent process' environment.

   executable?: string

   The shell executable.

   shellArgs?: string[]

   The arguments to be passed to the shell executable used to run
   the task. Most shells require special arguments to execute a
   command. For example bash requires the -c argument to execute a
   command, PowerShell requires -Command and cmd requires both /d
   and /c.

   shellQuoting?: [2568]ShellQuotingOptions

   The shell quotes supported by this shell.

ShellQuotedString

   A string that will be quoted depending on the used shell.

Properties

   quoting: [2569]ShellQuoting

   The quoting style to use.

   value: string

   The actual string value.

ShellQuoting

   Defines how an argument should be quoted if it contains spaces
   or unsupported characters.

Enumeration members

   Escape
   1

   Strong
   2

   Weak
   3

ShellQuotingOptions

   The shell quoting options.

Properties

   escape?: string | {charsToEscape: string, escapeChar: string}

   The character used to do character escaping. If a string is
   provided only spaces are escaped. If a { escapeChar,
   charsToEscape } literal is provide all characters in
   charsToEscape are escaped using the escapeChar.

   strong?: string

   The character used for strong quoting. The string's length must
   be 1.

   weak?: string

   The character used for weak quoting. The string's length must
   be 1.

SignatureHelp

   Signature help represents the signature of something callable.
   There can be multiple signatures but only one active and only
   one active parameter.

Properties

   activeParameter: number

   The active parameter of the active signature.

   activeSignature: number

   The active signature.

   signatures: [2570]SignatureInformation[]

   One or more signatures.

SignatureHelpContext

   Additional information about the context in which a
   [2571]SignatureHelpProvider was triggered.

Properties

   activeSignatureHelp?: [2572]SignatureHelp

   The currently active [2573]SignatureHelp.

   The activeSignatureHelp has its [SignatureHelp.activeSignature]
   field updated based on the user arrowing through available
   signatures.

   isRetrigger: boolean

   true if signature help was already showing when it was
   triggered.

   Retriggers occur when the signature help is already active and
   can be caused by actions such as typing a trigger character, a
   cursor move, or document content changes.

   triggerCharacter?: string

   Character that caused signature help to be triggered.

   This is undefined when signature help is not triggered by
   typing, such as when manually invoking signature help or when
   moving the cursor.

   triggerKind: [2574]SignatureHelpTriggerKind

   Action that caused signature help to be triggered.

SignatureHelpProvider

   The signature help provider interface defines the contract
   between extensions and the [2575]parameter hints-feature.

   [2575] https://code.visualstudio.com/docs/editor/intellisense

Methods

   provideSignatureHelp(document: [2576]TextDocument, position:
   [2577]Position, token: [2578]CancellationToken, context:
   [2579]SignatureHelpContext):
   [2580]ProviderResult<[2581]SignatureHelp>

   Provide help for the signature at the given position and
   document.
   Parameter Description
   document: [2582]TextDocument

   The document in which the command was invoked.
   position: [2583]Position

   The position at which the command was invoked.
   token: [2584]CancellationToken

   A cancellation token.
   context: [2585]SignatureHelpContext

   Information about how signature help was triggered.
   Returns Description
   [2586]ProviderResult<[2587]SignatureHelp>

   Signature help or a thenable that resolves to such. The lack of
   a result can be signaled by returning undefined or null.

SignatureHelpProviderMetadata

   Metadata about a registered [2588]SignatureHelpProvider.

Properties

   retriggerCharacters: [2589]ReadonlyArray<string>

   List of characters that re-trigger signature help.

   These trigger characters are only active when signature help is
   already showing. All trigger characters are also counted as
   re-trigger characters.

   triggerCharacters: [2590]ReadonlyArray<string>

   List of characters that trigger signature help.

SignatureHelpTriggerKind

   How a [2591]SignatureHelpProvider was triggered.

Enumeration members

   ContentChange
   3

   Invoke
   1

   TriggerCharacter
   2

SignatureInformation

   Represents the signature of something callable. A signature can
   have a label, like a function-name, a doc-comment, and a set of
   parameters.

Constructors

   new SignatureInformation(label: string, documentation?: string
   | [2592]MarkdownString): [2593]SignatureInformation

   Creates a new signature information object.
                     Parameter                     Description
   label: string

                                                 A label string.
   documentation?: string | [2594]MarkdownString

                                                 A doc string.
                      Returns                      Description
   [2595]SignatureInformation

Properties

   activeParameter?: number

   The index of the active parameter.

   If provided, this is used in place of
   [2596]SignatureHelp.activeSignature.

   documentation?: string | [2597]MarkdownString

   The human-readable doc-comment of this signature. Will be shown
   in the UI but can be omitted.

   label: string

   The label of this signature. Will be shown in the UI.

   parameters: [2598]ParameterInformation[]

   The parameters of this signature.

SnippetString

   A snippet string is a template which allows to insert text and
   to control the editor cursor when insertion happens.

   A snippet can define tab stops and placeholders with $1, $2 and
   ${3:foo}. $0 defines the final tab stop, it defaults to the end
   of the snippet. Variables are defined with $name and
   ${name:default value}. The full snippet syntax is documented
   [2599]here.

   [2599] https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets

Constructors

   new SnippetString(value?: string): [2600]SnippetString
        Parameter      Description
   value?: string
         Returns       Description
   [2601]SnippetString

Properties

   value: string

   The snippet string.

Methods

   appendChoice(values: string[], number?: number):
   [2602]SnippetString

   Builder-function that appends a choice (${1|a,b,c}) to the
   [2603]value of this snippet string.
   Parameter Description
   values: string[]

   The values for choices - the array of strings
   number?: number

   The number of this tabstop, defaults to an auto-increment value
   starting at 1.
   Returns Description
   [2604]SnippetString

   This snippet string.

   appendPlaceholder(value: string | (snippet:
   [2605]SnippetString) => any, number?: number):
   [2606]SnippetString

   Builder-function that appends a placeholder (${1:value}) to the
   [2607]value of this snippet string.
   Parameter Description
   value: string | (snippet: [2608]SnippetString) => any

   The value of this placeholder - either a string or a function
   with which a nested snippet can be created.
   number?: number

   The number of this tabstop, defaults to an auto-increment value
   starting at 1.
   Returns Description
   [2609]SnippetString

   This snippet string.

   appendTabstop(number?: number): [2610]SnippetString

   Builder-function that appends a tabstop ($1, $2 etc) to the
   [2611]value of this snippet string.
   Parameter Description
   number?: number

   The number of this tabstop, defaults to an auto-increment value
   starting at 1.
   Returns Description
   [2612]SnippetString

   This snippet string.

   appendText(string: string): [2613]SnippetString

   Builder-function that appends the given string to the
   [2614]value of this snippet string.
   Parameter Description
   string: string

   A value to append 'as given'. The string will be escaped.
   Returns Description
   [2615]SnippetString

   This snippet string.

   appendVariable(name: string, defaultValue: string | (snippet:
   [2616]SnippetString) => any): [2617]SnippetString

   Builder-function that appends a variable (${VAR}) to the
   [2618]value of this snippet string.
   Parameter Description
   name: string

   The name of the variable - excluding the $.
   defaultValue: string | (snippet: [2619]SnippetString) => any

   The default value which is used when the variable name cannot
   be resolved - either a string or a function with which a nested
   snippet can be created.
   Returns Description
   [2620]SnippetString

   This snippet string.

SourceBreakpoint

   A breakpoint specified by a source location.

Constructors

   new SourceBreakpoint(location: [2621]Location, enabled?:
   boolean, condition?: string, hitCondition?: string,
   logMessage?: string): [2622]SourceBreakpoint

   Create a new breakpoint for a source location.
          Parameter         Description
   location: [2623]Location
   enabled?: boolean
   condition?: string
   hitCondition?: string
   logMessage?: string
           Returns          Description
   [2624]SourceBreakpoint

Properties

   condition?: string

   An optional expression for conditional breakpoints.

   enabled: boolean

   Is breakpoint enabled.

   hitCondition?: string

   An optional expression that controls how many hits of the
   breakpoint are ignored.

   id: string

   The unique ID of the breakpoint.

   location: [2625]Location

   The source and line position of this breakpoint.

   logMessage?: string

   An optional message that gets logged when this breakpoint is
   hit. Embedded expressions within {} are interpolated by the
   debug adapter.

SourceControl

   An source control is able to provide [2626]resource states to
   the editor and interact with the editor in several source
   control related ways.

Properties

   acceptInputCommand?: [2627]Command

   Optional accept input command.

   This command will be invoked when the user accepts the value in
   the Source Control input.

   commitTemplate?: string

   Optional commit template string.

   The Source Control viewlet will populate the Source Control
   input with this value when appropriate.

   count?: number

   The UI-visible count of [2628]resource states of this source
   control.

   Equals to the total number of [2629]resource state of this
   source control, if undefined.

   id: string

   The id of this source control.

   inputBox: [2630]SourceControlInputBox

   The [2631]input box for this source control.

   label: string

   The human-readable label of this source control.

   quickDiffProvider?: [2632]QuickDiffProvider

   An optional [2633]quick diff provider.

   rootUri: [2634]Uri | undefined

   The (optional) Uri of the root of this source control.

   statusBarCommands?: [2635]Command[]

   Optional status bar commands.

   These commands will be displayed in the editor's status bar.

Methods

   createResourceGroup(id: string, label: string):
   [2636]SourceControlResourceGroup

   Create a new [2637]resource group.
              Parameter             Description
   id: string
   label: string
               Returns              Description
   [2638]SourceControlResourceGroup

   dispose(): void

   Dispose this source control.
   Returns Description
   void

SourceControlInputBox

   Represents the input box in the Source Control viewlet.

Properties

   placeholder: string

   A string to show as placeholder in the input box to guide the
   user.

   value: string

   Setter and getter for the contents of the input box.

   visible: boolean

   Controls whether the input box is visible (default is true).

SourceControlResourceDecorations

   The decorations for a [2639]source control resource state. Can
   be independently specified for light and dark themes.

Properties

   dark?: [2640]SourceControlResourceThemableDecorations

   The dark theme decorations.

   faded?: boolean

   Whether the [2641]source control resource state should be faded
   in the UI.

   iconPath?: string | [2642]Uri

   The icon path for a specific [2643]source control resource
   state.

   light?: [2644]SourceControlResourceThemableDecorations

   The light theme decorations.

   strikeThrough?: boolean

   Whether the [2645]source control resource state should be
   striked-through in the UI.

   tooltip?: string

   The title for a specific [2646]source control resource state.

SourceControlResourceGroup

   A source control resource group is a collection of [2647]source
   control resource states.

Properties

   hideWhenEmpty?: boolean

   Whether this source control resource group is hidden when it
   contains no [2648]source control resource states.

   id: string

   The id of this source control resource group.

   label: string

   The label of this source control resource group.

   resourceStates: [2649]SourceControlResourceState[]

   This group's collection of [2650]source control resource
   states.

Methods

   dispose(): void

   Dispose this source control resource group.
   Returns Description
   void

SourceControlResourceState

   An source control resource state represents the state of an
   underlying workspace resource within a certain [2651]source
   control group.

Properties

   command?: [2652]Command

   The [2653]command which should be run when the resource state
   is open in the Source Control viewlet.

   contextValue?: string

   Context value of the resource state. This can be used to
   contribute resource specific actions. For example, if a
   resource is given a context value as diffable. When
   contributing actions to scm/resourceState/context using menus
   extension point, you can specify context value for key
   scmResourceState in when expressions, like scmResourceState ==
   diffable.
    "contributes": {
        "menus": {
            "scm/resourceState/context": 
                {
                    "command": "extension.diff",
                    "when": "scmResourceState == diffable"
                }
            ]
        }
    }

   This will show action extension.diff only for resources with
   contextValue is diffable.

   decorations?: [2654]SourceControlResourceDecorations

   The [2655]decorations for this source control resource state.

   resourceUri: [2656]Uri

   The [2657]uri of the underlying resource inside the workspace.

SourceControlResourceThemableDecorations

   The theme-aware decorations for a [2658]source control resource
   state.

Properties

   iconPath?: string | [2659]Uri

   The icon path for a specific [2660]source control resource
   state<

